
RFID_Moter_f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f78  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08008148  08008148  00018148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800827c  0800827c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800827c  0800827c  0001827c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008284  08008284  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008284  08008284  00018284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008288  08008288  00018288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800828c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004aec  20000068  080082f4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b54  080082f4  00024b54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a4f1  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042b7  00000000  00000000  0003a5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  0003e888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ed  00000000  00000000  0003fe80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002578e  00000000  00000000  00040f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c0f1  00000000  00000000  000666fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbf6c  00000000  00000000  000827ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c40  00000000  00000000  0015e758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00164398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008130 	.word	0x08008130

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08008130 	.word	0x08008130

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <MX_DMA_Init+0x68>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a16      	ldr	r2, [pc, #88]	; (8000574 <MX_DMA_Init+0x68>)
 800051c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_DMA_Init+0x68>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	603b      	str	r3, [r7, #0]
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <MX_DMA_Init+0x68>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <MX_DMA_Init+0x68>)
 8000538:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <MX_DMA_Init+0x68>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2105      	movs	r1, #5
 800054e:	2010      	movs	r0, #16
 8000550:	f001 fcf2 	bl	8001f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000554:	2010      	movs	r0, #16
 8000556:	f001 fd0b 	bl	8001f70 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2105      	movs	r1, #5
 800055e:	2044      	movs	r0, #68	; 0x44
 8000560:	f001 fcea 	bl	8001f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000564:	2044      	movs	r0, #68	; 0x44
 8000566:	f001 fd03 	bl	8001f70 <HAL_NVIC_EnableIRQ>

}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40023800 	.word	0x40023800

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	200000a0 	.word	0x200000a0
 80005a8:	20000140 	.word	0x20000140

080005ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b0aa      	sub	sp, #168	; 0xa8
 80005b0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005b2:	4b3a      	ldr	r3, [pc, #232]	; (800069c <MX_FREERTOS_Init+0xf0>)
 80005b4:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80005b8:	461d      	mov	r5, r3
 80005ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f005 fe7a 	bl	80062c6 <osThreadCreate>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a32      	ldr	r2, [pc, #200]	; (80006a0 <MX_FREERTOS_Init+0xf4>)
 80005d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of rfidExecuteTask */
  osThreadDef(rfidExecuteTask, StartRfidExecuteTask, osPriorityNormal, 0, 128);
 80005d8:	4b32      	ldr	r3, [pc, #200]	; (80006a4 <MX_FREERTOS_Init+0xf8>)
 80005da:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80005de:	461d      	mov	r5, r3
 80005e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rfidExecuteTaskHandle = osThreadCreate(osThread(rfidExecuteTask), NULL);
 80005ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f005 fe67 	bl	80062c6 <osThreadCreate>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a2b      	ldr	r2, [pc, #172]	; (80006a8 <MX_FREERTOS_Init+0xfc>)
 80005fc:	6013      	str	r3, [r2, #0]

  /* definition and creation of tagNumTransmitT */
  osThreadDef(tagNumTransmitT, StartTagNumTransmitTask, osPriorityNormal, 0, 128);
 80005fe:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <MX_FREERTOS_Init+0x100>)
 8000600:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000604:	461d      	mov	r5, r3
 8000606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tagNumTransmitTHandle = osThreadCreate(osThread(tagNumTransmitT), NULL);
 8000612:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f005 fe54 	bl	80062c6 <osThreadCreate>
 800061e:	4603      	mov	r3, r0
 8000620:	4a23      	ldr	r2, [pc, #140]	; (80006b0 <MX_FREERTOS_Init+0x104>)
 8000622:	6013      	str	r3, [r2, #0]

  /* definition and creation of rc522_read */
  osThreadDef(rc522_read, rc522_readTask, osPriorityNormal, 0, 128);
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <MX_FREERTOS_Init+0x108>)
 8000626:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800062a:	461d      	mov	r5, r3
 800062c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rc522_readHandle = osThreadCreate(osThread(rc522_read), NULL);
 8000638:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f005 fe41 	bl	80062c6 <osThreadCreate>
 8000644:	4603      	mov	r3, r0
 8000646:	4a1c      	ldr	r2, [pc, #112]	; (80006b8 <MX_FREERTOS_Init+0x10c>)
 8000648:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorTask */
  osThreadDef(motorTask, controlmotor, osPriorityNormal, 0, 128);
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_FREERTOS_Init+0x110>)
 800064c:	f107 041c 	add.w	r4, r7, #28
 8000650:	461d      	mov	r5, r3
 8000652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000656:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f005 fe2e 	bl	80062c6 <osThreadCreate>
 800066a:	4603      	mov	r3, r0
 800066c:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <MX_FREERTOS_Init+0x114>)
 800066e:	6013      	str	r3, [r2, #0]

  /* definition and creation of transmitTask2 */
  osThreadDef(transmitTask2, StarttransmitTask2, osPriorityNormal, 0, 128);
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_FREERTOS_Init+0x118>)
 8000672:	463c      	mov	r4, r7
 8000674:	461d      	mov	r5, r3
 8000676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitTask2Handle = osThreadCreate(osThread(transmitTask2), NULL);
 8000682:	463b      	mov	r3, r7
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f005 fe1d 	bl	80062c6 <osThreadCreate>
 800068c:	4603      	mov	r3, r0
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <MX_FREERTOS_Init+0x11c>)
 8000690:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000692:	bf00      	nop
 8000694:	37a8      	adds	r7, #168	; 0xa8
 8000696:	46bd      	mov	sp, r7
 8000698:	bdb0      	pop	{r4, r5, r7, pc}
 800069a:	bf00      	nop
 800069c:	08008154 	.word	0x08008154
 80006a0:	20000088 	.word	0x20000088
 80006a4:	08008180 	.word	0x08008180
 80006a8:	2000008c 	.word	0x2000008c
 80006ac:	080081ac 	.word	0x080081ac
 80006b0:	20000090 	.word	0x20000090
 80006b4:	080081d4 	.word	0x080081d4
 80006b8:	20000094 	.word	0x20000094
 80006bc:	080081fc 	.word	0x080081fc
 80006c0:	20000098 	.word	0x20000098
 80006c4:	08008228 	.word	0x08008228
 80006c8:	2000009c 	.word	0x2000009c

080006cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	read_rfid_number();
 80006d4:	f000 ffde 	bl	8001694 <read_rfid_number>
	read_command();
 80006d8:	f001 f8e4 	bl	80018a4 <read_command>
    osDelay(1);
 80006dc:	2001      	movs	r0, #1
 80006de:	f005 fe3e 	bl	800635e <osDelay>
	read_rfid_number();
 80006e2:	e7f7      	b.n	80006d4 <StartDefaultTask+0x8>

080006e4 <StartRfidExecuteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRfidExecuteTask */
void StartRfidExecuteTask(void const * argument)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRfidExecuteTask */
	  uint8_t read_tag_single_time[] = {0xBB, 0x00, 0x22, 0x00, 0x00, 0x22, 0x7E};
 80006ec:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <StartRfidExecuteTask+0x44>)
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f6:	6018      	str	r0, [r3, #0]
 80006f8:	3304      	adds	r3, #4
 80006fa:	8019      	strh	r1, [r3, #0]
 80006fc:	3302      	adds	r3, #2
 80006fe:	0c0a      	lsrs	r2, r1, #16
 8000700:	701a      	strb	r2, [r3, #0]
	  vTaskSuspend(rfidExecuteTaskHandle);
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <StartRfidExecuteTask+0x48>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f006 f95c 	bl	80069c4 <vTaskSuspend>
	  /* Infinite loop */
	  for(;;)
	  {
		HAL_UART_Transmit(&huart1, read_tag_single_time, sizeof(read_tag_single_time), HAL_MAX_DELAY);
 800070c:	f107 0108 	add.w	r1, r7, #8
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	2207      	movs	r2, #7
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <StartRfidExecuteTask+0x4c>)
 8000718:	f004 fc02 	bl	8004f20 <HAL_UART_Transmit>
		//vTaskResume(defaultTaskHandle);
	    osDelay(300);
 800071c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000720:	f005 fe1d 	bl	800635e <osDelay>
		HAL_UART_Transmit(&huart1, read_tag_single_time, sizeof(read_tag_single_time), HAL_MAX_DELAY);
 8000724:	e7f2      	b.n	800070c <StartRfidExecuteTask+0x28>
 8000726:	bf00      	nop
 8000728:	08008244 	.word	0x08008244
 800072c:	2000008c 	.word	0x2000008c
 8000730:	20000b24 	.word	0x20000b24

08000734 <StartTagNumTransmitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTagNumTransmitTask */
void StartTagNumTransmitTask(void const * argument)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTagNumTransmitTask */
  /* Infinite loop */
  osEvent event;
  for(;;)
  {
	event = osSignalWait(transmitSignal, 100);
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2264      	movs	r2, #100	; 0x64
 8000742:	2101      	movs	r1, #1
 8000744:	4618      	mov	r0, r3
 8000746:	f005 fe5f 	bl	8006408 <osSignalWait>
	if(event.value.signals == transmitSignal){
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d101      	bne.n	8000754 <StartTagNumTransmitTask+0x20>
		transmitData();
 8000750:	f000 fffa 	bl	8001748 <transmitData>
		}
  osDelay(1);
 8000754:	2001      	movs	r0, #1
 8000756:	f005 fe02 	bl	800635e <osDelay>
	event = osSignalWait(transmitSignal, 100);
 800075a:	e7ef      	b.n	800073c <StartTagNumTransmitTask+0x8>

0800075c <rc522_readTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rc522_readTask */
void rc522_readTask(void const * argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN rc522_readTask */
  uint8_t status,cardstr[16] = {0,};
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]

  /* Infinite loop */
  for(;;)
  {

	if(MFRC522_Request(PICC_REQIDL, cardstr) == MI_OK){
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	2026      	movs	r0, #38	; 0x26
 800077c:	f000 fb87 	bl	8000e8e <MFRC522_Request>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d111      	bne.n	80007aa <rc522_readTask+0x4e>
		status = MFRC522_Anticoll(cardstr);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fba4 	bl	8000ed8 <MFRC522_Anticoll>
 8000790:	4603      	mov	r3, r0
 8000792:	77fb      	strb	r3, [r7, #31]
		if(status == MI_OK){
 8000794:	7ffb      	ldrb	r3, [r7, #31]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d107      	bne.n	80007aa <rc522_readTask+0x4e>
			HAL_UART_Transmit(&huart2, cardstr, 5, 500);
 800079a:	f107 010c 	add.w	r1, r7, #12
 800079e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007a2:	2205      	movs	r2, #5
 80007a4:	4803      	ldr	r0, [pc, #12]	; (80007b4 <rc522_readTask+0x58>)
 80007a6:	f004 fbbb 	bl	8004f20 <HAL_UART_Transmit>
		}
	}
	osDelay(300);
 80007aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007ae:	f005 fdd6 	bl	800635e <osDelay>
	if(MFRC522_Request(PICC_REQIDL, cardstr) == MI_OK){
 80007b2:	e7df      	b.n	8000774 <rc522_readTask+0x18>
 80007b4:	20000b6c 	.word	0x20000b6c

080007b8 <controlmotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlmotor */
void controlmotor(void const * argument)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlmotor */
  /* Infinite loop */
	vTaskSuspend(motorTaskHandle);
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <controlmotor+0x30>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f006 f8fd 	bl	80069c4 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  if(motor_status == 0){
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <controlmotor+0x34>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d102      	bne.n	80007d8 <controlmotor+0x20>
		  scan_motor_up();
 80007d2:	f000 fbbf 	bl	8000f54 <scan_motor_up>
 80007d6:	e7f8      	b.n	80007ca <controlmotor+0x12>
	  }else if(motor_status == 1){
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <controlmotor+0x34>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d1f4      	bne.n	80007ca <controlmotor+0x12>
		  scan_motor_down();
 80007e0:	f000 fbe6 	bl	8000fb0 <scan_motor_down>
	  if(motor_status == 0){
 80007e4:	e7f1      	b.n	80007ca <controlmotor+0x12>
 80007e6:	bf00      	nop
 80007e8:	20000098 	.word	0x20000098
 80007ec:	20000084 	.word	0x20000084

080007f0 <StarttransmitTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StarttransmitTask2 */
void StarttransmitTask2(void const * argument)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StarttransmitTask2 */
	osEvent event;
  /* Infinite loop */
	  for(;;)
	  {
		  event = osSignalWait(transmitSignal2, 100);
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2264      	movs	r2, #100	; 0x64
 80007fe:	2102      	movs	r1, #2
 8000800:	4618      	mov	r0, r3
 8000802:	f005 fe01 	bl	8006408 <osSignalWait>
		  if(event.value.signals == transmitSignal2){
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	2b02      	cmp	r3, #2
 800080a:	d101      	bne.n	8000810 <StarttransmitTask2+0x20>
			  transmitCommand();
 800080c:	f001 f87c 	bl	8001908 <transmitCommand>
		  }
		  osDelay(1);
 8000810:	2001      	movs	r0, #1
 8000812:	f005 fda4 	bl	800635e <osDelay>
		  event = osSignalWait(transmitSignal2, 100);
 8000816:	e7ef      	b.n	80007f8 <StarttransmitTask2+0x8>

08000818 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b43      	ldr	r3, [pc, #268]	; (8000940 <MX_GPIO_Init+0x128>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a42      	ldr	r2, [pc, #264]	; (8000940 <MX_GPIO_Init+0x128>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b40      	ldr	r3, [pc, #256]	; (8000940 <MX_GPIO_Init+0x128>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b3c      	ldr	r3, [pc, #240]	; (8000940 <MX_GPIO_Init+0x128>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a3b      	ldr	r2, [pc, #236]	; (8000940 <MX_GPIO_Init+0x128>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b39      	ldr	r3, [pc, #228]	; (8000940 <MX_GPIO_Init+0x128>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	4b35      	ldr	r3, [pc, #212]	; (8000940 <MX_GPIO_Init+0x128>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a34      	ldr	r2, [pc, #208]	; (8000940 <MX_GPIO_Init+0x128>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b32      	ldr	r3, [pc, #200]	; (8000940 <MX_GPIO_Init+0x128>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <MX_GPIO_Init+0x128>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a2d      	ldr	r2, [pc, #180]	; (8000940 <MX_GPIO_Init+0x128>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <MX_GPIO_Init+0x128>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Direction0_Pin|Direction1_Pin|LD2_Pin|RC522_CS_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2163      	movs	r1, #99	; 0x63
 80008a2:	4828      	ldr	r0, [pc, #160]	; (8000944 <MX_GPIO_Init+0x12c>)
 80008a4:	f002 f908 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4822      	ldr	r0, [pc, #136]	; (8000948 <MX_GPIO_Init+0x130>)
 80008c0:	f001 ff66 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Direction0_Pin|Direction1_Pin;
 80008c4:	2303      	movs	r3, #3
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	481a      	ldr	r0, [pc, #104]	; (8000944 <MX_GPIO_Init+0x12c>)
 80008dc:	f001 ff58 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|RC522_CS_Pin;
 80008e0:	2360      	movs	r3, #96	; 0x60
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	4813      	ldr	r0, [pc, #76]	; (8000944 <MX_GPIO_Init+0x12c>)
 80008f8:	f001 ff4a 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Limit_switch_up_Pin|Limit_switch_down_Pin;
 80008fc:	2330      	movs	r3, #48	; 0x30
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000900:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	480e      	ldr	r0, [pc, #56]	; (800094c <MX_GPIO_Init+0x134>)
 8000912:	f001 ff3d 	bl	8002790 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2105      	movs	r1, #5
 800091a:	200a      	movs	r0, #10
 800091c:	f001 fb0c 	bl	8001f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000920:	200a      	movs	r0, #10
 8000922:	f001 fb25 	bl	8001f70 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2105      	movs	r1, #5
 800092a:	2017      	movs	r0, #23
 800092c:	f001 fb04 	bl	8001f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000930:	2017      	movs	r0, #23
 8000932:	f001 fb1d 	bl	8001f70 <HAL_NVIC_EnableIRQ>

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40020000 	.word	0x40020000
 8000948:	40020800 	.word	0x40020800
 800094c:	40020400 	.word	0x40020400

08000950 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
extern SPI_HandleTypeDef hspi2;
uint8_t rc522_rx_buf[100];
uint8_t cardstr[17];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
	static uint32_t before_tick1 = 0;
	static uint32_t before_tick2 = 0;

	if(GPIO_Pin == Limit_switch_up_Pin){
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	2b10      	cmp	r3, #16
 800095e:	d111      	bne.n	8000984 <HAL_GPIO_EXTI_Callback+0x34>
		if(HAL_GetTick() - before_tick1 >= 300){
 8000960:	f001 fa26 	bl	8001db0 <HAL_GetTick>
 8000964:	4602      	mov	r2, r0
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000970:	d31c      	bcc.n	80009ac <HAL_GPIO_EXTI_Callback+0x5c>
			before_tick1 = HAL_GetTick();
 8000972:	f001 fa1d 	bl	8001db0 <HAL_GetTick>
 8000976:	4603      	mov	r3, r0
 8000978:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x64>)
 800097a:	6013      	str	r3, [r2, #0]
			limit_switch_up = 1;
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x68>)
 800097e:	2201      	movs	r2, #1
 8000980:	601a      	str	r2, [r3, #0]
		if(HAL_GetTick() - before_tick2 >= 300){
			before_tick2 = HAL_GetTick();
			limit_switch_down = 1;
		}
	}
}
 8000982:	e013      	b.n	80009ac <HAL_GPIO_EXTI_Callback+0x5c>
	}else if(GPIO_Pin == Limit_switch_down_Pin){
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	2b20      	cmp	r3, #32
 8000988:	d110      	bne.n	80009ac <HAL_GPIO_EXTI_Callback+0x5c>
		if(HAL_GetTick() - before_tick2 >= 300){
 800098a:	f001 fa11 	bl	8001db0 <HAL_GetTick>
 800098e:	4602      	mov	r2, r0
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800099a:	d307      	bcc.n	80009ac <HAL_GPIO_EXTI_Callback+0x5c>
			before_tick2 = HAL_GetTick();
 800099c:	f001 fa08 	bl	8001db0 <HAL_GetTick>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a06      	ldr	r2, [pc, #24]	; (80009bc <HAL_GPIO_EXTI_Callback+0x6c>)
 80009a4:	6013      	str	r3, [r2, #0]
			limit_switch_down = 1;
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x70>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	601a      	str	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000340 	.word	0x20000340
 80009b8:	20000348 	.word	0x20000348
 80009bc:	20000344 	.word	0x20000344
 80009c0:	2000034c 	.word	0x2000034c

080009c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c8:	f001 f9bc 	bl	8001d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009cc:	f000 f82c 	bl	8000a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d0:	f7ff ff22 	bl	8000818 <MX_GPIO_Init>
  MX_DMA_Init();
 80009d4:	f7ff fd9a 	bl	800050c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009d8:	f000 ffee 	bl	80019b8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80009dc:	f000 ffc2 	bl	8001964 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80009e0:	f001 f814 	bl	8001a0c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 80009e4:	f000 fb38 	bl	8001058 <MX_SPI2_Init>
  MX_TIM1_Init();
 80009e8:	f000 fd08 	bl	80013fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  uart_init();
 80009ec:	f000 fde6 	bl	80015bc <uart_init>
  uart2_init();
 80009f0:	f000 feec 	bl	80017cc <uart2_init>
  MFRC522_Init();
 80009f4:	f000 f954 	bl	8000ca0 <MFRC522_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009f8:	2100      	movs	r1, #0
 80009fa:	4809      	ldr	r0, [pc, #36]	; (8000a20 <main+0x5c>)
 80009fc:	f003 fc3a 	bl	8004274 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2101      	movs	r1, #1
 8000a04:	4807      	ldr	r0, [pc, #28]	; (8000a24 <main+0x60>)
 8000a06:	f002 f857 	bl	8002ab8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <main+0x60>)
 8000a10:	f002 f852 	bl	8002ab8 <HAL_GPIO_WritePin>
//  HAL_SPI_Receive_IT(&hspi2,rc522_rx_buf,sizeof(rc522_rx_buf));

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a14:	f7ff fdca 	bl	80005ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a18:	f005 fc4e 	bl	80062b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <main+0x58>
 8000a1e:	bf00      	nop
 8000a20:	200003f0 	.word	0x200003f0
 8000a24:	40020000 	.word	0x40020000

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b094      	sub	sp, #80	; 0x50
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2234      	movs	r2, #52	; 0x34
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f007 fa90 	bl	8007f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	4b2c      	ldr	r3, [pc, #176]	; (8000b04 <SystemClock_Config+0xdc>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	4a2b      	ldr	r2, [pc, #172]	; (8000b04 <SystemClock_Config+0xdc>)
 8000a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5c:	4b29      	ldr	r3, [pc, #164]	; (8000b04 <SystemClock_Config+0xdc>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a68:	2300      	movs	r3, #0
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <SystemClock_Config+0xe0>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a25      	ldr	r2, [pc, #148]	; (8000b08 <SystemClock_Config+0xe0>)
 8000a72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <SystemClock_Config+0xe0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a84:	2301      	movs	r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000a9c:	23b4      	movs	r3, #180	; 0xb4
 8000a9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 fbff 	bl	80032b4 <HAL_RCC_OscConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000abc:	f000 f838 	bl	8000b30 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ac0:	f002 f82c 	bl	8002b1c <HAL_PWREx_EnableOverDrive>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000aca:	f000 f831 	bl	8000b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ace:	230f      	movs	r3, #15
 8000ad0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ada:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ade:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	2105      	movs	r1, #5
 8000aec:	4618      	mov	r0, r3
 8000aee:	f002 f865 	bl	8002bbc <HAL_RCC_ClockConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000af8:	f000 f81a 	bl	8000b30 <Error_Handler>
  }
}
 8000afc:	bf00      	nop
 8000afe:	3750      	adds	r7, #80	; 0x50
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40007000 	.word	0x40007000

08000b0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d101      	bne.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b1e:	f001 f933 	bl	8001d88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40000800 	.word	0x40000800

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <Error_Handler+0x8>
	...

08000b3c <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af02      	add	r7, sp, #8
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000b46:	f107 020f 	add.w	r2, r7, #15
 8000b4a:	1df9      	adds	r1, r7, #7
 8000b4c:	2364      	movs	r3, #100	; 0x64
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2301      	movs	r3, #1
 8000b52:	4804      	ldr	r0, [pc, #16]	; (8000b64 <RC522_SPI_Transfer+0x28>)
 8000b54:	f002 fed5 	bl	8003902 <HAL_SPI_TransmitReceive>

	return rx_data;
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000350 	.word	0x20000350

08000b68 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	460a      	mov	r2, r1
 8000b72:	71fb      	strb	r3, [r7, #7]
 8000b74:	4613      	mov	r3, r2
 8000b76:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2140      	movs	r1, #64	; 0x40
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <Write_MFRC522+0x48>)
 8000b7e:	f001 ff9b 	bl	8002ab8 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ffd4 	bl	8000b3c <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000b94:	79bb      	ldrb	r3, [r7, #6]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ffd0 	bl	8000b3c <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2140      	movs	r1, #64	; 0x40
 8000ba0:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <Write_MFRC522+0x48>)
 8000ba2:	f001 ff89 	bl	8002ab8 <HAL_GPIO_WritePin>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40020000 	.word	0x40020000

08000bb4 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2140      	movs	r1, #64	; 0x40
 8000bc2:	480f      	ldr	r0, [pc, #60]	; (8000c00 <Read_MFRC522+0x4c>)
 8000bc4:	f001 ff78 	bl	8002ab8 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000bd2:	b25b      	sxtb	r3, r3
 8000bd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ffad 	bl	8000b3c <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff ffaa 	bl	8000b3c <RC522_SPI_Transfer>
 8000be8:	4603      	mov	r3, r0
 8000bea:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2140      	movs	r1, #64	; 0x40
 8000bf0:	4803      	ldr	r0, [pc, #12]	; (8000c00 <Read_MFRC522+0x4c>)
 8000bf2:	f001 ff61 	bl	8002ab8 <HAL_GPIO_WritePin>

	return val;
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]

}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40020000 	.word	0x40020000

08000c04 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	460a      	mov	r2, r1
 8000c0e:	71fb      	strb	r3, [r7, #7]
 8000c10:	4613      	mov	r3, r2
 8000c12:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ffcc 	bl	8000bb4 <Read_MFRC522>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000c20:	7bfa      	ldrb	r2, [r7, #15]
 8000c22:	79bb      	ldrb	r3, [r7, #6]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff9b 	bl	8000b68 <Write_MFRC522>
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b084      	sub	sp, #16
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	460a      	mov	r2, r1
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	4613      	mov	r3, r2
 8000c48:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ffb1 	bl	8000bb4 <Read_MFRC522>
 8000c52:	4603      	mov	r3, r0
 8000c54:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000c56:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	b25a      	sxtb	r2, r3
 8000c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c62:	4013      	ands	r3, r2
 8000c64:	b25b      	sxtb	r3, r3
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff7b 	bl	8000b68 <Write_MFRC522>
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8000c7e:	2014      	movs	r0, #20
 8000c80:	f7ff ff98 	bl	8000bb4 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000c84:	2103      	movs	r1, #3
 8000c86:	2014      	movs	r0, #20
 8000c88:	f7ff ffbc 	bl	8000c04 <SetBitMask>
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000c94:	210f      	movs	r1, #15
 8000c96:	2001      	movs	r0, #1
 8000c98:	f7ff ff66 	bl	8000b68 <Write_MFRC522>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2140      	movs	r1, #64	; 0x40
 8000ca8:	4812      	ldr	r0, [pc, #72]	; (8000cf4 <MFRC522_Init+0x54>)
 8000caa:	f001 ff05 	bl	8002ab8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <MFRC522_Init+0x58>)
 8000cb4:	f001 ff00 	bl	8002ab8 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000cb8:	f7ff ffea 	bl	8000c90 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000cbc:	218d      	movs	r1, #141	; 0x8d
 8000cbe:	202a      	movs	r0, #42	; 0x2a
 8000cc0:	f7ff ff52 	bl	8000b68 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000cc4:	213e      	movs	r1, #62	; 0x3e
 8000cc6:	202b      	movs	r0, #43	; 0x2b
 8000cc8:	f7ff ff4e 	bl	8000b68 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8000ccc:	211e      	movs	r1, #30
 8000cce:	202d      	movs	r0, #45	; 0x2d
 8000cd0:	f7ff ff4a 	bl	8000b68 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	202c      	movs	r0, #44	; 0x2c
 8000cd8:	f7ff ff46 	bl	8000b68 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000cdc:	2140      	movs	r1, #64	; 0x40
 8000cde:	2015      	movs	r0, #21
 8000ce0:	f7ff ff42 	bl	8000b68 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000ce4:	213d      	movs	r1, #61	; 0x3d
 8000ce6:	2011      	movs	r0, #17
 8000ce8:	f7ff ff3e 	bl	8000b68 <Write_MFRC522>

	AntennaOn();
 8000cec:	f7ff ffc5 	bl	8000c7a <AntennaOn>
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020400 	.word	0x40020400

08000cfc <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4603      	mov	r3, r0
 8000d08:	73fb      	strb	r3, [r7, #15]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8000d12:	2300      	movs	r3, #0
 8000d14:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8000d16:	2300      	movs	r3, #0
 8000d18:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2b0c      	cmp	r3, #12
 8000d1e:	d006      	beq.n	8000d2e <MFRC522_ToCard+0x32>
 8000d20:	2b0e      	cmp	r3, #14
 8000d22:	d109      	bne.n	8000d38 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000d24:	2312      	movs	r3, #18
 8000d26:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	777b      	strb	r3, [r7, #29]
			break;
 8000d2c:	e005      	b.n	8000d3a <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000d2e:	2377      	movs	r3, #119	; 0x77
 8000d30:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8000d32:	2330      	movs	r3, #48	; 0x30
 8000d34:	777b      	strb	r3, [r7, #29]
			break;
 8000d36:	e000      	b.n	8000d3a <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000d38:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8000d3a:	7fbb      	ldrb	r3, [r7, #30]
 8000d3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4619      	mov	r1, r3
 8000d44:	2002      	movs	r0, #2
 8000d46:	f7ff ff0f 	bl	8000b68 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8000d4a:	2180      	movs	r1, #128	; 0x80
 8000d4c:	2004      	movs	r0, #4
 8000d4e:	f7ff ff74 	bl	8000c3a <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	200a      	movs	r0, #10
 8000d56:	f7ff ff55 	bl	8000c04 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff ff03 	bl	8000b68 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
 8000d66:	e00a      	b.n	8000d7e <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	2009      	movs	r0, #9
 8000d74:	f7ff fef8 	bl	8000b68 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	61bb      	str	r3, [r7, #24]
 8000d7e:	7bbb      	ldrb	r3, [r7, #14]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d3f0      	bcc.n	8000d68 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff feec 	bl	8000b68 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	2b0c      	cmp	r3, #12
 8000d94:	d103      	bne.n	8000d9e <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8000d96:	2180      	movs	r1, #128	; 0x80
 8000d98:	200d      	movs	r0, #13
 8000d9a:	f7ff ff33 	bl	8000c04 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000d9e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000da2:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000da4:	2004      	movs	r0, #4
 8000da6:	f7ff ff05 	bl	8000bb4 <Read_MFRC522>
 8000daa:	4603      	mov	r3, r0
 8000dac:	773b      	strb	r3, [r7, #28]
        i--;
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00a      	beq.n	8000dd0 <MFRC522_ToCard+0xd4>
 8000dba:	7f3b      	ldrb	r3, [r7, #28]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d105      	bne.n	8000dd0 <MFRC522_ToCard+0xd4>
 8000dc4:	7f3a      	ldrb	r2, [r7, #28]
 8000dc6:	7f7b      	ldrb	r3, [r7, #29]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0e9      	beq.n	8000da4 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	200d      	movs	r0, #13
 8000dd4:	f7ff ff31 	bl	8000c3a <ClearBitMask>

    if (i != 0)
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d052      	beq.n	8000e84 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000dde:	2006      	movs	r0, #6
 8000de0:	f7ff fee8 	bl	8000bb4 <Read_MFRC522>
 8000de4:	4603      	mov	r3, r0
 8000de6:	f003 031b 	and.w	r3, r3, #27
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d148      	bne.n	8000e80 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8000df2:	7f3a      	ldrb	r2, [r7, #28]
 8000df4:	7fbb      	ldrb	r3, [r7, #30]
 8000df6:	4013      	ands	r3, r2
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	2b0c      	cmp	r3, #12
 8000e0a:	d13b      	bne.n	8000e84 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000e0c:	200a      	movs	r0, #10
 8000e0e:	f7ff fed1 	bl	8000bb4 <Read_MFRC522>
 8000e12:	4603      	mov	r3, r0
 8000e14:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000e16:	200c      	movs	r0, #12
 8000e18:	f7ff fecc 	bl	8000bb4 <Read_MFRC522>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d008      	beq.n	8000e3c <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8000e2a:	7f3b      	ldrb	r3, [r7, #28]
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	00da      	lsls	r2, r3, #3
 8000e30:	7dfb      	ldrb	r3, [r7, #23]
 8000e32:	4413      	add	r3, r2
 8000e34:	461a      	mov	r2, r3
 8000e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	e004      	b.n	8000e46 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8000e3c:	7f3b      	ldrb	r3, [r7, #28]
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	461a      	mov	r2, r3
 8000e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e44:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8000e46:	7f3b      	ldrb	r3, [r7, #28]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d101      	bne.n	8000e50 <MFRC522_ToCard+0x154>
                {
					n = 1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8000e50:	7f3b      	ldrb	r3, [r7, #28]
 8000e52:	2b10      	cmp	r3, #16
 8000e54:	d901      	bls.n	8000e5a <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8000e56:	2310      	movs	r3, #16
 8000e58:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
 8000e5e:	e00a      	b.n	8000e76 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	18d4      	adds	r4, r2, r3
 8000e66:	2009      	movs	r0, #9
 8000e68:	f7ff fea4 	bl	8000bb4 <Read_MFRC522>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	3301      	adds	r3, #1
 8000e74:	61bb      	str	r3, [r7, #24]
 8000e76:	7f3b      	ldrb	r3, [r7, #28]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d3f0      	bcc.n	8000e60 <MFRC522_ToCard+0x164>
 8000e7e:	e001      	b.n	8000e84 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8000e80:	2302      	movs	r3, #2
 8000e82:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000e84:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd90      	pop	{r4, r7, pc}

08000e8e <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af02      	add	r7, sp, #8
 8000e94:	4603      	mov	r3, r0
 8000e96:	6039      	str	r1, [r7, #0]
 8000e98:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000e9a:	2107      	movs	r1, #7
 8000e9c:	200d      	movs	r0, #13
 8000e9e:	f7ff fe63 	bl	8000b68 <Write_MFRC522>

	TagType[0] = reqMode;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	79fa      	ldrb	r2, [r7, #7]
 8000ea6:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	6839      	ldr	r1, [r7, #0]
 8000eb4:	200c      	movs	r0, #12
 8000eb6:	f7ff ff21 	bl	8000cfc <MFRC522_ToCard>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <MFRC522_Request+0x3c>
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	2b10      	cmp	r3, #16
 8000ec8:	d001      	beq.n	8000ece <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	200d      	movs	r0, #13
 8000ee8:	f7ff fe3e 	bl	8000b68 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2293      	movs	r2, #147	; 0x93
 8000ef0:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	2220      	movs	r2, #32
 8000ef8:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2202      	movs	r2, #2
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	200c      	movs	r0, #12
 8000f08:	f7ff fef8 	bl	8000cfc <MFRC522_ToCard>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d118      	bne.n	8000f48 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	73bb      	strb	r3, [r7, #14]
 8000f1a:	e009      	b.n	8000f30 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8000f1c:	7bbb      	ldrb	r3, [r7, #14]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	781a      	ldrb	r2, [r3, #0]
 8000f24:	7b7b      	ldrb	r3, [r7, #13]
 8000f26:	4053      	eors	r3, r2
 8000f28:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8000f2a:	7bbb      	ldrb	r3, [r7, #14]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73bb      	strb	r3, [r7, #14]
 8000f30:	7bbb      	ldrb	r3, [r7, #14]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d9f2      	bls.n	8000f1c <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8000f36:	7bbb      	ldrb	r3, [r7, #14]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	7b7a      	ldrb	r2, [r7, #13]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d001      	beq.n	8000f48 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8000f44:	2302      	movs	r3, #2
 8000f46:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <scan_motor_up>:

extern int motor_status;
extern osThreadId motorTaskHandle;
extern osThreadId rfidExecuteTaskHandle;

void scan_motor_up(){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	if(limit_switch_up){
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <scan_motor_up+0x48>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d013      	beq.n	8000f88 <scan_motor_up+0x34>
		TIM1->CCR1 = 0;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <scan_motor_up+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	635a      	str	r2, [r3, #52]	; 0x34
		motor_status = 1;
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <scan_motor_up+0x50>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
		limit_switch_up = 0;
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <scan_motor_up+0x48>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
		vTaskSuspend(rfidExecuteTaskHandle);
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <scan_motor_up+0x54>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f005 fd24 	bl	80069c4 <vTaskSuspend>
		vTaskSuspend(motorTaskHandle);
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <scan_motor_up+0x58>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f005 fd1f 	bl	80069c4 <vTaskSuspend>
	}else{
		change_motor_direction(1);
		TIM1->CCR1 = 400;
	}
}
 8000f86:	e006      	b.n	8000f96 <scan_motor_up+0x42>
		change_motor_direction(1);
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f000 f83f 	bl	800100c <change_motor_direction>
		TIM1->CCR1 = 400;
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <scan_motor_up+0x4c>)
 8000f90:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000f94:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000348 	.word	0x20000348
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	20000084 	.word	0x20000084
 8000fa8:	2000008c 	.word	0x2000008c
 8000fac:	20000098 	.word	0x20000098

08000fb0 <scan_motor_down>:

void scan_motor_down(){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	if(limit_switch_down){
 8000fb4:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <scan_motor_down+0x48>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d013      	beq.n	8000fe4 <scan_motor_down+0x34>
		TIM1->CCR1 = 0;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <scan_motor_down+0x4c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	635a      	str	r2, [r3, #52]	; 0x34
		motor_status = 0;
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <scan_motor_down+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
		limit_switch_down = 0;
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <scan_motor_down+0x48>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
		vTaskSuspend(rfidExecuteTaskHandle);
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <scan_motor_down+0x54>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f005 fcf6 	bl	80069c4 <vTaskSuspend>
		vTaskSuspend(motorTaskHandle);
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <scan_motor_down+0x58>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f005 fcf1 	bl	80069c4 <vTaskSuspend>
	}else{
		change_motor_direction(0);
		TIM1->CCR1 = 400;
	}
}
 8000fe2:	e006      	b.n	8000ff2 <scan_motor_down+0x42>
		change_motor_direction(0);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f000 f811 	bl	800100c <change_motor_direction>
		TIM1->CCR1 = 400;
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <scan_motor_down+0x4c>)
 8000fec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000034c 	.word	0x2000034c
 8000ffc:	40010000 	.word	0x40010000
 8001000:	20000084 	.word	0x20000084
 8001004:	2000008c 	.word	0x2000008c
 8001008:	20000098 	.word	0x20000098

0800100c <change_motor_direction>:

/* 1:반시계 0:시계*/
void change_motor_direction(int direction){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	if(direction == 1){
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d10a      	bne.n	8001030 <change_motor_direction+0x24>
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	2101      	movs	r1, #1
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <change_motor_direction+0x48>)
 8001020:	f001 fd4a 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2102      	movs	r1, #2
 8001028:	480a      	ldr	r0, [pc, #40]	; (8001054 <change_motor_direction+0x48>)
 800102a:	f001 fd45 	bl	8002ab8 <HAL_GPIO_WritePin>
	}else if(direction == 0){
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_SET);
	}
}
 800102e:	e00c      	b.n	800104a <change_motor_direction+0x3e>
	}else if(direction == 0){
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d109      	bne.n	800104a <change_motor_direction+0x3e>
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2101      	movs	r1, #1
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <change_motor_direction+0x48>)
 800103c:	f001 fd3c 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2102      	movs	r1, #2
 8001044:	4803      	ldr	r0, [pc, #12]	; (8001054 <change_motor_direction+0x48>)
 8001046:	f001 fd37 	bl	8002ab8 <HAL_GPIO_WritePin>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40020000 	.word	0x40020000

08001058 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <MX_SPI2_Init+0x64>)
 800105e:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <MX_SPI2_Init+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MX_SPI2_Init+0x64>)
 8001064:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001068:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_SPI2_Init+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <MX_SPI2_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_SPI2_Init+0x64>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_SPI2_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_SPI2_Init+0x64>)
 8001084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001088:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_SPI2_Init+0x64>)
 800108c:	2210      	movs	r2, #16
 800108e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <MX_SPI2_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_SPI2_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <MX_SPI2_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_SPI2_Init+0x64>)
 80010a4:	220a      	movs	r2, #10
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <MX_SPI2_Init+0x64>)
 80010aa:	f002 fba1 	bl	80037f0 <HAL_SPI_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010b4:	f7ff fd3c 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000350 	.word	0x20000350
 80010c0:	40003800 	.word	0x40003800

080010c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a34      	ldr	r2, [pc, #208]	; (80011b4 <HAL_SPI_MspInit+0xf0>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d162      	bne.n	80011ac <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <HAL_SPI_MspInit+0xf4>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	4a32      	ldr	r2, [pc, #200]	; (80011b8 <HAL_SPI_MspInit+0xf4>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
 80010f6:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <HAL_SPI_MspInit+0xf4>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <HAL_SPI_MspInit+0xf4>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a2b      	ldr	r2, [pc, #172]	; (80011b8 <HAL_SPI_MspInit+0xf4>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <HAL_SPI_MspInit+0xf4>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <HAL_SPI_MspInit+0xf4>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a24      	ldr	r2, [pc, #144]	; (80011b8 <HAL_SPI_MspInit+0xf4>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <HAL_SPI_MspInit+0xf4>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800113a:	2302      	movs	r3, #2
 800113c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800114a:	2307      	movs	r3, #7
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	4819      	ldr	r0, [pc, #100]	; (80011bc <HAL_SPI_MspInit+0xf8>)
 8001156:	f001 fb1b 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800115a:	2304      	movs	r3, #4
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800116a:	2305      	movs	r3, #5
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4811      	ldr	r0, [pc, #68]	; (80011bc <HAL_SPI_MspInit+0xf8>)
 8001176:	f001 fb0b 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800117a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800118c:	2305      	movs	r3, #5
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	480a      	ldr	r0, [pc, #40]	; (80011c0 <HAL_SPI_MspInit+0xfc>)
 8001198:	f001 fafa 	bl	8002790 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2105      	movs	r1, #5
 80011a0:	2024      	movs	r0, #36	; 0x24
 80011a2:	f000 fec9 	bl	8001f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80011a6:	2024      	movs	r0, #36	; 0x24
 80011a8:	f000 fee2 	bl	8001f70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	; 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40003800 	.word	0x40003800
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020800 	.word	0x40020800
 80011c0:	40020400 	.word	0x40020400

080011c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_MspInit+0x54>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a11      	ldr	r2, [pc, #68]	; (8001218 <HAL_MspInit+0x54>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_MspInit+0x54>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_MspInit+0x54>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <HAL_MspInit+0x54>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_MspInit+0x54>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	210f      	movs	r1, #15
 8001206:	f06f 0001 	mvn.w	r0, #1
 800120a:	f000 fe95 	bl	8001f38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800

0800121c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08e      	sub	sp, #56	; 0x38
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	4b33      	ldr	r3, [pc, #204]	; (8001300 <HAL_InitTick+0xe4>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	4a32      	ldr	r2, [pc, #200]	; (8001300 <HAL_InitTick+0xe4>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6413      	str	r3, [r2, #64]	; 0x40
 800123c:	4b30      	ldr	r3, [pc, #192]	; (8001300 <HAL_InitTick+0xe4>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001248:	f107 0210 	add.w	r2, r7, #16
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4611      	mov	r1, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f001 fdcc 	bl	8002df0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800125c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125e:	2b00      	cmp	r3, #0
 8001260:	d103      	bne.n	800126a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001262:	f001 fd9d 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 8001266:	6378      	str	r0, [r7, #52]	; 0x34
 8001268:	e004      	b.n	8001274 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800126a:	f001 fd99 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 800126e:	4603      	mov	r3, r0
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001276:	4a23      	ldr	r2, [pc, #140]	; (8001304 <HAL_InitTick+0xe8>)
 8001278:	fba2 2303 	umull	r2, r3, r2, r3
 800127c:	0c9b      	lsrs	r3, r3, #18
 800127e:	3b01      	subs	r3, #1
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <HAL_InitTick+0xec>)
 8001284:	4a21      	ldr	r2, [pc, #132]	; (800130c <HAL_InitTick+0xf0>)
 8001286:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001288:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <HAL_InitTick+0xec>)
 800128a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800128e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001290:	4a1d      	ldr	r2, [pc, #116]	; (8001308 <HAL_InitTick+0xec>)
 8001292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001294:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <HAL_InitTick+0xec>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HAL_InitTick+0xec>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_InitTick+0xec>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80012a8:	4817      	ldr	r0, [pc, #92]	; (8001308 <HAL_InitTick+0xec>)
 80012aa:	f002 fec9 	bl	8004040 <HAL_TIM_Base_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80012b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d11b      	bne.n	80012f4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80012bc:	4812      	ldr	r0, [pc, #72]	; (8001308 <HAL_InitTick+0xec>)
 80012be:	f002 ff19 	bl	80040f4 <HAL_TIM_Base_Start_IT>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d111      	bne.n	80012f4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012d0:	201e      	movs	r0, #30
 80012d2:	f000 fe4d 	bl	8001f70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d808      	bhi.n	80012ee <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80012dc:	2200      	movs	r2, #0
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	201e      	movs	r0, #30
 80012e2:	f000 fe29 	bl	8001f38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_InitTick+0xf4>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	e002      	b.n	80012f4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3738      	adds	r7, #56	; 0x38
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	431bde83 	.word	0x431bde83
 8001308:	200003a8 	.word	0x200003a8
 800130c:	40000800 	.word	0x40000800
 8001310:	2000000c 	.word	0x2000000c

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001318:	e7fe      	b.n	8001318 <NMI_Handler+0x4>

0800131a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <HardFault_Handler+0x4>

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <MemManage_Handler+0x4>

08001326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <BusFault_Handler+0x4>

0800132c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <UsageFault_Handler+0x4>

08001332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_switch_up_Pin);
 8001344:	2010      	movs	r0, #16
 8001346:	f001 fbd1 	bl	8002aec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <DMA1_Stream5_IRQHandler+0x10>)
 8001356:	f000 ffb1 	bl	80022bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000c5c 	.word	0x20000c5c

08001364 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_switch_down_Pin);
 8001368:	2020      	movs	r0, #32
 800136a:	f001 fbbf 	bl	8002aec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001378:	4802      	ldr	r0, [pc, #8]	; (8001384 <TIM4_IRQHandler+0x10>)
 800137a:	f003 f843 	bl	8004404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200003a8 	.word	0x200003a8

08001388 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <SPI2_IRQHandler+0x10>)
 800138e:	f002 fc69 	bl	8003c64 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000350 	.word	0x20000350

0800139c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <USART1_IRQHandler+0x10>)
 80013a2:	f003 fe6d 	bl	8005080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000b24 	.word	0x20000b24

080013b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <USART3_IRQHandler+0x10>)
 80013b6:	f003 fe63 	bl	8005080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000bb4 	.word	0x20000bb4

080013c4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <DMA2_Stream5_IRQHandler+0x10>)
 80013ca:	f000 ff77 	bl	80022bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000bfc 	.word	0x20000bfc

080013d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b092      	sub	sp, #72	; 0x48
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001402:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
 800141c:	615a      	str	r2, [r3, #20]
 800141e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2220      	movs	r2, #32
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f006 fd98 	bl	8007f5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800142c:	4b33      	ldr	r3, [pc, #204]	; (80014fc <MX_TIM1_Init+0x100>)
 800142e:	4a34      	ldr	r2, [pc, #208]	; (8001500 <MX_TIM1_Init+0x104>)
 8001430:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8001432:	4b32      	ldr	r3, [pc, #200]	; (80014fc <MX_TIM1_Init+0x100>)
 8001434:	22b3      	movs	r2, #179	; 0xb3
 8001436:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b30      	ldr	r3, [pc, #192]	; (80014fc <MX_TIM1_Init+0x100>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800143e:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <MX_TIM1_Init+0x100>)
 8001440:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001444:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <MX_TIM1_Init+0x100>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <MX_TIM1_Init+0x100>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001452:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <MX_TIM1_Init+0x100>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001458:	4828      	ldr	r0, [pc, #160]	; (80014fc <MX_TIM1_Init+0x100>)
 800145a:	f002 febb 	bl	80041d4 <HAL_TIM_PWM_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001464:	f7ff fb64 	bl	8000b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001470:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001474:	4619      	mov	r1, r3
 8001476:	4821      	ldr	r0, [pc, #132]	; (80014fc <MX_TIM1_Init+0x100>)
 8001478:	f003 fc20 	bl	8004cbc <HAL_TIMEx_MasterConfigSynchronization>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001482:	f7ff fb55 	bl	8000b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001486:	2360      	movs	r3, #96	; 0x60
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001492:	2300      	movs	r3, #0
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	2200      	movs	r2, #0
 80014a8:	4619      	mov	r1, r3
 80014aa:	4814      	ldr	r0, [pc, #80]	; (80014fc <MX_TIM1_Init+0x100>)
 80014ac:	f003 f89a 	bl	80045e4 <HAL_TIM_PWM_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80014b6:	f7ff fb3b 	bl	8000b30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	4807      	ldr	r0, [pc, #28]	; (80014fc <MX_TIM1_Init+0x100>)
 80014de:	f003 fc69 	bl	8004db4 <HAL_TIMEx_ConfigBreakDeadTime>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80014e8:	f7ff fb22 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014ec:	4803      	ldr	r0, [pc, #12]	; (80014fc <MX_TIM1_Init+0x100>)
 80014ee:	f000 f82b 	bl	8001548 <HAL_TIM_MspPostInit>

}
 80014f2:	bf00      	nop
 80014f4:	3748      	adds	r7, #72	; 0x48
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200003f0 	.word	0x200003f0
 8001500:	40010000 	.word	0x40010000

08001504 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <HAL_TIM_PWM_MspInit+0x3c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d10d      	bne.n	8001532 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_TIM_PWM_MspInit+0x40>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	4a09      	ldr	r2, [pc, #36]	; (8001544 <HAL_TIM_PWM_MspInit+0x40>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6453      	str	r3, [r2, #68]	; 0x44
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <HAL_TIM_PWM_MspInit+0x40>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40010000 	.word	0x40010000
 8001544:	40023800 	.word	0x40023800

08001548 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <HAL_TIM_MspPostInit+0x68>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d11e      	bne.n	80015a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_TIM_MspPostInit+0x6c>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a10      	ldr	r2, [pc, #64]	; (80015b4 <HAL_TIM_MspPostInit+0x6c>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <HAL_TIM_MspPostInit+0x6c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Motor_pwm_Pin;
 8001586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800158a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001598:	2301      	movs	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Motor_pwm_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	4619      	mov	r1, r3
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <HAL_TIM_MspPostInit+0x70>)
 80015a4:	f001 f8f4 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	3720      	adds	r7, #32
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40010000 	.word	0x40010000
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000

080015bc <uart_init>:
extern osThreadId rfidExecuteTaskHandle;

queue8_t uart_queue;
queue8_t uart2_queue;

void uart_init(){
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, uart_queue.buf, QUEUE_BUF_MAX) ;
 80015c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c4:	4906      	ldr	r1, [pc, #24]	; (80015e0 <uart_init+0x24>)
 80015c6:	4807      	ldr	r0, [pc, #28]	; (80015e4 <uart_init+0x28>)
 80015c8:	f003 fd35 	bl	8005036 <HAL_UART_Receive_DMA>
	uart_queue.q_in_index = 0;
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <uart_init+0x24>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	uart_queue.q_out_index = 0;
 80015d4:	4b02      	ldr	r3, [pc, #8]	; (80015e0 <uart_init+0x24>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000438 	.word	0x20000438
 80015e4:	20000b24 	.word	0x20000b24

080015e8 <uart_available>:

uint32_t uart_available(void){
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
	uart_queue.q_in_index = (QUEUE_BUF_MAX - huart1.hdmarx->Instance->NDTR) % QUEUE_BUF_MAX; //원형 큐
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <uart_available+0x50>)
 80015f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001600:	b29b      	uxth	r3, r3
 8001602:	b2db      	uxtb	r3, r3
 8001604:	b29a      	uxth	r2, r3
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <uart_available+0x54>)
 8001608:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
//	hdmarx->Instance->CNDTR
	ret = (QUEUE_BUF_MAX + uart_queue.q_in_index - uart_queue.q_out_index) % QUEUE_BUF_MAX; // 버퍼 데이터 개수
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <uart_available+0x54>)
 800160e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8001612:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <uart_available+0x54>)
 8001618:	f8b2 2102 	ldrh.w	r2, [r2, #258]	; 0x102
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	425a      	negs	r2, r3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	bf58      	it	pl
 8001626:	4253      	negpl	r3, r2
 8001628:	607b      	str	r3, [r7, #4]

	return ret;
 800162a:	687b      	ldr	r3, [r7, #4]
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	20000b24 	.word	0x20000b24
 800163c:	20000438 	.word	0x20000438

08001640 <uart_q8_read>:

uint8_t uart_q8_read(void){
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
	uint8_t ret =0;
 8001646:	2300      	movs	r3, #0
 8001648:	71fb      	strb	r3, [r7, #7]
	if(uart_queue.q_out_index != uart_queue.q_in_index){
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <uart_q8_read+0x50>)
 800164c:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <uart_q8_read+0x50>)
 8001652:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8001656:	429a      	cmp	r2, r3
 8001658:	d013      	beq.n	8001682 <uart_q8_read+0x42>
		ret = uart_queue.buf[uart_queue.q_out_index];
 800165a:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <uart_q8_read+0x50>)
 800165c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8001660:	461a      	mov	r2, r3
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <uart_q8_read+0x50>)
 8001664:	5c9b      	ldrb	r3, [r3, r2]
 8001666:	71fb      	strb	r3, [r7, #7]
		uart_queue.q_out_index = (uart_queue.q_out_index +1) % QUEUE_BUF_MAX;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <uart_q8_read+0x50>)
 800166a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800166e:	3301      	adds	r3, #1
 8001670:	425a      	negs	r2, r3
 8001672:	b2db      	uxtb	r3, r3
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	bf58      	it	pl
 8001678:	4253      	negpl	r3, r2
 800167a:	b29a      	uxth	r2, r3
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <uart_q8_read+0x50>)
 800167e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	}

	return ret;
 8001682:	79fb      	ldrb	r3, [r7, #7]
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	20000438 	.word	0x20000438

08001694 <read_rfid_number>:

uint8_t rfid_number[READ_BOOK_MAX_SIZE][12] = {0,}; //파싱한 rfid 번호 저장
uint8_t recive_data[24] = {0,}; //RFID 태그 한개에서 receive 한 data 저장
uint8_t book_num = 0;  //책 순서
uint8_t book_byte_num = 0; //책 태그의 바이트 순서
void read_rfid_number(){
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
	uint8_t i;
	if(uart_available()){ // 데이터 있으면
 800169a:	f7ff ffa5 	bl	80015e8 <uart_available>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d042      	beq.n	800172a <read_rfid_number+0x96>
		uint8_t read_byte =  uart_q8_read(); // 버퍼에서 1byte 읽고
 80016a4:	f7ff ffcc 	bl	8001640 <uart_q8_read>
 80016a8:	4603      	mov	r3, r0
 80016aa:	71bb      	strb	r3, [r7, #6]
		recive_data[book_byte_num++] = read_byte;
 80016ac:	4b21      	ldr	r3, [pc, #132]	; (8001734 <read_rfid_number+0xa0>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	b2d1      	uxtb	r1, r2
 80016b4:	4a1f      	ldr	r2, [pc, #124]	; (8001734 <read_rfid_number+0xa0>)
 80016b6:	7011      	strb	r1, [r2, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <read_rfid_number+0xa4>)
 80016bc:	79bb      	ldrb	r3, [r7, #6]
 80016be:	5453      	strb	r3, [r2, r1]
		if(read_byte == 0x7E) { // 마지막 데이터이면
 80016c0:	79bb      	ldrb	r3, [r7, #6]
 80016c2:	2b7e      	cmp	r3, #126	; 0x7e
 80016c4:	d126      	bne.n	8001714 <read_rfid_number+0x80>
			if(recive_data[1] != 0x01){ //인식이 된 경우 8~19 12byte rfid number
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <read_rfid_number+0xa4>)
 80016c8:	785b      	ldrb	r3, [r3, #1]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d01f      	beq.n	800170e <read_rfid_number+0x7a>
				for( i=8; i<=19; i ++)
 80016ce:	2308      	movs	r3, #8
 80016d0:	71fb      	strb	r3, [r7, #7]
 80016d2:	e013      	b.n	80016fc <read_rfid_number+0x68>
					rfid_number[book_num][i-8] = recive_data[i];
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	4a19      	ldr	r2, [pc, #100]	; (800173c <read_rfid_number+0xa8>)
 80016d8:	7812      	ldrb	r2, [r2, #0]
 80016da:	4610      	mov	r0, r2
 80016dc:	79fa      	ldrb	r2, [r7, #7]
 80016de:	3a08      	subs	r2, #8
 80016e0:	4915      	ldr	r1, [pc, #84]	; (8001738 <read_rfid_number+0xa4>)
 80016e2:	5ccc      	ldrb	r4, [r1, r3]
 80016e4:	4916      	ldr	r1, [pc, #88]	; (8001740 <read_rfid_number+0xac>)
 80016e6:	4603      	mov	r3, r0
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4403      	add	r3, r0
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	4413      	add	r3, r2
 80016f2:	4622      	mov	r2, r4
 80016f4:	701a      	strb	r2, [r3, #0]
				for( i=8; i<=19; i ++)
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	3301      	adds	r3, #1
 80016fa:	71fb      	strb	r3, [r7, #7]
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b13      	cmp	r3, #19
 8001700:	d9e8      	bls.n	80016d4 <read_rfid_number+0x40>
				book_num ++;
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <read_rfid_number+0xa8>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <read_rfid_number+0xa8>)
 800170c:	701a      	strb	r2, [r3, #0]
			}
			book_byte_num = 0;
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <read_rfid_number+0xa0>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
		}
		if(!uart_available()){ //다 읽었으면
 8001714:	f7ff ff68 	bl	80015e8 <uart_available>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d105      	bne.n	800172a <read_rfid_number+0x96>
			osSignalSet(tagNumTransmitTHandle, transmitSignal); //전송 이벤트 생성
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <read_rfid_number+0xb0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2101      	movs	r1, #1
 8001724:	4618      	mov	r0, r3
 8001726:	f004 fe2f 	bl	8006388 <osSignalSet>
			//vTaskSuspend(defaultTaskHandle);
			}
		}
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bd90      	pop	{r4, r7, pc}
 8001732:	bf00      	nop
 8001734:	20000b09 	.word	0x20000b09
 8001738:	20000af0 	.word	0x20000af0
 800173c:	20000b08 	.word	0x20000b08
 8001740:	20000640 	.word	0x20000640
 8001744:	20000090 	.word	0x20000090

08001748 <transmitData>:

void transmitData(){
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
	int i=0;
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
	while(rfid_number[i][0] != 0){
 8001752:	e01c      	b.n	800178e <transmitData+0x46>
		//computer
		HAL_UART_Transmit(&huart2, rfid_number[i], sizeof(rfid_number[i]), 500);
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4a17      	ldr	r2, [pc, #92]	; (80017bc <transmitData+0x74>)
 8001760:	1899      	adds	r1, r3, r2
 8001762:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001766:	220c      	movs	r2, #12
 8001768:	4815      	ldr	r0, [pc, #84]	; (80017c0 <transmitData+0x78>)
 800176a:	f003 fbd9 	bl	8004f20 <HAL_UART_Transmit>
		//esp32
		HAL_UART_Transmit(&huart3, rfid_number[i], sizeof(rfid_number[i]), 500);
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4a10      	ldr	r2, [pc, #64]	; (80017bc <transmitData+0x74>)
 800177a:	1899      	adds	r1, r3, r2
 800177c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001780:	220c      	movs	r2, #12
 8001782:	4810      	ldr	r0, [pc, #64]	; (80017c4 <transmitData+0x7c>)
 8001784:	f003 fbcc 	bl	8004f20 <HAL_UART_Transmit>
		i++;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3301      	adds	r3, #1
 800178c:	607b      	str	r3, [r7, #4]
	while(rfid_number[i][0] != 0){
 800178e:	490b      	ldr	r1, [pc, #44]	; (80017bc <transmitData+0x74>)
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1d8      	bne.n	8001754 <transmitData+0xc>
		}
	memset(rfid_number,0,sizeof(rfid_number));
 80017a2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80017a6:	2100      	movs	r1, #0
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <transmitData+0x74>)
 80017aa:	f006 fbd7 	bl	8007f5c <memset>
	book_num =0;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <transmitData+0x80>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]

}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000640 	.word	0x20000640
 80017c0:	20000b6c 	.word	0x20000b6c
 80017c4:	20000bb4 	.word	0x20000bb4
 80017c8:	20000b08 	.word	0x20000b08

080017cc <uart2_init>:
//	}
//}

//------------------------------------------------------

void uart2_init(){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, uart2_queue.buf, QUEUE_BUF_MAX);
 80017d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d4:	4906      	ldr	r1, [pc, #24]	; (80017f0 <uart2_init+0x24>)
 80017d6:	4807      	ldr	r0, [pc, #28]	; (80017f4 <uart2_init+0x28>)
 80017d8:	f003 fc2d 	bl	8005036 <HAL_UART_Receive_DMA>
	uart2_queue.q_in_index = 0;
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <uart2_init+0x24>)
 80017de:	2200      	movs	r2, #0
 80017e0:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	uart2_queue.q_out_index = 0;
 80017e4:	4b02      	ldr	r3, [pc, #8]	; (80017f0 <uart2_init+0x24>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	2000053c 	.word	0x2000053c
 80017f4:	20000b6c 	.word	0x20000b6c

080017f8 <uart2_available>:



uint32_t uart2_available(void){
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
	uart2_queue.q_in_index = (QUEUE_BUF_MAX - huart2.hdmarx->Instance->NDTR) % QUEUE_BUF_MAX; //원형 큐
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <uart2_available+0x50>)
 8001804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	b29b      	uxth	r3, r3
 800180c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001810:	b29b      	uxth	r3, r3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	b29a      	uxth	r2, r3
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <uart2_available+0x54>)
 8001818:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	ret = (QUEUE_BUF_MAX + uart2_queue.q_in_index - uart2_queue.q_out_index) % QUEUE_BUF_MAX; // 버퍼 데이터 개수
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <uart2_available+0x54>)
 800181e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8001822:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001826:	4a09      	ldr	r2, [pc, #36]	; (800184c <uart2_available+0x54>)
 8001828:	f8b2 2102 	ldrh.w	r2, [r2, #258]	; 0x102
 800182c:	1a9b      	subs	r3, r3, r2
 800182e:	425a      	negs	r2, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	bf58      	it	pl
 8001836:	4253      	negpl	r3, r2
 8001838:	607b      	str	r3, [r7, #4]

	return ret;
 800183a:	687b      	ldr	r3, [r7, #4]
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	20000b6c 	.word	0x20000b6c
 800184c:	2000053c 	.word	0x2000053c

08001850 <uart2_q8_read>:


uint8_t uart2_q8_read(void){
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
	uint8_t ret =0;
 8001856:	2300      	movs	r3, #0
 8001858:	71fb      	strb	r3, [r7, #7]
	if(uart2_queue.q_out_index != uart2_queue.q_in_index){
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <uart2_q8_read+0x50>)
 800185c:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <uart2_q8_read+0x50>)
 8001862:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8001866:	429a      	cmp	r2, r3
 8001868:	d013      	beq.n	8001892 <uart2_q8_read+0x42>
		ret = uart2_queue.buf[uart2_queue.q_out_index];
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <uart2_q8_read+0x50>)
 800186c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8001870:	461a      	mov	r2, r3
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <uart2_q8_read+0x50>)
 8001874:	5c9b      	ldrb	r3, [r3, r2]
 8001876:	71fb      	strb	r3, [r7, #7]
		uart2_queue.q_out_index = (uart2_queue.q_out_index +1) % QUEUE_BUF_MAX;
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <uart2_q8_read+0x50>)
 800187a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800187e:	3301      	adds	r3, #1
 8001880:	425a      	negs	r2, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	bf58      	it	pl
 8001888:	4253      	negpl	r3, r2
 800188a:	b29a      	uxth	r2, r3
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <uart2_q8_read+0x50>)
 800188e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	}

	return ret;
 8001892:	79fb      	ldrb	r3, [r7, #7]
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	2000053c 	.word	0x2000053c

080018a4 <read_command>:

uint8_t scan_command[20] = {0,}; //파싱한 rfid 번호 저장
uint8_t command_byte_num = 0; //책 태그의 바이트 순서
void read_command(){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
	if(uart2_available()){ // 데이터 있으면
 80018aa:	f7ff ffa5 	bl	80017f8 <uart2_available>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d01e      	beq.n	80018f2 <read_command+0x4e>
		uint8_t read_byte =  uart2_q8_read(); // 버퍼에서 1byte 읽고
 80018b4:	f7ff ffcc 	bl	8001850 <uart2_q8_read>
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
		scan_command[command_byte_num++] = read_byte;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <read_command+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	b2d1      	uxtb	r1, r2
 80018c4:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <read_command+0x58>)
 80018c6:	7011      	strb	r1, [r2, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <read_command+0x5c>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	5453      	strb	r3, [r2, r1]
		if(read_byte == 0x0A) { // 마지막 데이터이면
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	2b0a      	cmp	r3, #10
 80018d4:	d102      	bne.n	80018dc <read_command+0x38>
			command_byte_num = 0;
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <read_command+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
		}
		if(!uart2_available()){ //다 읽었으면
 80018dc:	f7ff ff8c 	bl	80017f8 <uart2_available>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d105      	bne.n	80018f2 <read_command+0x4e>
			osSignalSet(transmitTask2Handle, transmitSignal2); //전송 이벤트 생성
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <read_command+0x60>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2102      	movs	r1, #2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f004 fd4b 	bl	8006388 <osSignalSet>
		}
	}
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000b20 	.word	0x20000b20
 8001900:	20000b0c 	.word	0x20000b0c
 8001904:	2000009c 	.word	0x2000009c

08001908 <transmitCommand>:

char motor_command1[] = "scan\n";
char motor_command2[] = "stop\n";

void transmitCommand(){
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
//	int i=0;
//	while(scan_command[i] != 10){
//		HAL_UART_Transmit(&huart2, scan_command[i], sizeof(scan_command[i]), 1);
//		i++;
//	}
	if(!(strchr(scan_command,motor_command1))){
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <transmitCommand+0x44>)
 800190e:	4619      	mov	r1, r3
 8001910:	480f      	ldr	r0, [pc, #60]	; (8001950 <transmitCommand+0x48>)
 8001912:	f006 fb2b 	bl	8007f6c <strchr>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10f      	bne.n	800193c <transmitCommand+0x34>
		HAL_UART_Transmit(&huart2, "ok\r\n", sizeof("ok\r\n"), 1);
 800191c:	2301      	movs	r3, #1
 800191e:	2205      	movs	r2, #5
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <transmitCommand+0x4c>)
 8001922:	480d      	ldr	r0, [pc, #52]	; (8001958 <transmitCommand+0x50>)
 8001924:	f003 fafc 	bl	8004f20 <HAL_UART_Transmit>
		vTaskResume(motorTaskHandle);
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <transmitCommand+0x54>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f005 f90d 	bl	8006b4c <vTaskResume>
		vTaskResume(rfidExecuteTaskHandle);
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <transmitCommand+0x58>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f005 f908 	bl	8006b4c <vTaskResume>
	}
//	}else if(!(strchr(scan_command,motor_command2))){
//		HAL_UART_Transmit(&huart2, "ok\r\n", sizeof("ok\r\n"), 1);
//		vTaskSuspend(rfidExecuteHandle);
//	}
	memset(scan_command,0,sizeof(scan_command));
 800193c:	2214      	movs	r2, #20
 800193e:	2100      	movs	r1, #0
 8001940:	4803      	ldr	r0, [pc, #12]	; (8001950 <transmitCommand+0x48>)
 8001942:	f006 fb0b 	bl	8007f5c <memset>
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000004 	.word	0x20000004
 8001950:	20000b0c 	.word	0x20000b0c
 8001954:	0800824c 	.word	0x0800824c
 8001958:	20000b6c 	.word	0x20000b6c
 800195c:	20000098 	.word	0x20000098
 8001960:	2000008c 	.word	0x2000008c

08001964 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_USART1_UART_Init+0x4c>)
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <MX_USART1_UART_Init+0x50>)
 800196c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001974:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_USART1_UART_Init+0x4c>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_USART1_UART_Init+0x4c>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_USART1_UART_Init+0x4c>)
 800199c:	f003 fa70 	bl	8004e80 <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019a6:	f7ff f8c3 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000b24 	.word	0x20000b24
 80019b4:	40011000 	.word	0x40011000

080019b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019be:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <MX_USART2_UART_Init+0x50>)
 80019c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019de:	220c      	movs	r2, #12
 80019e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019f0:	f003 fa46 	bl	8004e80 <HAL_UART_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019fa:	f7ff f899 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000b6c 	.word	0x20000b6c
 8001a08:	40004400 	.word	0x40004400

08001a0c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_USART3_UART_Init+0x4c>)
 8001a12:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <MX_USART3_UART_Init+0x50>)
 8001a14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <MX_USART3_UART_Init+0x4c>)
 8001a18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_USART3_UART_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_USART3_UART_Init+0x4c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <MX_USART3_UART_Init+0x4c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_USART3_UART_Init+0x4c>)
 8001a32:	220c      	movs	r2, #12
 8001a34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <MX_USART3_UART_Init+0x4c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <MX_USART3_UART_Init+0x4c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_USART3_UART_Init+0x4c>)
 8001a44:	f003 fa1c 	bl	8004e80 <HAL_UART_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a4e:	f7ff f86f 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000bb4 	.word	0x20000bb4
 8001a5c:	40004800 	.word	0x40004800

08001a60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08e      	sub	sp, #56	; 0x38
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a91      	ldr	r2, [pc, #580]	; (8001cc4 <HAL_UART_MspInit+0x264>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d164      	bne.n	8001b4c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
 8001a86:	4b90      	ldr	r3, [pc, #576]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	4a8f      	ldr	r2, [pc, #572]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001a8c:	f043 0310 	orr.w	r3, r3, #16
 8001a90:	6453      	str	r3, [r2, #68]	; 0x44
 8001a92:	4b8d      	ldr	r3, [pc, #564]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	623b      	str	r3, [r7, #32]
 8001a9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	4b89      	ldr	r3, [pc, #548]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a88      	ldr	r2, [pc, #544]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b86      	ldr	r3, [pc, #536]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	61fb      	str	r3, [r7, #28]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UHF01_TX_Pin|UHF01_RX_Pin;
 8001aba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001acc:	2307      	movs	r3, #7
 8001ace:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	487d      	ldr	r0, [pc, #500]	; (8001ccc <HAL_UART_MspInit+0x26c>)
 8001ad8:	f000 fe5a 	bl	8002790 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8001adc:	4b7c      	ldr	r3, [pc, #496]	; (8001cd0 <HAL_UART_MspInit+0x270>)
 8001ade:	4a7d      	ldr	r2, [pc, #500]	; (8001cd4 <HAL_UART_MspInit+0x274>)
 8001ae0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001ae2:	4b7b      	ldr	r3, [pc, #492]	; (8001cd0 <HAL_UART_MspInit+0x270>)
 8001ae4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ae8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aea:	4b79      	ldr	r3, [pc, #484]	; (8001cd0 <HAL_UART_MspInit+0x270>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af0:	4b77      	ldr	r3, [pc, #476]	; (8001cd0 <HAL_UART_MspInit+0x270>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001af6:	4b76      	ldr	r3, [pc, #472]	; (8001cd0 <HAL_UART_MspInit+0x270>)
 8001af8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001afc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001afe:	4b74      	ldr	r3, [pc, #464]	; (8001cd0 <HAL_UART_MspInit+0x270>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b04:	4b72      	ldr	r3, [pc, #456]	; (8001cd0 <HAL_UART_MspInit+0x270>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001b0a:	4b71      	ldr	r3, [pc, #452]	; (8001cd0 <HAL_UART_MspInit+0x270>)
 8001b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b10:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b12:	4b6f      	ldr	r3, [pc, #444]	; (8001cd0 <HAL_UART_MspInit+0x270>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b18:	4b6d      	ldr	r3, [pc, #436]	; (8001cd0 <HAL_UART_MspInit+0x270>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b1e:	486c      	ldr	r0, [pc, #432]	; (8001cd0 <HAL_UART_MspInit+0x270>)
 8001b20:	f000 fa34 	bl	8001f8c <HAL_DMA_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001b2a:	f7ff f801 	bl	8000b30 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a67      	ldr	r2, [pc, #412]	; (8001cd0 <HAL_UART_MspInit+0x270>)
 8001b32:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b34:	4a66      	ldr	r2, [pc, #408]	; (8001cd0 <HAL_UART_MspInit+0x270>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2105      	movs	r1, #5
 8001b3e:	2025      	movs	r0, #37	; 0x25
 8001b40:	f000 f9fa 	bl	8001f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b44:	2025      	movs	r0, #37	; 0x25
 8001b46:	f000 fa13 	bl	8001f70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b4a:	e0b7      	b.n	8001cbc <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a61      	ldr	r2, [pc, #388]	; (8001cd8 <HAL_UART_MspInit+0x278>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d15a      	bne.n	8001c0c <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	4b5b      	ldr	r3, [pc, #364]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a5a      	ldr	r2, [pc, #360]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b58      	ldr	r3, [pc, #352]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	4b54      	ldr	r3, [pc, #336]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a53      	ldr	r2, [pc, #332]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b51      	ldr	r3, [pc, #324]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = com_TX_Pin|com_RX_Pin;
 8001b8e:	230c      	movs	r3, #12
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4848      	ldr	r0, [pc, #288]	; (8001ccc <HAL_UART_MspInit+0x26c>)
 8001baa:	f000 fdf1 	bl	8002790 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001bae:	4b4b      	ldr	r3, [pc, #300]	; (8001cdc <HAL_UART_MspInit+0x27c>)
 8001bb0:	4a4b      	ldr	r2, [pc, #300]	; (8001ce0 <HAL_UART_MspInit+0x280>)
 8001bb2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001bb4:	4b49      	ldr	r3, [pc, #292]	; (8001cdc <HAL_UART_MspInit+0x27c>)
 8001bb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bba:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bbc:	4b47      	ldr	r3, [pc, #284]	; (8001cdc <HAL_UART_MspInit+0x27c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc2:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <HAL_UART_MspInit+0x27c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc8:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <HAL_UART_MspInit+0x27c>)
 8001bca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bce:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bd0:	4b42      	ldr	r3, [pc, #264]	; (8001cdc <HAL_UART_MspInit+0x27c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd6:	4b41      	ldr	r3, [pc, #260]	; (8001cdc <HAL_UART_MspInit+0x27c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001bdc:	4b3f      	ldr	r3, [pc, #252]	; (8001cdc <HAL_UART_MspInit+0x27c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001be2:	4b3e      	ldr	r3, [pc, #248]	; (8001cdc <HAL_UART_MspInit+0x27c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001be8:	4b3c      	ldr	r3, [pc, #240]	; (8001cdc <HAL_UART_MspInit+0x27c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001bee:	483b      	ldr	r0, [pc, #236]	; (8001cdc <HAL_UART_MspInit+0x27c>)
 8001bf0:	f000 f9cc 	bl	8001f8c <HAL_DMA_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001bfa:	f7fe ff99 	bl	8000b30 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a36      	ldr	r2, [pc, #216]	; (8001cdc <HAL_UART_MspInit+0x27c>)
 8001c02:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c04:	4a35      	ldr	r2, [pc, #212]	; (8001cdc <HAL_UART_MspInit+0x27c>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001c0a:	e057      	b.n	8001cbc <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART3)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a34      	ldr	r2, [pc, #208]	; (8001ce4 <HAL_UART_MspInit+0x284>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d152      	bne.n	8001cbc <HAL_UART_MspInit+0x25c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a2a      	ldr	r2, [pc, #168]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a23      	ldr	r2, [pc, #140]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_UART_MspInit+0x268>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = esp32_RX_Pin;
 8001c6a:	2320      	movs	r3, #32
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(esp32_RX_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c82:	4619      	mov	r1, r3
 8001c84:	4818      	ldr	r0, [pc, #96]	; (8001ce8 <HAL_UART_MspInit+0x288>)
 8001c86:	f000 fd83 	bl	8002790 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = esp32_TX_Pin;
 8001c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c9c:	2307      	movs	r3, #7
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(esp32_TX_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4811      	ldr	r0, [pc, #68]	; (8001cec <HAL_UART_MspInit+0x28c>)
 8001ca8:	f000 fd72 	bl	8002790 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2105      	movs	r1, #5
 8001cb0:	2027      	movs	r0, #39	; 0x27
 8001cb2:	f000 f941 	bl	8001f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cb6:	2027      	movs	r0, #39	; 0x27
 8001cb8:	f000 f95a 	bl	8001f70 <HAL_NVIC_EnableIRQ>
}
 8001cbc:	bf00      	nop
 8001cbe:	3738      	adds	r7, #56	; 0x38
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40011000 	.word	0x40011000
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	20000bfc 	.word	0x20000bfc
 8001cd4:	40026488 	.word	0x40026488
 8001cd8:	40004400 	.word	0x40004400
 8001cdc:	20000c5c 	.word	0x20000c5c
 8001ce0:	40026088 	.word	0x40026088
 8001ce4:	40004800 	.word	0x40004800
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020400 	.word	0x40020400

08001cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cf4:	f7ff fb70 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cf8:	480c      	ldr	r0, [pc, #48]	; (8001d2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cfa:	490d      	ldr	r1, [pc, #52]	; (8001d30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	; (8001d34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d00:	e002      	b.n	8001d08 <LoopCopyDataInit>

08001d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d06:	3304      	adds	r3, #4

08001d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d0c:	d3f9      	bcc.n	8001d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d10:	4c0a      	ldr	r4, [pc, #40]	; (8001d3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d14:	e001      	b.n	8001d1a <LoopFillZerobss>

08001d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d18:	3204      	adds	r2, #4

08001d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d1c:	d3fb      	bcc.n	8001d16 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d1e:	f006 f989 	bl	8008034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d22:	f7fe fe4f 	bl	80009c4 <main>
  bx  lr    
 8001d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d30:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d34:	0800828c 	.word	0x0800828c
  ldr r2, =_sbss
 8001d38:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d3c:	20004b54 	.word	0x20004b54

08001d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d40:	e7fe      	b.n	8001d40 <ADC_IRQHandler>
	...

08001d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_Init+0x40>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0d      	ldr	r2, [pc, #52]	; (8001d84 <HAL_Init+0x40>)
 8001d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_Init+0x40>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_Init+0x40>)
 8001d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_Init+0x40>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a07      	ldr	r2, [pc, #28]	; (8001d84 <HAL_Init+0x40>)
 8001d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d6c:	2003      	movs	r0, #3
 8001d6e:	f000 f8d8 	bl	8001f22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d72:	200f      	movs	r0, #15
 8001d74:	f7ff fa52 	bl	800121c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d78:	f7ff fa24 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023c00 	.word	0x40023c00

08001d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_IncTick+0x20>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_IncTick+0x24>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	4a04      	ldr	r2, [pc, #16]	; (8001dac <HAL_IncTick+0x24>)
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000010 	.word	0x20000010
 8001dac:	20000cbc 	.word	0x20000cbc

08001db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return uwTick;
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <HAL_GetTick+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000cbc 	.word	0x20000cbc

08001dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de4:	4013      	ands	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60d3      	str	r3, [r2, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <__NVIC_GetPriorityGrouping+0x18>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	f003 0307 	and.w	r3, r3, #7
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	db0b      	blt.n	8001e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	f003 021f 	and.w	r2, r3, #31
 8001e44:	4907      	ldr	r1, [pc, #28]	; (8001e64 <__NVIC_EnableIRQ+0x38>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000e100 	.word	0xe000e100

08001e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	db0a      	blt.n	8001e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	490c      	ldr	r1, [pc, #48]	; (8001eb4 <__NVIC_SetPriority+0x4c>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e90:	e00a      	b.n	8001ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4908      	ldr	r1, [pc, #32]	; (8001eb8 <__NVIC_SetPriority+0x50>)
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	3b04      	subs	r3, #4
 8001ea0:	0112      	lsls	r2, r2, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	761a      	strb	r2, [r3, #24]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000e100 	.word	0xe000e100
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f1c3 0307 	rsb	r3, r3, #7
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	bf28      	it	cs
 8001eda:	2304      	movcs	r3, #4
 8001edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d902      	bls.n	8001eec <NVIC_EncodePriority+0x30>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3b03      	subs	r3, #3
 8001eea:	e000      	b.n	8001eee <NVIC_EncodePriority+0x32>
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	401a      	ands	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	43d9      	mvns	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	4313      	orrs	r3, r2
         );
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3724      	adds	r7, #36	; 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ff4c 	bl	8001dc8 <__NVIC_SetPriorityGrouping>
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f4a:	f7ff ff61 	bl	8001e10 <__NVIC_GetPriorityGrouping>
 8001f4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	68b9      	ldr	r1, [r7, #8]
 8001f54:	6978      	ldr	r0, [r7, #20]
 8001f56:	f7ff ffb1 	bl	8001ebc <NVIC_EncodePriority>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff80 	bl	8001e68 <__NVIC_SetPriority>
}
 8001f68:	bf00      	nop
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff54 	bl	8001e2c <__NVIC_EnableIRQ>
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f98:	f7ff ff0a 	bl	8001db0 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e099      	b.n	80020dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc8:	e00f      	b.n	8001fea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fca:	f7ff fef1 	bl	8001db0 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d908      	bls.n	8001fea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e078      	b.n	80020dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1e8      	bne.n	8001fca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <HAL_DMA_Init+0x158>)
 8002004:	4013      	ands	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002016:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002022:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4313      	orrs	r3, r2
 800203a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	2b04      	cmp	r3, #4
 8002042:	d107      	bne.n	8002054 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	4313      	orrs	r3, r2
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f023 0307 	bic.w	r3, r3, #7
 800206a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	4313      	orrs	r3, r2
 8002074:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	2b04      	cmp	r3, #4
 800207c:	d117      	bne.n	80020ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00e      	beq.n	80020ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 fb01 	bl	8002698 <DMA_CheckFifoParam>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2240      	movs	r2, #64	; 0x40
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020aa:	2301      	movs	r3, #1
 80020ac:	e016      	b.n	80020dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fab8 	bl	800262c <DMA_CalcBaseAndBitshift>
 80020bc:	4603      	mov	r3, r0
 80020be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c4:	223f      	movs	r2, #63	; 0x3f
 80020c6:	409a      	lsls	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	f010803f 	.word	0xf010803f

080020e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_DMA_Start_IT+0x26>
 800210a:	2302      	movs	r3, #2
 800210c:	e040      	b.n	8002190 <HAL_DMA_Start_IT+0xa8>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d12f      	bne.n	8002182 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2202      	movs	r2, #2
 8002126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 fa4a 	bl	80025d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002140:	223f      	movs	r2, #63	; 0x3f
 8002142:	409a      	lsls	r2, r3
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0216 	orr.w	r2, r2, #22
 8002156:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0208 	orr.w	r2, r2, #8
 800216e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	e005      	b.n	800218e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800218a:	2302      	movs	r3, #2
 800218c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800218e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021a6:	f7ff fe03 	bl	8001db0 <HAL_GetTick>
 80021aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d008      	beq.n	80021ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2280      	movs	r2, #128	; 0x80
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e052      	b.n	8002270 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0216 	bic.w	r2, r2, #22
 80021d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d103      	bne.n	80021fa <HAL_DMA_Abort+0x62>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0208 	bic.w	r2, r2, #8
 8002208:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0201 	bic.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800221a:	e013      	b.n	8002244 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800221c:	f7ff fdc8 	bl	8001db0 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b05      	cmp	r3, #5
 8002228:	d90c      	bls.n	8002244 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2220      	movs	r2, #32
 800222e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2203      	movs	r2, #3
 8002234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e015      	b.n	8002270 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1e4      	bne.n	800221c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	223f      	movs	r2, #63	; 0x3f
 8002258:	409a      	lsls	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d004      	beq.n	8002296 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2280      	movs	r2, #128	; 0x80
 8002290:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e00c      	b.n	80022b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2205      	movs	r2, #5
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0201 	bic.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022c8:	4b8e      	ldr	r3, [pc, #568]	; (8002504 <HAL_DMA_IRQHandler+0x248>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a8e      	ldr	r2, [pc, #568]	; (8002508 <HAL_DMA_IRQHandler+0x24c>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0a9b      	lsrs	r3, r3, #10
 80022d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e6:	2208      	movs	r2, #8
 80022e8:	409a      	lsls	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01a      	beq.n	8002328 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0204 	bic.w	r2, r2, #4
 800230e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	2208      	movs	r2, #8
 8002316:	409a      	lsls	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002320:	f043 0201 	orr.w	r2, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	2201      	movs	r2, #1
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d012      	beq.n	800235e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234a:	2201      	movs	r2, #1
 800234c:	409a      	lsls	r2, r3
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002356:	f043 0202 	orr.w	r2, r3, #2
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002362:	2204      	movs	r2, #4
 8002364:	409a      	lsls	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d012      	beq.n	8002394 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00b      	beq.n	8002394 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	2204      	movs	r2, #4
 8002382:	409a      	lsls	r2, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238c:	f043 0204 	orr.w	r2, r3, #4
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	2210      	movs	r2, #16
 800239a:	409a      	lsls	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d043      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d03c      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	2210      	movs	r2, #16
 80023b8:	409a      	lsls	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d018      	beq.n	80023fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d108      	bne.n	80023ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d024      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	4798      	blx	r3
 80023ea:	e01f      	b.n	800242c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01b      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	4798      	blx	r3
 80023fc:	e016      	b.n	800242c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002408:	2b00      	cmp	r3, #0
 800240a:	d107      	bne.n	800241c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0208 	bic.w	r2, r2, #8
 800241a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002430:	2220      	movs	r2, #32
 8002432:	409a      	lsls	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 808f 	beq.w	800255c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8087 	beq.w	800255c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	2220      	movs	r2, #32
 8002454:	409a      	lsls	r2, r3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b05      	cmp	r3, #5
 8002464:	d136      	bne.n	80024d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0216 	bic.w	r2, r2, #22
 8002474:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002484:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d103      	bne.n	8002496 <HAL_DMA_IRQHandler+0x1da>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0208 	bic.w	r2, r2, #8
 80024a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024aa:	223f      	movs	r2, #63	; 0x3f
 80024ac:	409a      	lsls	r2, r3
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d07e      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
        }
        return;
 80024d2:	e079      	b.n	80025c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01d      	beq.n	800251e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10d      	bne.n	800250c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d031      	beq.n	800255c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	4798      	blx	r3
 8002500:	e02c      	b.n	800255c <HAL_DMA_IRQHandler+0x2a0>
 8002502:	bf00      	nop
 8002504:	20000000 	.word	0x20000000
 8002508:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002510:	2b00      	cmp	r3, #0
 8002512:	d023      	beq.n	800255c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3
 800251c:	e01e      	b.n	800255c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10f      	bne.n	800254c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0210 	bic.w	r2, r2, #16
 800253a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002560:	2b00      	cmp	r3, #0
 8002562:	d032      	beq.n	80025ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d022      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2205      	movs	r2, #5
 8002574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	3301      	adds	r3, #1
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	429a      	cmp	r2, r3
 8002592:	d307      	bcc.n	80025a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f2      	bne.n	8002588 <HAL_DMA_IRQHandler+0x2cc>
 80025a2:	e000      	b.n	80025a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
 80025c6:	e000      	b.n	80025ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80025c8:	bf00      	nop
    }
  }
}
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b40      	cmp	r3, #64	; 0x40
 80025fc:	d108      	bne.n	8002610 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800260e:	e007      	b.n	8002620 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	60da      	str	r2, [r3, #12]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	3b10      	subs	r3, #16
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <DMA_CalcBaseAndBitshift+0x64>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002646:	4a13      	ldr	r2, [pc, #76]	; (8002694 <DMA_CalcBaseAndBitshift+0x68>)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b03      	cmp	r3, #3
 8002658:	d909      	bls.n	800266e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002662:	f023 0303 	bic.w	r3, r3, #3
 8002666:	1d1a      	adds	r2, r3, #4
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	659a      	str	r2, [r3, #88]	; 0x58
 800266c:	e007      	b.n	800267e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002676:	f023 0303 	bic.w	r3, r3, #3
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	aaaaaaab 	.word	0xaaaaaaab
 8002694:	08008274 	.word	0x08008274

08002698 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d11f      	bne.n	80026f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d856      	bhi.n	8002766 <DMA_CheckFifoParam+0xce>
 80026b8:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <DMA_CheckFifoParam+0x28>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026d1 	.word	0x080026d1
 80026c4:	080026e3 	.word	0x080026e3
 80026c8:	080026d1 	.word	0x080026d1
 80026cc:	08002767 	.word	0x08002767
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d046      	beq.n	800276a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e0:	e043      	b.n	800276a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026ea:	d140      	bne.n	800276e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f0:	e03d      	b.n	800276e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026fa:	d121      	bne.n	8002740 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d837      	bhi.n	8002772 <DMA_CheckFifoParam+0xda>
 8002702:	a201      	add	r2, pc, #4	; (adr r2, 8002708 <DMA_CheckFifoParam+0x70>)
 8002704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002708:	08002719 	.word	0x08002719
 800270c:	0800271f 	.word	0x0800271f
 8002710:	08002719 	.word	0x08002719
 8002714:	08002731 	.word	0x08002731
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      break;
 800271c:	e030      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d025      	beq.n	8002776 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800272e:	e022      	b.n	8002776 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002738:	d11f      	bne.n	800277a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800273e:	e01c      	b.n	800277a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d903      	bls.n	800274e <DMA_CheckFifoParam+0xb6>
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d003      	beq.n	8002754 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800274c:	e018      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
      break;
 8002752:	e015      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00e      	beq.n	800277e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
      break;
 8002764:	e00b      	b.n	800277e <DMA_CheckFifoParam+0xe6>
      break;
 8002766:	bf00      	nop
 8002768:	e00a      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 800276a:	bf00      	nop
 800276c:	e008      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 800276e:	bf00      	nop
 8002770:	e006      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 8002772:	bf00      	nop
 8002774:	e004      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 8002776:	bf00      	nop
 8002778:	e002      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;   
 800277a:	bf00      	nop
 800277c:	e000      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 800277e:	bf00      	nop
    }
  } 
  
  return status; 
 8002780:	7bfb      	ldrb	r3, [r7, #15]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e165      	b.n	8002a78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f040 8154 	bne.w	8002a72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d005      	beq.n	80027e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d130      	bne.n	8002844 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 0201 	and.w	r2, r3, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b03      	cmp	r3, #3
 800284e:	d017      	beq.n	8002880 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d123      	bne.n	80028d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	08da      	lsrs	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3208      	adds	r2, #8
 8002894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	220f      	movs	r2, #15
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	69b9      	ldr	r1, [r7, #24]
 80028d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80ae 	beq.w	8002a72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b5d      	ldr	r3, [pc, #372]	; (8002a90 <HAL_GPIO_Init+0x300>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	4a5c      	ldr	r2, [pc, #368]	; (8002a90 <HAL_GPIO_Init+0x300>)
 8002920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002924:	6453      	str	r3, [r2, #68]	; 0x44
 8002926:	4b5a      	ldr	r3, [pc, #360]	; (8002a90 <HAL_GPIO_Init+0x300>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002932:	4a58      	ldr	r2, [pc, #352]	; (8002a94 <HAL_GPIO_Init+0x304>)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	089b      	lsrs	r3, r3, #2
 8002938:	3302      	adds	r3, #2
 800293a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	220f      	movs	r2, #15
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4f      	ldr	r2, [pc, #316]	; (8002a98 <HAL_GPIO_Init+0x308>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d025      	beq.n	80029aa <HAL_GPIO_Init+0x21a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a4e      	ldr	r2, [pc, #312]	; (8002a9c <HAL_GPIO_Init+0x30c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d01f      	beq.n	80029a6 <HAL_GPIO_Init+0x216>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a4d      	ldr	r2, [pc, #308]	; (8002aa0 <HAL_GPIO_Init+0x310>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d019      	beq.n	80029a2 <HAL_GPIO_Init+0x212>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4c      	ldr	r2, [pc, #304]	; (8002aa4 <HAL_GPIO_Init+0x314>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_GPIO_Init+0x20e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4b      	ldr	r2, [pc, #300]	; (8002aa8 <HAL_GPIO_Init+0x318>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00d      	beq.n	800299a <HAL_GPIO_Init+0x20a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4a      	ldr	r2, [pc, #296]	; (8002aac <HAL_GPIO_Init+0x31c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d007      	beq.n	8002996 <HAL_GPIO_Init+0x206>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a49      	ldr	r2, [pc, #292]	; (8002ab0 <HAL_GPIO_Init+0x320>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d101      	bne.n	8002992 <HAL_GPIO_Init+0x202>
 800298e:	2306      	movs	r3, #6
 8002990:	e00c      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 8002992:	2307      	movs	r3, #7
 8002994:	e00a      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 8002996:	2305      	movs	r3, #5
 8002998:	e008      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 800299a:	2304      	movs	r3, #4
 800299c:	e006      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 800299e:	2303      	movs	r3, #3
 80029a0:	e004      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e002      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 80029aa:	2300      	movs	r3, #0
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	f002 0203 	and.w	r2, r2, #3
 80029b2:	0092      	lsls	r2, r2, #2
 80029b4:	4093      	lsls	r3, r2
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029bc:	4935      	ldr	r1, [pc, #212]	; (8002a94 <HAL_GPIO_Init+0x304>)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	3302      	adds	r3, #2
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ca:	4b3a      	ldr	r3, [pc, #232]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ee:	4a31      	ldr	r2, [pc, #196]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029f4:	4b2f      	ldr	r3, [pc, #188]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a18:	4a26      	ldr	r2, [pc, #152]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a1e:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a42:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a6c:	4a11      	ldr	r2, [pc, #68]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3301      	adds	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	2b0f      	cmp	r3, #15
 8002a7c:	f67f ae96 	bls.w	80027ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3724      	adds	r7, #36	; 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40013800 	.word	0x40013800
 8002a98:	40020000 	.word	0x40020000
 8002a9c:	40020400 	.word	0x40020400
 8002aa0:	40020800 	.word	0x40020800
 8002aa4:	40020c00 	.word	0x40020c00
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40021400 	.word	0x40021400
 8002ab0:	40021800 	.word	0x40021800
 8002ab4:	40013c00 	.word	0x40013c00

08002ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	807b      	strh	r3, [r7, #2]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ac8:	787b      	ldrb	r3, [r7, #1]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ace:	887a      	ldrh	r2, [r7, #2]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ad4:	e003      	b.n	8002ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ad6:	887b      	ldrh	r3, [r7, #2]
 8002ad8:	041a      	lsls	r2, r3, #16
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	619a      	str	r2, [r3, #24]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002af6:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d006      	beq.n	8002b10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b02:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fd ff20 	bl	8000950 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40013c00 	.word	0x40013c00

08002b1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <HAL_PWREx_EnableOverDrive+0x90>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	4a1f      	ldr	r2, [pc, #124]	; (8002bac <HAL_PWREx_EnableOverDrive+0x90>)
 8002b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b34:	6413      	str	r3, [r2, #64]	; 0x40
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_PWREx_EnableOverDrive+0x90>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b42:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b48:	f7ff f932 	bl	8001db0 <HAL_GetTick>
 8002b4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b4e:	e009      	b.n	8002b64 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b50:	f7ff f92e 	bl	8001db0 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b5e:	d901      	bls.n	8002b64 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e01f      	b.n	8002ba4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b64:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b70:	d1ee      	bne.n	8002b50 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b78:	f7ff f91a 	bl	8001db0 <HAL_GetTick>
 8002b7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b7e:	e009      	b.n	8002b94 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b80:	f7ff f916 	bl	8001db0 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b8e:	d901      	bls.n	8002b94 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e007      	b.n	8002ba4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b94:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ba0:	d1ee      	bne.n	8002b80 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	420e0040 	.word	0x420e0040
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	420e0044 	.word	0x420e0044

08002bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0cc      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b68      	ldr	r3, [pc, #416]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d90c      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b65      	ldr	r3, [pc, #404]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b63      	ldr	r3, [pc, #396]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0b8      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c10:	4b59      	ldr	r3, [pc, #356]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a58      	ldr	r2, [pc, #352]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c28:	4b53      	ldr	r3, [pc, #332]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4a52      	ldr	r2, [pc, #328]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c34:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	494d      	ldr	r1, [pc, #308]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d044      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	4b47      	ldr	r3, [pc, #284]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d119      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e07f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d003      	beq.n	8002c7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7a:	4b3f      	ldr	r3, [pc, #252]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e06f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8a:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e067      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c9a:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f023 0203 	bic.w	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4934      	ldr	r1, [pc, #208]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cac:	f7ff f880 	bl	8001db0 <HAL_GetTick>
 8002cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb4:	f7ff f87c 	bl	8001db0 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e04f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 020c 	and.w	r2, r3, #12
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d1eb      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d20c      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e032      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d10:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4916      	ldr	r1, [pc, #88]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d2e:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	490e      	ldr	r1, [pc, #56]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d42:	f000 f887 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8002d46:	4602      	mov	r2, r0
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	490a      	ldr	r1, [pc, #40]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002d54:	5ccb      	ldrb	r3, [r1, r3]
 8002d56:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5a:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe fa5a 	bl	800121c <HAL_InitTick>

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40023c00 	.word	0x40023c00
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	0800825c 	.word	0x0800825c
 8002d80:	20000000 	.word	0x20000000
 8002d84:	2000000c 	.word	0x2000000c

08002d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20000000 	.word	0x20000000

08002da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002da4:	f7ff fff0 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	0a9b      	lsrs	r3, r3, #10
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	4903      	ldr	r1, [pc, #12]	; (8002dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	0800826c 	.word	0x0800826c

08002dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dcc:	f7ff ffdc 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	0b5b      	lsrs	r3, r3, #13
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	4903      	ldr	r1, [pc, #12]	; (8002dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40023800 	.word	0x40023800
 8002dec:	0800826c 	.word	0x0800826c

08002df0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	220f      	movs	r2, #15
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e00:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_RCC_GetClockConfig+0x5c>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 0203 	and.w	r2, r3, #3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <HAL_RCC_GetClockConfig+0x5c>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <HAL_RCC_GetClockConfig+0x5c>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <HAL_RCC_GetClockConfig+0x5c>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	08db      	lsrs	r3, r3, #3
 8002e2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <HAL_RCC_GetClockConfig+0x60>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 020f 	and.w	r2, r3, #15
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	601a      	str	r2, [r3, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40023c00 	.word	0x40023c00

08002e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e58:	b0ae      	sub	sp, #184	; 0xb8
 8002e5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e7a:	4bcb      	ldr	r3, [pc, #812]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b0c      	cmp	r3, #12
 8002e84:	f200 8206 	bhi.w	8003294 <HAL_RCC_GetSysClockFreq+0x440>
 8002e88:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002ec5 	.word	0x08002ec5
 8002e94:	08003295 	.word	0x08003295
 8002e98:	08003295 	.word	0x08003295
 8002e9c:	08003295 	.word	0x08003295
 8002ea0:	08002ecd 	.word	0x08002ecd
 8002ea4:	08003295 	.word	0x08003295
 8002ea8:	08003295 	.word	0x08003295
 8002eac:	08003295 	.word	0x08003295
 8002eb0:	08002ed5 	.word	0x08002ed5
 8002eb4:	08003295 	.word	0x08003295
 8002eb8:	08003295 	.word	0x08003295
 8002ebc:	08003295 	.word	0x08003295
 8002ec0:	080030c5 	.word	0x080030c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec4:	4bb9      	ldr	r3, [pc, #740]	; (80031ac <HAL_RCC_GetSysClockFreq+0x358>)
 8002ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002eca:	e1e7      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ecc:	4bb8      	ldr	r3, [pc, #736]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002ece:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ed2:	e1e3      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed4:	4bb4      	ldr	r3, [pc, #720]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002edc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ee0:	4bb1      	ldr	r3, [pc, #708]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d071      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eec:	4bae      	ldr	r3, [pc, #696]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	099b      	lsrs	r3, r3, #6
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ef8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f12:	4622      	mov	r2, r4
 8002f14:	462b      	mov	r3, r5
 8002f16:	f04f 0000 	mov.w	r0, #0
 8002f1a:	f04f 0100 	mov.w	r1, #0
 8002f1e:	0159      	lsls	r1, r3, #5
 8002f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f24:	0150      	lsls	r0, r2, #5
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	1a51      	subs	r1, r2, r1
 8002f2e:	6439      	str	r1, [r7, #64]	; 0x40
 8002f30:	4629      	mov	r1, r5
 8002f32:	eb63 0301 	sbc.w	r3, r3, r1
 8002f36:	647b      	str	r3, [r7, #68]	; 0x44
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002f44:	4649      	mov	r1, r9
 8002f46:	018b      	lsls	r3, r1, #6
 8002f48:	4641      	mov	r1, r8
 8002f4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f4e:	4641      	mov	r1, r8
 8002f50:	018a      	lsls	r2, r1, #6
 8002f52:	4641      	mov	r1, r8
 8002f54:	1a51      	subs	r1, r2, r1
 8002f56:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f58:	4649      	mov	r1, r9
 8002f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f6c:	4649      	mov	r1, r9
 8002f6e:	00cb      	lsls	r3, r1, #3
 8002f70:	4641      	mov	r1, r8
 8002f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f76:	4641      	mov	r1, r8
 8002f78:	00ca      	lsls	r2, r1, #3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4622      	mov	r2, r4
 8002f82:	189b      	adds	r3, r3, r2
 8002f84:	633b      	str	r3, [r7, #48]	; 0x30
 8002f86:	462b      	mov	r3, r5
 8002f88:	460a      	mov	r2, r1
 8002f8a:	eb42 0303 	adc.w	r3, r2, r3
 8002f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	024b      	lsls	r3, r1, #9
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	024a      	lsls	r2, r1, #9
 8002faa:	4610      	mov	r0, r2
 8002fac:	4619      	mov	r1, r3
 8002fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fbc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002fc0:	f7fd f926 	bl	8000210 <__aeabi_uldivmod>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4613      	mov	r3, r2
 8002fca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fce:	e067      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd0:	4b75      	ldr	r3, [pc, #468]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	099b      	lsrs	r3, r3, #6
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fdc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002fe0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fea:	2300      	movs	r3, #0
 8002fec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002ff2:	4622      	mov	r2, r4
 8002ff4:	462b      	mov	r3, r5
 8002ff6:	f04f 0000 	mov.w	r0, #0
 8002ffa:	f04f 0100 	mov.w	r1, #0
 8002ffe:	0159      	lsls	r1, r3, #5
 8003000:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003004:	0150      	lsls	r0, r2, #5
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4621      	mov	r1, r4
 800300c:	1a51      	subs	r1, r2, r1
 800300e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003010:	4629      	mov	r1, r5
 8003012:	eb63 0301 	sbc.w	r3, r3, r1
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003024:	4649      	mov	r1, r9
 8003026:	018b      	lsls	r3, r1, #6
 8003028:	4641      	mov	r1, r8
 800302a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800302e:	4641      	mov	r1, r8
 8003030:	018a      	lsls	r2, r1, #6
 8003032:	4641      	mov	r1, r8
 8003034:	ebb2 0a01 	subs.w	sl, r2, r1
 8003038:	4649      	mov	r1, r9
 800303a:	eb63 0b01 	sbc.w	fp, r3, r1
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800304a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800304e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003052:	4692      	mov	sl, r2
 8003054:	469b      	mov	fp, r3
 8003056:	4623      	mov	r3, r4
 8003058:	eb1a 0303 	adds.w	r3, sl, r3
 800305c:	623b      	str	r3, [r7, #32]
 800305e:	462b      	mov	r3, r5
 8003060:	eb4b 0303 	adc.w	r3, fp, r3
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003072:	4629      	mov	r1, r5
 8003074:	028b      	lsls	r3, r1, #10
 8003076:	4621      	mov	r1, r4
 8003078:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800307c:	4621      	mov	r1, r4
 800307e:	028a      	lsls	r2, r1, #10
 8003080:	4610      	mov	r0, r2
 8003082:	4619      	mov	r1, r3
 8003084:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003088:	2200      	movs	r2, #0
 800308a:	673b      	str	r3, [r7, #112]	; 0x70
 800308c:	677a      	str	r2, [r7, #116]	; 0x74
 800308e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003092:	f7fd f8bd 	bl	8000210 <__aeabi_uldivmod>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4613      	mov	r3, r2
 800309c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030a0:	4b41      	ldr	r3, [pc, #260]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	0c1b      	lsrs	r3, r3, #16
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	3301      	adds	r3, #1
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80030b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030c2:	e0eb      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c4:	4b38      	ldr	r3, [pc, #224]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030d0:	4b35      	ldr	r3, [pc, #212]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d06b      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030dc:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	2200      	movs	r2, #0
 80030e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80030e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ee:	663b      	str	r3, [r7, #96]	; 0x60
 80030f0:	2300      	movs	r3, #0
 80030f2:	667b      	str	r3, [r7, #100]	; 0x64
 80030f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80030f8:	4622      	mov	r2, r4
 80030fa:	462b      	mov	r3, r5
 80030fc:	f04f 0000 	mov.w	r0, #0
 8003100:	f04f 0100 	mov.w	r1, #0
 8003104:	0159      	lsls	r1, r3, #5
 8003106:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800310a:	0150      	lsls	r0, r2, #5
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4621      	mov	r1, r4
 8003112:	1a51      	subs	r1, r2, r1
 8003114:	61b9      	str	r1, [r7, #24]
 8003116:	4629      	mov	r1, r5
 8003118:	eb63 0301 	sbc.w	r3, r3, r1
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800312a:	4659      	mov	r1, fp
 800312c:	018b      	lsls	r3, r1, #6
 800312e:	4651      	mov	r1, sl
 8003130:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003134:	4651      	mov	r1, sl
 8003136:	018a      	lsls	r2, r1, #6
 8003138:	4651      	mov	r1, sl
 800313a:	ebb2 0801 	subs.w	r8, r2, r1
 800313e:	4659      	mov	r1, fp
 8003140:	eb63 0901 	sbc.w	r9, r3, r1
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003150:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003154:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003158:	4690      	mov	r8, r2
 800315a:	4699      	mov	r9, r3
 800315c:	4623      	mov	r3, r4
 800315e:	eb18 0303 	adds.w	r3, r8, r3
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	462b      	mov	r3, r5
 8003166:	eb49 0303 	adc.w	r3, r9, r3
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003178:	4629      	mov	r1, r5
 800317a:	024b      	lsls	r3, r1, #9
 800317c:	4621      	mov	r1, r4
 800317e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003182:	4621      	mov	r1, r4
 8003184:	024a      	lsls	r2, r1, #9
 8003186:	4610      	mov	r0, r2
 8003188:	4619      	mov	r1, r3
 800318a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800318e:	2200      	movs	r2, #0
 8003190:	65bb      	str	r3, [r7, #88]	; 0x58
 8003192:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003194:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003198:	f7fd f83a 	bl	8000210 <__aeabi_uldivmod>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4613      	mov	r3, r2
 80031a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031a6:	e065      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x420>
 80031a8:	40023800 	.word	0x40023800
 80031ac:	00f42400 	.word	0x00f42400
 80031b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b4:	4b3d      	ldr	r3, [pc, #244]	; (80032ac <HAL_RCC_GetSysClockFreq+0x458>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	2200      	movs	r2, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	4611      	mov	r1, r2
 80031c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031c4:	653b      	str	r3, [r7, #80]	; 0x50
 80031c6:	2300      	movs	r3, #0
 80031c8:	657b      	str	r3, [r7, #84]	; 0x54
 80031ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80031ce:	4642      	mov	r2, r8
 80031d0:	464b      	mov	r3, r9
 80031d2:	f04f 0000 	mov.w	r0, #0
 80031d6:	f04f 0100 	mov.w	r1, #0
 80031da:	0159      	lsls	r1, r3, #5
 80031dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031e0:	0150      	lsls	r0, r2, #5
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4641      	mov	r1, r8
 80031e8:	1a51      	subs	r1, r2, r1
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	4649      	mov	r1, r9
 80031ee:	eb63 0301 	sbc.w	r3, r3, r1
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003200:	4659      	mov	r1, fp
 8003202:	018b      	lsls	r3, r1, #6
 8003204:	4651      	mov	r1, sl
 8003206:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800320a:	4651      	mov	r1, sl
 800320c:	018a      	lsls	r2, r1, #6
 800320e:	4651      	mov	r1, sl
 8003210:	1a54      	subs	r4, r2, r1
 8003212:	4659      	mov	r1, fp
 8003214:	eb63 0501 	sbc.w	r5, r3, r1
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	00eb      	lsls	r3, r5, #3
 8003222:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003226:	00e2      	lsls	r2, r4, #3
 8003228:	4614      	mov	r4, r2
 800322a:	461d      	mov	r5, r3
 800322c:	4643      	mov	r3, r8
 800322e:	18e3      	adds	r3, r4, r3
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	464b      	mov	r3, r9
 8003234:	eb45 0303 	adc.w	r3, r5, r3
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003246:	4629      	mov	r1, r5
 8003248:	028b      	lsls	r3, r1, #10
 800324a:	4621      	mov	r1, r4
 800324c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003250:	4621      	mov	r1, r4
 8003252:	028a      	lsls	r2, r1, #10
 8003254:	4610      	mov	r0, r2
 8003256:	4619      	mov	r1, r3
 8003258:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800325c:	2200      	movs	r2, #0
 800325e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003260:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003262:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003266:	f7fc ffd3 	bl	8000210 <__aeabi_uldivmod>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4613      	mov	r3, r2
 8003270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003274:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <HAL_RCC_GetSysClockFreq+0x458>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	0f1b      	lsrs	r3, r3, #28
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003282:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003286:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800328a:	fbb2 f3f3 	udiv	r3, r2, r3
 800328e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003292:	e003      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003296:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800329a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800329c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	37b8      	adds	r7, #184	; 0xb8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	00f42400 	.word	0x00f42400

080032b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e28d      	b.n	80037e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8083 	beq.w	80033da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032d4:	4b94      	ldr	r3, [pc, #592]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d019      	beq.n	8003314 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032e0:	4b91      	ldr	r3, [pc, #580]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d106      	bne.n	80032fa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032ec:	4b8e      	ldr	r3, [pc, #568]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f8:	d00c      	beq.n	8003314 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032fa:	4b8b      	ldr	r3, [pc, #556]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003302:	2b0c      	cmp	r3, #12
 8003304:	d112      	bne.n	800332c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003306:	4b88      	ldr	r3, [pc, #544]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003312:	d10b      	bne.n	800332c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	4b84      	ldr	r3, [pc, #528]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d05b      	beq.n	80033d8 <HAL_RCC_OscConfig+0x124>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d157      	bne.n	80033d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e25a      	b.n	80037e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003334:	d106      	bne.n	8003344 <HAL_RCC_OscConfig+0x90>
 8003336:	4b7c      	ldr	r3, [pc, #496]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a7b      	ldr	r2, [pc, #492]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e01d      	b.n	8003380 <HAL_RCC_OscConfig+0xcc>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0xb4>
 800334e:	4b76      	ldr	r3, [pc, #472]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a75      	ldr	r2, [pc, #468]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 8003354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	4b73      	ldr	r3, [pc, #460]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a72      	ldr	r2, [pc, #456]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e00b      	b.n	8003380 <HAL_RCC_OscConfig+0xcc>
 8003368:	4b6f      	ldr	r3, [pc, #444]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a6e      	ldr	r2, [pc, #440]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 800336e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	4b6c      	ldr	r3, [pc, #432]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a6b      	ldr	r2, [pc, #428]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 800337a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800337e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d013      	beq.n	80033b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003388:	f7fe fd12 	bl	8001db0 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003390:	f7fe fd0e 	bl	8001db0 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	; 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e21f      	b.n	80037e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	4b61      	ldr	r3, [pc, #388]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0xdc>
 80033ae:	e014      	b.n	80033da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fe fcfe 	bl	8001db0 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b8:	f7fe fcfa 	bl	8001db0 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	; 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e20b      	b.n	80037e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	4b57      	ldr	r3, [pc, #348]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x104>
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d06f      	beq.n	80034c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033e6:	4b50      	ldr	r3, [pc, #320]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d017      	beq.n	8003422 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033f2:	4b4d      	ldr	r3, [pc, #308]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d105      	bne.n	800340a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033fe:	4b4a      	ldr	r3, [pc, #296]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800340a:	4b47      	ldr	r3, [pc, #284]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003412:	2b0c      	cmp	r3, #12
 8003414:	d11c      	bne.n	8003450 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003416:	4b44      	ldr	r3, [pc, #272]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d116      	bne.n	8003450 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003422:	4b41      	ldr	r3, [pc, #260]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_RCC_OscConfig+0x186>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d001      	beq.n	800343a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e1d3      	b.n	80037e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343a:	4b3b      	ldr	r3, [pc, #236]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4937      	ldr	r1, [pc, #220]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344e:	e03a      	b.n	80034c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d020      	beq.n	800349a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003458:	4b34      	ldr	r3, [pc, #208]	; (800352c <HAL_RCC_OscConfig+0x278>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fe fca7 	bl	8001db0 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003466:	f7fe fca3 	bl	8001db0 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e1b4      	b.n	80037e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003478:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003484:	4b28      	ldr	r3, [pc, #160]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4925      	ldr	r1, [pc, #148]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 8003494:	4313      	orrs	r3, r2
 8003496:	600b      	str	r3, [r1, #0]
 8003498:	e015      	b.n	80034c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349a:	4b24      	ldr	r3, [pc, #144]	; (800352c <HAL_RCC_OscConfig+0x278>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fe fc86 	bl	8001db0 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a8:	f7fe fc82 	bl	8001db0 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e193      	b.n	80037e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ba:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d036      	beq.n	8003540 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d016      	beq.n	8003508 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034da:	4b15      	ldr	r3, [pc, #84]	; (8003530 <HAL_RCC_OscConfig+0x27c>)
 80034dc:	2201      	movs	r2, #1
 80034de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e0:	f7fe fc66 	bl	8001db0 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e8:	f7fe fc62 	bl	8001db0 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e173      	b.n	80037e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fa:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 80034fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x234>
 8003506:	e01b      	b.n	8003540 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <HAL_RCC_OscConfig+0x27c>)
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350e:	f7fe fc4f 	bl	8001db0 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003514:	e00e      	b.n	8003534 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003516:	f7fe fc4b 	bl	8001db0 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d907      	bls.n	8003534 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e15c      	b.n	80037e2 <HAL_RCC_OscConfig+0x52e>
 8003528:	40023800 	.word	0x40023800
 800352c:	42470000 	.word	0x42470000
 8003530:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003534:	4b8a      	ldr	r3, [pc, #552]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 8003536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1ea      	bne.n	8003516 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 8097 	beq.w	800367c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354e:	2300      	movs	r3, #0
 8003550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003552:	4b83      	ldr	r3, [pc, #524]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10f      	bne.n	800357e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	4b7f      	ldr	r3, [pc, #508]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	4a7e      	ldr	r2, [pc, #504]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 8003568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356c:	6413      	str	r3, [r2, #64]	; 0x40
 800356e:	4b7c      	ldr	r3, [pc, #496]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800357a:	2301      	movs	r3, #1
 800357c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357e:	4b79      	ldr	r3, [pc, #484]	; (8003764 <HAL_RCC_OscConfig+0x4b0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003586:	2b00      	cmp	r3, #0
 8003588:	d118      	bne.n	80035bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800358a:	4b76      	ldr	r3, [pc, #472]	; (8003764 <HAL_RCC_OscConfig+0x4b0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a75      	ldr	r2, [pc, #468]	; (8003764 <HAL_RCC_OscConfig+0x4b0>)
 8003590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003596:	f7fe fc0b 	bl	8001db0 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359e:	f7fe fc07 	bl	8001db0 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e118      	b.n	80037e2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b0:	4b6c      	ldr	r3, [pc, #432]	; (8003764 <HAL_RCC_OscConfig+0x4b0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d106      	bne.n	80035d2 <HAL_RCC_OscConfig+0x31e>
 80035c4:	4b66      	ldr	r3, [pc, #408]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	4a65      	ldr	r2, [pc, #404]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	6713      	str	r3, [r2, #112]	; 0x70
 80035d0:	e01c      	b.n	800360c <HAL_RCC_OscConfig+0x358>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b05      	cmp	r3, #5
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x340>
 80035da:	4b61      	ldr	r3, [pc, #388]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035de:	4a60      	ldr	r2, [pc, #384]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 80035e0:	f043 0304 	orr.w	r3, r3, #4
 80035e4:	6713      	str	r3, [r2, #112]	; 0x70
 80035e6:	4b5e      	ldr	r3, [pc, #376]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	4a5d      	ldr	r2, [pc, #372]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	6713      	str	r3, [r2, #112]	; 0x70
 80035f2:	e00b      	b.n	800360c <HAL_RCC_OscConfig+0x358>
 80035f4:	4b5a      	ldr	r3, [pc, #360]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	4a59      	ldr	r2, [pc, #356]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 80035fa:	f023 0301 	bic.w	r3, r3, #1
 80035fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003600:	4b57      	ldr	r3, [pc, #348]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003604:	4a56      	ldr	r2, [pc, #344]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 8003606:	f023 0304 	bic.w	r3, r3, #4
 800360a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d015      	beq.n	8003640 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003614:	f7fe fbcc 	bl	8001db0 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361a:	e00a      	b.n	8003632 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800361c:	f7fe fbc8 	bl	8001db0 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f241 3288 	movw	r2, #5000	; 0x1388
 800362a:	4293      	cmp	r3, r2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e0d7      	b.n	80037e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003632:	4b4b      	ldr	r3, [pc, #300]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0ee      	beq.n	800361c <HAL_RCC_OscConfig+0x368>
 800363e:	e014      	b.n	800366a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003640:	f7fe fbb6 	bl	8001db0 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003646:	e00a      	b.n	800365e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003648:	f7fe fbb2 	bl	8001db0 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f241 3288 	movw	r2, #5000	; 0x1388
 8003656:	4293      	cmp	r3, r2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e0c1      	b.n	80037e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365e:	4b40      	ldr	r3, [pc, #256]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1ee      	bne.n	8003648 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d105      	bne.n	800367c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003670:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	4a3a      	ldr	r2, [pc, #232]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 8003676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800367a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 80ad 	beq.w	80037e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003686:	4b36      	ldr	r3, [pc, #216]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b08      	cmp	r3, #8
 8003690:	d060      	beq.n	8003754 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d145      	bne.n	8003726 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b33      	ldr	r3, [pc, #204]	; (8003768 <HAL_RCC_OscConfig+0x4b4>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe fb86 	bl	8001db0 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a8:	f7fe fb82 	bl	8001db0 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e093      	b.n	80037e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ba:	4b29      	ldr	r3, [pc, #164]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	019b      	lsls	r3, r3, #6
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	085b      	lsrs	r3, r3, #1
 80036de:	3b01      	subs	r3, #1
 80036e0:	041b      	lsls	r3, r3, #16
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	061b      	lsls	r3, r3, #24
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	071b      	lsls	r3, r3, #28
 80036f2:	491b      	ldr	r1, [pc, #108]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036f8:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <HAL_RCC_OscConfig+0x4b4>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fe:	f7fe fb57 	bl	8001db0 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003706:	f7fe fb53 	bl	8001db0 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e064      	b.n	80037e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003718:	4b11      	ldr	r3, [pc, #68]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x452>
 8003724:	e05c      	b.n	80037e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003726:	4b10      	ldr	r3, [pc, #64]	; (8003768 <HAL_RCC_OscConfig+0x4b4>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7fe fb40 	bl	8001db0 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003734:	f7fe fb3c 	bl	8001db0 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e04d      	b.n	80037e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <HAL_RCC_OscConfig+0x4ac>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x480>
 8003752:	e045      	b.n	80037e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d107      	bne.n	800376c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e040      	b.n	80037e2 <HAL_RCC_OscConfig+0x52e>
 8003760:	40023800 	.word	0x40023800
 8003764:	40007000 	.word	0x40007000
 8003768:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800376c:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <HAL_RCC_OscConfig+0x538>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d030      	beq.n	80037dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d129      	bne.n	80037dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	429a      	cmp	r2, r3
 8003794:	d122      	bne.n	80037dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800379c:	4013      	ands	r3, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d119      	bne.n	80037dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	3b01      	subs	r3, #1
 80037b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d10f      	bne.n	80037dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d107      	bne.n	80037dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800

080037f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e07b      	b.n	80038fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	2b00      	cmp	r3, #0
 8003808:	d108      	bne.n	800381c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003812:	d009      	beq.n	8003828 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	61da      	str	r2, [r3, #28]
 800381a:	e005      	b.n	8003828 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd fc3e 	bl	80010c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ac:	ea42 0103 	orr.w	r1, r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	0c1b      	lsrs	r3, r3, #16
 80038c6:	f003 0104 	and.w	r1, r3, #4
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	f003 0210 	and.w	r2, r3, #16
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69da      	ldr	r2, [r3, #28]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b08c      	sub	sp, #48	; 0x30
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003910:	2301      	movs	r3, #1
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_SPI_TransmitReceive+0x26>
 8003924:	2302      	movs	r3, #2
 8003926:	e198      	b.n	8003c5a <HAL_SPI_TransmitReceive+0x358>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003930:	f7fe fa3e 	bl	8001db0 <HAL_GetTick>
 8003934:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800393c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003946:	887b      	ldrh	r3, [r7, #2]
 8003948:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800394a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800394e:	2b01      	cmp	r3, #1
 8003950:	d00f      	beq.n	8003972 <HAL_SPI_TransmitReceive+0x70>
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003958:	d107      	bne.n	800396a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d103      	bne.n	800396a <HAL_SPI_TransmitReceive+0x68>
 8003962:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003966:	2b04      	cmp	r3, #4
 8003968:	d003      	beq.n	8003972 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800396a:	2302      	movs	r3, #2
 800396c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003970:	e16d      	b.n	8003c4e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_SPI_TransmitReceive+0x82>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_SPI_TransmitReceive+0x82>
 800397e:	887b      	ldrh	r3, [r7, #2]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d103      	bne.n	800398c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800398a:	e160      	b.n	8003c4e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b04      	cmp	r3, #4
 8003996:	d003      	beq.n	80039a0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2205      	movs	r2, #5
 800399c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	887a      	ldrh	r2, [r7, #2]
 80039b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	887a      	ldrh	r2, [r7, #2]
 80039b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	887a      	ldrh	r2, [r7, #2]
 80039c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	887a      	ldrh	r2, [r7, #2]
 80039c8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e0:	2b40      	cmp	r3, #64	; 0x40
 80039e2:	d007      	beq.n	80039f4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039fc:	d17c      	bne.n	8003af8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_SPI_TransmitReceive+0x10a>
 8003a06:	8b7b      	ldrh	r3, [r7, #26]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d16a      	bne.n	8003ae2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	881a      	ldrh	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	1c9a      	adds	r2, r3, #2
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a30:	e057      	b.n	8003ae2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d11b      	bne.n	8003a78 <HAL_SPI_TransmitReceive+0x176>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d016      	beq.n	8003a78 <HAL_SPI_TransmitReceive+0x176>
 8003a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d113      	bne.n	8003a78 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	881a      	ldrh	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a60:	1c9a      	adds	r2, r3, #2
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d119      	bne.n	8003aba <HAL_SPI_TransmitReceive+0x1b8>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d014      	beq.n	8003aba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9a:	b292      	uxth	r2, r2
 8003a9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa2:	1c9a      	adds	r2, r3, #2
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003aba:	f7fe f979 	bl	8001db0 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d80b      	bhi.n	8003ae2 <HAL_SPI_TransmitReceive+0x1e0>
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad0:	d007      	beq.n	8003ae2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003ae0:	e0b5      	b.n	8003c4e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1a2      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x130>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d19d      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x130>
 8003af6:	e080      	b.n	8003bfa <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_SPI_TransmitReceive+0x204>
 8003b00:	8b7b      	ldrh	r3, [r7, #26]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d16f      	bne.n	8003be6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	330c      	adds	r3, #12
 8003b10:	7812      	ldrb	r2, [r2, #0]
 8003b12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b2c:	e05b      	b.n	8003be6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d11c      	bne.n	8003b76 <HAL_SPI_TransmitReceive+0x274>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d017      	beq.n	8003b76 <HAL_SPI_TransmitReceive+0x274>
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d114      	bne.n	8003b76 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	330c      	adds	r3, #12
 8003b56:	7812      	ldrb	r2, [r2, #0]
 8003b58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d119      	bne.n	8003bb8 <HAL_SPI_TransmitReceive+0x2b6>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d014      	beq.n	8003bb8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bb8:	f7fe f8fa 	bl	8001db0 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d803      	bhi.n	8003bd0 <HAL_SPI_TransmitReceive+0x2ce>
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bce:	d102      	bne.n	8003bd6 <HAL_SPI_TransmitReceive+0x2d4>
 8003bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d107      	bne.n	8003be6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003be4:	e033      	b.n	8003c4e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d19e      	bne.n	8003b2e <HAL_SPI_TransmitReceive+0x22c>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d199      	bne.n	8003b2e <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f9ca 	bl	8003f98 <SPI_EndRxTxTransaction>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d006      	beq.n	8003c18 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c16:	e01a      	b.n	8003c4e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c44:	e003      	b.n	8003c4e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3730      	adds	r7, #48	; 0x30
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10e      	bne.n	8003ca4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d009      	beq.n	8003ca4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d004      	beq.n	8003ca4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	4798      	blx	r3
    return;
 8003ca2:	e0ce      	b.n	8003e42 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d009      	beq.n	8003cc2 <HAL_SPI_IRQHandler+0x5e>
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	4798      	blx	r3
    return;
 8003cc0:	e0bf      	b.n	8003e42 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <HAL_SPI_IRQHandler+0x7e>
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d105      	bne.n	8003ce2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80b0 	beq.w	8003e42 <HAL_SPI_IRQHandler+0x1de>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80aa 	beq.w	8003e42 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d023      	beq.n	8003d40 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d011      	beq.n	8003d28 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d08:	f043 0204 	orr.w	r2, r3, #4
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	e00b      	b.n	8003d40 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d28:	2300      	movs	r3, #0
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	693b      	ldr	r3, [r7, #16]
        return;
 8003d3e:	e080      	b.n	8003e42 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d014      	beq.n	8003d74 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4e:	f043 0201 	orr.w	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00c      	beq.n	8003d98 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d82:	f043 0208 	orr.w	r2, r3, #8
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d04f      	beq.n	8003e40 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d104      	bne.n	8003dcc <HAL_SPI_IRQHandler+0x168>
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d034      	beq.n	8003e36 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0203 	bic.w	r2, r2, #3
 8003dda:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d011      	beq.n	8003e08 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de8:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <HAL_SPI_IRQHandler+0x1e4>)
 8003dea:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fe fa41 	bl	8002278 <HAL_DMA_Abort_IT>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d016      	beq.n	8003e3e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e14:	4a0c      	ldr	r2, [pc, #48]	; (8003e48 <HAL_SPI_IRQHandler+0x1e4>)
 8003e16:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fe fa2b 	bl	8002278 <HAL_DMA_Abort_IT>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003e34:	e003      	b.n	8003e3e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f808 	bl	8003e4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e3c:	e000      	b.n	8003e40 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003e3e:	bf00      	nop
    return;
 8003e40:	bf00      	nop
  }
}
 8003e42:	3720      	adds	r7, #32
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	08003e61 	.word	0x08003e61

08003e4c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f7ff ffe6 	bl	8003e4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	4613      	mov	r3, r2
 8003e96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e98:	f7fd ff8a 	bl	8001db0 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ea8:	f7fd ff82 	bl	8001db0 <HAL_GetTick>
 8003eac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003eae:	4b39      	ldr	r3, [pc, #228]	; (8003f94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	015b      	lsls	r3, r3, #5
 8003eb4:	0d1b      	lsrs	r3, r3, #20
 8003eb6:	69fa      	ldr	r2, [r7, #28]
 8003eb8:	fb02 f303 	mul.w	r3, r2, r3
 8003ebc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ebe:	e054      	b.n	8003f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec6:	d050      	beq.n	8003f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ec8:	f7fd ff72 	bl	8001db0 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	69fa      	ldr	r2, [r7, #28]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d902      	bls.n	8003ede <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d13d      	bne.n	8003f5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003eec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ef6:	d111      	bne.n	8003f1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f00:	d004      	beq.n	8003f0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0a:	d107      	bne.n	8003f1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f24:	d10f      	bne.n	8003f46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e017      	b.n	8003f8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4013      	ands	r3, r2
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	bf0c      	ite	eq
 8003f7a:	2301      	moveq	r3, #1
 8003f7c:	2300      	movne	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d19b      	bne.n	8003ec0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3720      	adds	r7, #32
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000000 	.word	0x20000000

08003f98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2201      	movs	r2, #1
 8003fac:	2102      	movs	r1, #2
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f7ff ff6a 	bl	8003e88 <SPI_WaitFlagStateUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d007      	beq.n	8003fca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbe:	f043 0220 	orr.w	r2, r3, #32
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e032      	b.n	8004030 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fca:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <SPI_EndRxTxTransaction+0xa0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1b      	ldr	r2, [pc, #108]	; (800403c <SPI_EndRxTxTransaction+0xa4>)
 8003fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd4:	0d5b      	lsrs	r3, r3, #21
 8003fd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fda:	fb02 f303 	mul.w	r3, r2, r3
 8003fde:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fe8:	d112      	bne.n	8004010 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2180      	movs	r1, #128	; 0x80
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f7ff ff47 	bl	8003e88 <SPI_WaitFlagStateUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d016      	beq.n	800402e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004004:	f043 0220 	orr.w	r2, r3, #32
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e00f      	b.n	8004030 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	3b01      	subs	r3, #1
 800401a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004026:	2b80      	cmp	r3, #128	; 0x80
 8004028:	d0f2      	beq.n	8004010 <SPI_EndRxTxTransaction+0x78>
 800402a:	e000      	b.n	800402e <SPI_EndRxTxTransaction+0x96>
        break;
 800402c:	bf00      	nop
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000000 	.word	0x20000000
 800403c:	165e9f81 	.word	0x165e9f81

08004040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e041      	b.n	80040d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f839 	bl	80040de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3304      	adds	r3, #4
 800407c:	4619      	mov	r1, r3
 800407e:	4610      	mov	r0, r2
 8004080:	f000 fb9a 	bl	80047b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	d001      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e04e      	b.n	80041aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a23      	ldr	r2, [pc, #140]	; (80041b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d022      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004136:	d01d      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1f      	ldr	r2, [pc, #124]	; (80041bc <HAL_TIM_Base_Start_IT+0xc8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d018      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d013      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a1c      	ldr	r2, [pc, #112]	; (80041c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00e      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1b      	ldr	r2, [pc, #108]	; (80041c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d009      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a19      	ldr	r2, [pc, #100]	; (80041cc <HAL_TIM_Base_Start_IT+0xd8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d004      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x80>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d111      	bne.n	8004198 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b06      	cmp	r3, #6
 8004184:	d010      	beq.n	80041a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0201 	orr.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004196:	e007      	b.n	80041a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40010000 	.word	0x40010000
 80041bc:	40000400 	.word	0x40000400
 80041c0:	40000800 	.word	0x40000800
 80041c4:	40000c00 	.word	0x40000c00
 80041c8:	40010400 	.word	0x40010400
 80041cc:	40014000 	.word	0x40014000
 80041d0:	40001800 	.word	0x40001800

080041d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e041      	b.n	800426a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fd f982 	bl	8001504 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f000 fad0 	bl	80047b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d109      	bne.n	8004298 <HAL_TIM_PWM_Start+0x24>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	bf14      	ite	ne
 8004290:	2301      	movne	r3, #1
 8004292:	2300      	moveq	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	e022      	b.n	80042de <HAL_TIM_PWM_Start+0x6a>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b04      	cmp	r3, #4
 800429c:	d109      	bne.n	80042b2 <HAL_TIM_PWM_Start+0x3e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	bf14      	ite	ne
 80042aa:	2301      	movne	r3, #1
 80042ac:	2300      	moveq	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	e015      	b.n	80042de <HAL_TIM_PWM_Start+0x6a>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d109      	bne.n	80042cc <HAL_TIM_PWM_Start+0x58>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	bf14      	ite	ne
 80042c4:	2301      	movne	r3, #1
 80042c6:	2300      	moveq	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	e008      	b.n	80042de <HAL_TIM_PWM_Start+0x6a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	bf14      	ite	ne
 80042d8:	2301      	movne	r3, #1
 80042da:	2300      	moveq	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e07c      	b.n	80043e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d104      	bne.n	80042f6 <HAL_TIM_PWM_Start+0x82>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042f4:	e013      	b.n	800431e <HAL_TIM_PWM_Start+0xaa>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d104      	bne.n	8004306 <HAL_TIM_PWM_Start+0x92>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004304:	e00b      	b.n	800431e <HAL_TIM_PWM_Start+0xaa>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b08      	cmp	r3, #8
 800430a:	d104      	bne.n	8004316 <HAL_TIM_PWM_Start+0xa2>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004314:	e003      	b.n	800431e <HAL_TIM_PWM_Start+0xaa>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2202      	movs	r2, #2
 800431a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2201      	movs	r2, #1
 8004324:	6839      	ldr	r1, [r7, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fca2 	bl	8004c70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a2d      	ldr	r2, [pc, #180]	; (80043e8 <HAL_TIM_PWM_Start+0x174>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d004      	beq.n	8004340 <HAL_TIM_PWM_Start+0xcc>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a2c      	ldr	r2, [pc, #176]	; (80043ec <HAL_TIM_PWM_Start+0x178>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d101      	bne.n	8004344 <HAL_TIM_PWM_Start+0xd0>
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <HAL_TIM_PWM_Start+0xd2>
 8004344:	2300      	movs	r3, #0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d007      	beq.n	800435a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004358:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a22      	ldr	r2, [pc, #136]	; (80043e8 <HAL_TIM_PWM_Start+0x174>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d022      	beq.n	80043aa <HAL_TIM_PWM_Start+0x136>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436c:	d01d      	beq.n	80043aa <HAL_TIM_PWM_Start+0x136>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1f      	ldr	r2, [pc, #124]	; (80043f0 <HAL_TIM_PWM_Start+0x17c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d018      	beq.n	80043aa <HAL_TIM_PWM_Start+0x136>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1d      	ldr	r2, [pc, #116]	; (80043f4 <HAL_TIM_PWM_Start+0x180>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d013      	beq.n	80043aa <HAL_TIM_PWM_Start+0x136>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <HAL_TIM_PWM_Start+0x184>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00e      	beq.n	80043aa <HAL_TIM_PWM_Start+0x136>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a16      	ldr	r2, [pc, #88]	; (80043ec <HAL_TIM_PWM_Start+0x178>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d009      	beq.n	80043aa <HAL_TIM_PWM_Start+0x136>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a18      	ldr	r2, [pc, #96]	; (80043fc <HAL_TIM_PWM_Start+0x188>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d004      	beq.n	80043aa <HAL_TIM_PWM_Start+0x136>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a16      	ldr	r2, [pc, #88]	; (8004400 <HAL_TIM_PWM_Start+0x18c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d111      	bne.n	80043ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b06      	cmp	r3, #6
 80043ba:	d010      	beq.n	80043de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043cc:	e007      	b.n	80043de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0201 	orr.w	r2, r2, #1
 80043dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40010000 	.word	0x40010000
 80043ec:	40010400 	.word	0x40010400
 80043f0:	40000400 	.word	0x40000400
 80043f4:	40000800 	.word	0x40000800
 80043f8:	40000c00 	.word	0x40000c00
 80043fc:	40014000 	.word	0x40014000
 8004400:	40001800 	.word	0x40001800

08004404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d020      	beq.n	8004468 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01b      	beq.n	8004468 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0202 	mvn.w	r2, #2
 8004438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f994 	bl	800477c <HAL_TIM_IC_CaptureCallback>
 8004454:	e005      	b.n	8004462 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f986 	bl	8004768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f997 	bl	8004790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d020      	beq.n	80044b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01b      	beq.n	80044b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0204 	mvn.w	r2, #4
 8004484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f96e 	bl	800477c <HAL_TIM_IC_CaptureCallback>
 80044a0:	e005      	b.n	80044ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f960 	bl	8004768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f971 	bl	8004790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d020      	beq.n	8004500 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01b      	beq.n	8004500 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0208 	mvn.w	r2, #8
 80044d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2204      	movs	r2, #4
 80044d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f948 	bl	800477c <HAL_TIM_IC_CaptureCallback>
 80044ec:	e005      	b.n	80044fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f93a 	bl	8004768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f94b 	bl	8004790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b00      	cmp	r3, #0
 8004508:	d020      	beq.n	800454c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01b      	beq.n	800454c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0210 	mvn.w	r2, #16
 800451c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2208      	movs	r2, #8
 8004522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f922 	bl	800477c <HAL_TIM_IC_CaptureCallback>
 8004538:	e005      	b.n	8004546 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f914 	bl	8004768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f925 	bl	8004790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00c      	beq.n	8004570 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0201 	mvn.w	r2, #1
 8004568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fc face 	bl	8000b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00c      	beq.n	8004594 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800458c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fc6c 	bl	8004e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00c      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f8f6 	bl	80047a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00c      	beq.n	80045dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d007      	beq.n	80045dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0220 	mvn.w	r2, #32
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fc3e 	bl	8004e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045dc:	bf00      	nop
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045fe:	2302      	movs	r3, #2
 8004600:	e0ae      	b.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b0c      	cmp	r3, #12
 800460e:	f200 809f 	bhi.w	8004750 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004612:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004618:	0800464d 	.word	0x0800464d
 800461c:	08004751 	.word	0x08004751
 8004620:	08004751 	.word	0x08004751
 8004624:	08004751 	.word	0x08004751
 8004628:	0800468d 	.word	0x0800468d
 800462c:	08004751 	.word	0x08004751
 8004630:	08004751 	.word	0x08004751
 8004634:	08004751 	.word	0x08004751
 8004638:	080046cf 	.word	0x080046cf
 800463c:	08004751 	.word	0x08004751
 8004640:	08004751 	.word	0x08004751
 8004644:	08004751 	.word	0x08004751
 8004648:	0800470f 	.word	0x0800470f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	4618      	mov	r0, r3
 8004654:	f000 f95c 	bl	8004910 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0208 	orr.w	r2, r2, #8
 8004666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0204 	bic.w	r2, r2, #4
 8004676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6999      	ldr	r1, [r3, #24]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	619a      	str	r2, [r3, #24]
      break;
 800468a:	e064      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f9ac 	bl	80049f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6999      	ldr	r1, [r3, #24]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	021a      	lsls	r2, r3, #8
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	619a      	str	r2, [r3, #24]
      break;
 80046cc:	e043      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68b9      	ldr	r1, [r7, #8]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fa01 	bl	8004adc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69da      	ldr	r2, [r3, #28]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 0208 	orr.w	r2, r2, #8
 80046e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69da      	ldr	r2, [r3, #28]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0204 	bic.w	r2, r2, #4
 80046f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69d9      	ldr	r1, [r3, #28]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	61da      	str	r2, [r3, #28]
      break;
 800470c:	e023      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fa55 	bl	8004bc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69da      	ldr	r2, [r3, #28]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69d9      	ldr	r1, [r3, #28]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	021a      	lsls	r2, r3, #8
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	61da      	str	r2, [r3, #28]
      break;
 800474e:	e002      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	75fb      	strb	r3, [r7, #23]
      break;
 8004754:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800475e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a46      	ldr	r2, [pc, #280]	; (80048e4 <TIM_Base_SetConfig+0x12c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <TIM_Base_SetConfig+0x40>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d6:	d00f      	beq.n	80047f8 <TIM_Base_SetConfig+0x40>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a43      	ldr	r2, [pc, #268]	; (80048e8 <TIM_Base_SetConfig+0x130>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00b      	beq.n	80047f8 <TIM_Base_SetConfig+0x40>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a42      	ldr	r2, [pc, #264]	; (80048ec <TIM_Base_SetConfig+0x134>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d007      	beq.n	80047f8 <TIM_Base_SetConfig+0x40>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a41      	ldr	r2, [pc, #260]	; (80048f0 <TIM_Base_SetConfig+0x138>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d003      	beq.n	80047f8 <TIM_Base_SetConfig+0x40>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a40      	ldr	r2, [pc, #256]	; (80048f4 <TIM_Base_SetConfig+0x13c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d108      	bne.n	800480a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a35      	ldr	r2, [pc, #212]	; (80048e4 <TIM_Base_SetConfig+0x12c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d02b      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004818:	d027      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a32      	ldr	r2, [pc, #200]	; (80048e8 <TIM_Base_SetConfig+0x130>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d023      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a31      	ldr	r2, [pc, #196]	; (80048ec <TIM_Base_SetConfig+0x134>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01f      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a30      	ldr	r2, [pc, #192]	; (80048f0 <TIM_Base_SetConfig+0x138>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01b      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a2f      	ldr	r2, [pc, #188]	; (80048f4 <TIM_Base_SetConfig+0x13c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d017      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a2e      	ldr	r2, [pc, #184]	; (80048f8 <TIM_Base_SetConfig+0x140>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a2d      	ldr	r2, [pc, #180]	; (80048fc <TIM_Base_SetConfig+0x144>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00f      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2c      	ldr	r2, [pc, #176]	; (8004900 <TIM_Base_SetConfig+0x148>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00b      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2b      	ldr	r2, [pc, #172]	; (8004904 <TIM_Base_SetConfig+0x14c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d007      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2a      	ldr	r2, [pc, #168]	; (8004908 <TIM_Base_SetConfig+0x150>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d003      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a29      	ldr	r2, [pc, #164]	; (800490c <TIM_Base_SetConfig+0x154>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d108      	bne.n	800487c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a10      	ldr	r2, [pc, #64]	; (80048e4 <TIM_Base_SetConfig+0x12c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d003      	beq.n	80048b0 <TIM_Base_SetConfig+0xf8>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a12      	ldr	r2, [pc, #72]	; (80048f4 <TIM_Base_SetConfig+0x13c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d103      	bne.n	80048b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d105      	bne.n	80048d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f023 0201 	bic.w	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	611a      	str	r2, [r3, #16]
  }
}
 80048d6:	bf00      	nop
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800
 80048f0:	40000c00 	.word	0x40000c00
 80048f4:	40010400 	.word	0x40010400
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40014400 	.word	0x40014400
 8004900:	40014800 	.word	0x40014800
 8004904:	40001800 	.word	0x40001800
 8004908:	40001c00 	.word	0x40001c00
 800490c:	40002000 	.word	0x40002000

08004910 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	f023 0201 	bic.w	r2, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0303 	bic.w	r3, r3, #3
 8004946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f023 0302 	bic.w	r3, r3, #2
 8004958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a20      	ldr	r2, [pc, #128]	; (80049e8 <TIM_OC1_SetConfig+0xd8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d003      	beq.n	8004974 <TIM_OC1_SetConfig+0x64>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a1f      	ldr	r2, [pc, #124]	; (80049ec <TIM_OC1_SetConfig+0xdc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d10c      	bne.n	800498e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f023 0308 	bic.w	r3, r3, #8
 800497a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f023 0304 	bic.w	r3, r3, #4
 800498c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a15      	ldr	r2, [pc, #84]	; (80049e8 <TIM_OC1_SetConfig+0xd8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d003      	beq.n	800499e <TIM_OC1_SetConfig+0x8e>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a14      	ldr	r2, [pc, #80]	; (80049ec <TIM_OC1_SetConfig+0xdc>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d111      	bne.n	80049c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	621a      	str	r2, [r3, #32]
}
 80049dc:	bf00      	nop
 80049de:	371c      	adds	r7, #28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	40010000 	.word	0x40010000
 80049ec:	40010400 	.word	0x40010400

080049f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f023 0210 	bic.w	r2, r3, #16
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f023 0320 	bic.w	r3, r3, #32
 8004a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a22      	ldr	r2, [pc, #136]	; (8004ad4 <TIM_OC2_SetConfig+0xe4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_OC2_SetConfig+0x68>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a21      	ldr	r2, [pc, #132]	; (8004ad8 <TIM_OC2_SetConfig+0xe8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d10d      	bne.n	8004a74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a17      	ldr	r2, [pc, #92]	; (8004ad4 <TIM_OC2_SetConfig+0xe4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_OC2_SetConfig+0x94>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a16      	ldr	r2, [pc, #88]	; (8004ad8 <TIM_OC2_SetConfig+0xe8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d113      	bne.n	8004aac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	621a      	str	r2, [r3, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40010000 	.word	0x40010000
 8004ad8:	40010400 	.word	0x40010400

08004adc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0303 	bic.w	r3, r3, #3
 8004b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a21      	ldr	r2, [pc, #132]	; (8004bbc <TIM_OC3_SetConfig+0xe0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <TIM_OC3_SetConfig+0x66>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a20      	ldr	r2, [pc, #128]	; (8004bc0 <TIM_OC3_SetConfig+0xe4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d10d      	bne.n	8004b5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a16      	ldr	r2, [pc, #88]	; (8004bbc <TIM_OC3_SetConfig+0xe0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d003      	beq.n	8004b6e <TIM_OC3_SetConfig+0x92>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <TIM_OC3_SetConfig+0xe4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d113      	bne.n	8004b96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	621a      	str	r2, [r3, #32]
}
 8004bb0:	bf00      	nop
 8004bb2:	371c      	adds	r7, #28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	40010000 	.word	0x40010000
 8004bc0:	40010400 	.word	0x40010400

08004bc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	031b      	lsls	r3, r3, #12
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a12      	ldr	r2, [pc, #72]	; (8004c68 <TIM_OC4_SetConfig+0xa4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_OC4_SetConfig+0x68>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a11      	ldr	r2, [pc, #68]	; (8004c6c <TIM_OC4_SetConfig+0xa8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d109      	bne.n	8004c40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	019b      	lsls	r3, r3, #6
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	621a      	str	r2, [r3, #32]
}
 8004c5a:	bf00      	nop
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40010400 	.word	0x40010400

08004c70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	2201      	movs	r2, #1
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a1a      	ldr	r2, [r3, #32]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	43db      	mvns	r3, r3
 8004c92:	401a      	ands	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a1a      	ldr	r2, [r3, #32]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 031f 	and.w	r3, r3, #31
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	621a      	str	r2, [r3, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
	...

08004cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e05a      	b.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a21      	ldr	r2, [pc, #132]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d022      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d20:	d01d      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a1d      	ldr	r2, [pc, #116]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d018      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a1b      	ldr	r2, [pc, #108]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d013      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1a      	ldr	r2, [pc, #104]	; (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00e      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a18      	ldr	r2, [pc, #96]	; (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d009      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a17      	ldr	r2, [pc, #92]	; (8004dac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d004      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a15      	ldr	r2, [pc, #84]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d10c      	bne.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40010000 	.word	0x40010000
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	40000800 	.word	0x40000800
 8004da4:	40000c00 	.word	0x40000c00
 8004da8:	40010400 	.word	0x40010400
 8004dac:	40014000 	.word	0x40014000
 8004db0:	40001800 	.word	0x40001800

08004db4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e03d      	b.n	8004e4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e042      	b.n	8004f18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fc fdda 	bl	8001a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2224      	movs	r2, #36	; 0x24
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 ff59 	bl	8005d7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695a      	ldr	r2, [r3, #20]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08a      	sub	sp, #40	; 0x28
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d175      	bne.n	800502c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <HAL_UART_Transmit+0x2c>
 8004f46:	88fb      	ldrh	r3, [r7, #6]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e06e      	b.n	800502e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2221      	movs	r2, #33	; 0x21
 8004f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f5e:	f7fc ff27 	bl	8001db0 <HAL_GetTick>
 8004f62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	88fa      	ldrh	r2, [r7, #6]
 8004f68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	88fa      	ldrh	r2, [r7, #6]
 8004f6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f78:	d108      	bne.n	8004f8c <HAL_UART_Transmit+0x6c>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d104      	bne.n	8004f8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	61bb      	str	r3, [r7, #24]
 8004f8a:	e003      	b.n	8004f94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f90:	2300      	movs	r3, #0
 8004f92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f94:	e02e      	b.n	8004ff4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2180      	movs	r1, #128	; 0x80
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 fc31 	bl	8005808 <UART_WaitOnFlagUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e03a      	b.n	800502e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10b      	bne.n	8004fd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	3302      	adds	r3, #2
 8004fd2:	61bb      	str	r3, [r7, #24]
 8004fd4:	e007      	b.n	8004fe6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	781a      	ldrb	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1cb      	bne.n	8004f96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2200      	movs	r2, #0
 8005006:	2140      	movs	r1, #64	; 0x40
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 fbfd 	bl	8005808 <UART_WaitOnFlagUntilTimeout>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e006      	b.n	800502e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	e000      	b.n	800502e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800502c:	2302      	movs	r3, #2
  }
}
 800502e:	4618      	mov	r0, r3
 8005030:	3720      	adds	r7, #32
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	60f8      	str	r0, [r7, #12]
 800503e:	60b9      	str	r1, [r7, #8]
 8005040:	4613      	mov	r3, r2
 8005042:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b20      	cmp	r3, #32
 800504e:	d112      	bne.n	8005076 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <HAL_UART_Receive_DMA+0x26>
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e00b      	b.n	8005078 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005066:	88fb      	ldrh	r3, [r7, #6]
 8005068:	461a      	mov	r2, r3
 800506a:	68b9      	ldr	r1, [r7, #8]
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fc25 	bl	80058bc <UART_Start_Receive_DMA>
 8005072:	4603      	mov	r3, r0
 8005074:	e000      	b.n	8005078 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005076:	2302      	movs	r3, #2
  }
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b0ba      	sub	sp, #232	; 0xe8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80050be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10f      	bne.n	80050e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d009      	beq.n	80050e6 <HAL_UART_IRQHandler+0x66>
 80050d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fd8d 	bl	8005bfe <UART_Receive_IT>
      return;
 80050e4:	e25b      	b.n	800559e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 80de 	beq.w	80052ac <HAL_UART_IRQHandler+0x22c>
 80050f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d106      	bne.n	800510a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005100:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80d1 	beq.w	80052ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800510a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00b      	beq.n	800512e <HAL_UART_IRQHandler+0xae>
 8005116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d005      	beq.n	800512e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	f043 0201 	orr.w	r2, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800512e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00b      	beq.n	8005152 <HAL_UART_IRQHandler+0xd2>
 800513a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514a:	f043 0202 	orr.w	r2, r3, #2
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00b      	beq.n	8005176 <HAL_UART_IRQHandler+0xf6>
 800515e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516e:	f043 0204 	orr.w	r2, r3, #4
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d011      	beq.n	80051a6 <HAL_UART_IRQHandler+0x126>
 8005182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d105      	bne.n	800519a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800518e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d005      	beq.n	80051a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519e:	f043 0208 	orr.w	r2, r3, #8
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 81f2 	beq.w	8005594 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b4:	f003 0320 	and.w	r3, r3, #32
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <HAL_UART_IRQHandler+0x14e>
 80051bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fd18 	bl	8005bfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d8:	2b40      	cmp	r3, #64	; 0x40
 80051da:	bf0c      	ite	eq
 80051dc:	2301      	moveq	r3, #1
 80051de:	2300      	movne	r3, #0
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d103      	bne.n	80051fa <HAL_UART_IRQHandler+0x17a>
 80051f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d04f      	beq.n	800529a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fc20 	bl	8005a40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520a:	2b40      	cmp	r3, #64	; 0x40
 800520c:	d141      	bne.n	8005292 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3314      	adds	r3, #20
 8005214:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800521c:	e853 3f00 	ldrex	r3, [r3]
 8005220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005224:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800522c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3314      	adds	r3, #20
 8005236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800523a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800523e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1d9      	bne.n	800520e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525e:	2b00      	cmp	r3, #0
 8005260:	d013      	beq.n	800528a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005266:	4a7e      	ldr	r2, [pc, #504]	; (8005460 <HAL_UART_IRQHandler+0x3e0>)
 8005268:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526e:	4618      	mov	r0, r3
 8005270:	f7fd f802 	bl	8002278 <HAL_DMA_Abort_IT>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d016      	beq.n	80052a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005284:	4610      	mov	r0, r2
 8005286:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005288:	e00e      	b.n	80052a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f9a8 	bl	80055e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005290:	e00a      	b.n	80052a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f9a4 	bl	80055e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005298:	e006      	b.n	80052a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f9a0 	bl	80055e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80052a6:	e175      	b.n	8005594 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a8:	bf00      	nop
    return;
 80052aa:	e173      	b.n	8005594 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	f040 814f 	bne.w	8005554 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80052b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ba:	f003 0310 	and.w	r3, r3, #16
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 8148 	beq.w	8005554 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80052c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c8:	f003 0310 	and.w	r3, r3, #16
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8141 	beq.w	8005554 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052d2:	2300      	movs	r3, #0
 80052d4:	60bb      	str	r3, [r7, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60bb      	str	r3, [r7, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	60bb      	str	r3, [r7, #8]
 80052e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f2:	2b40      	cmp	r3, #64	; 0x40
 80052f4:	f040 80b6 	bne.w	8005464 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005304:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8145 	beq.w	8005598 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005316:	429a      	cmp	r2, r3
 8005318:	f080 813e 	bcs.w	8005598 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005322:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800532e:	f000 8088 	beq.w	8005442 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	330c      	adds	r3, #12
 8005338:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005348:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800534c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005350:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	330c      	adds	r3, #12
 800535a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800535e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005362:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800536a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1d9      	bne.n	8005332 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3314      	adds	r3, #20
 8005384:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800538e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3314      	adds	r3, #20
 800539e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80053a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80053a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80053aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80053b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e1      	bne.n	800537e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3314      	adds	r3, #20
 80053c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80053ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3314      	adds	r3, #20
 80053da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e3      	bne.n	80053ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	330c      	adds	r3, #12
 8005406:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005412:	f023 0310 	bic.w	r3, r3, #16
 8005416:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	330c      	adds	r3, #12
 8005420:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005424:	65ba      	str	r2, [r7, #88]	; 0x58
 8005426:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800542a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e3      	bne.n	8005400 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543c:	4618      	mov	r0, r3
 800543e:	f7fc feab 	bl	8002198 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005450:	b29b      	uxth	r3, r3
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	b29b      	uxth	r3, r3
 8005456:	4619      	mov	r1, r3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f8cb 	bl	80055f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800545e:	e09b      	b.n	8005598 <HAL_UART_IRQHandler+0x518>
 8005460:	08005b07 	.word	0x08005b07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800546c:	b29b      	uxth	r3, r3
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005478:	b29b      	uxth	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 808e 	beq.w	800559c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8089 	beq.w	800559c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	330c      	adds	r3, #12
 8005490:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800549a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	330c      	adds	r3, #12
 80054aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80054ae:	647a      	str	r2, [r7, #68]	; 0x44
 80054b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e3      	bne.n	800548a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3314      	adds	r3, #20
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	623b      	str	r3, [r7, #32]
   return(result);
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	f023 0301 	bic.w	r3, r3, #1
 80054d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3314      	adds	r3, #20
 80054e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054e6:	633a      	str	r2, [r7, #48]	; 0x30
 80054e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ee:	e841 2300 	strex	r3, r2, [r1]
 80054f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1e3      	bne.n	80054c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	330c      	adds	r3, #12
 800550e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	e853 3f00 	ldrex	r3, [r3]
 8005516:	60fb      	str	r3, [r7, #12]
   return(result);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0310 	bic.w	r3, r3, #16
 800551e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	330c      	adds	r3, #12
 8005528:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800552c:	61fa      	str	r2, [r7, #28]
 800552e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	69b9      	ldr	r1, [r7, #24]
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	617b      	str	r3, [r7, #20]
   return(result);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e3      	bne.n	8005508 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005546:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800554a:	4619      	mov	r1, r3
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f851 	bl	80055f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005552:	e023      	b.n	800559c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555c:	2b00      	cmp	r3, #0
 800555e:	d009      	beq.n	8005574 <HAL_UART_IRQHandler+0x4f4>
 8005560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fade 	bl	8005b2e <UART_Transmit_IT>
    return;
 8005572:	e014      	b.n	800559e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00e      	beq.n	800559e <HAL_UART_IRQHandler+0x51e>
 8005580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fb1e 	bl	8005bce <UART_EndTransmit_IT>
    return;
 8005592:	e004      	b.n	800559e <HAL_UART_IRQHandler+0x51e>
    return;
 8005594:	bf00      	nop
 8005596:	e002      	b.n	800559e <HAL_UART_IRQHandler+0x51e>
      return;
 8005598:	bf00      	nop
 800559a:	e000      	b.n	800559e <HAL_UART_IRQHandler+0x51e>
      return;
 800559c:	bf00      	nop
  }
}
 800559e:	37e8      	adds	r7, #232	; 0xe8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b09c      	sub	sp, #112	; 0x70
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005618:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005624:	2b00      	cmp	r3, #0
 8005626:	d172      	bne.n	800570e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562a:	2200      	movs	r2, #0
 800562c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800562e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	330c      	adds	r3, #12
 8005634:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800563e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005644:	66bb      	str	r3, [r7, #104]	; 0x68
 8005646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	330c      	adds	r3, #12
 800564c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800564e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005650:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005652:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005654:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005656:	e841 2300 	strex	r3, r2, [r1]
 800565a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800565c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1e5      	bne.n	800562e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3314      	adds	r3, #20
 8005668:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005674:	f023 0301 	bic.w	r3, r3, #1
 8005678:	667b      	str	r3, [r7, #100]	; 0x64
 800567a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3314      	adds	r3, #20
 8005680:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005682:	647a      	str	r2, [r7, #68]	; 0x44
 8005684:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e5      	bne.n	8005662 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3314      	adds	r3, #20
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	623b      	str	r3, [r7, #32]
   return(result);
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ac:	663b      	str	r3, [r7, #96]	; 0x60
 80056ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3314      	adds	r3, #20
 80056b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056b6:	633a      	str	r2, [r7, #48]	; 0x30
 80056b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056be:	e841 2300 	strex	r3, r2, [r1]
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1e5      	bne.n	8005696 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d119      	bne.n	800570e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	330c      	adds	r3, #12
 80056e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f023 0310 	bic.w	r3, r3, #16
 80056f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	330c      	adds	r3, #12
 80056f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056fa:	61fa      	str	r2, [r7, #28]
 80056fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	69b9      	ldr	r1, [r7, #24]
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	617b      	str	r3, [r7, #20]
   return(result);
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e5      	bne.n	80056da <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800570e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005710:	2200      	movs	r2, #0
 8005712:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	2b01      	cmp	r3, #1
 800571a:	d106      	bne.n	800572a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800571c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005720:	4619      	mov	r1, r3
 8005722:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005724:	f7ff ff66 	bl	80055f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005728:	e002      	b.n	8005730 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800572a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800572c:	f7ff ff44 	bl	80055b8 <HAL_UART_RxCpltCallback>
}
 8005730:	bf00      	nop
 8005732:	3770      	adds	r7, #112	; 0x70
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005744:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	2b01      	cmp	r3, #1
 8005752:	d108      	bne.n	8005766 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005758:	085b      	lsrs	r3, r3, #1
 800575a:	b29b      	uxth	r3, r3
 800575c:	4619      	mov	r1, r3
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f7ff ff48 	bl	80055f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005764:	e002      	b.n	800576c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f7ff ff30 	bl	80055cc <HAL_UART_RxHalfCpltCallback>
}
 800576c:	bf00      	nop
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005790:	2b80      	cmp	r3, #128	; 0x80
 8005792:	bf0c      	ite	eq
 8005794:	2301      	moveq	r3, #1
 8005796:	2300      	movne	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b21      	cmp	r3, #33	; 0x21
 80057a6:	d108      	bne.n	80057ba <UART_DMAError+0x46>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d005      	beq.n	80057ba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2200      	movs	r2, #0
 80057b2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80057b4:	68b8      	ldr	r0, [r7, #8]
 80057b6:	f000 f91b 	bl	80059f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c4:	2b40      	cmp	r3, #64	; 0x40
 80057c6:	bf0c      	ite	eq
 80057c8:	2301      	moveq	r3, #1
 80057ca:	2300      	movne	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b22      	cmp	r3, #34	; 0x22
 80057da:	d108      	bne.n	80057ee <UART_DMAError+0x7a>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d005      	beq.n	80057ee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2200      	movs	r2, #0
 80057e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80057e8:	68b8      	ldr	r0, [r7, #8]
 80057ea:	f000 f929 	bl	8005a40 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f2:	f043 0210 	orr.w	r2, r3, #16
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057fa:	68b8      	ldr	r0, [r7, #8]
 80057fc:	f7ff fef0 	bl	80055e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005800:	bf00      	nop
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	4613      	mov	r3, r2
 8005816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005818:	e03b      	b.n	8005892 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005820:	d037      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005822:	f7fc fac5 	bl	8001db0 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	6a3a      	ldr	r2, [r7, #32]
 800582e:	429a      	cmp	r2, r3
 8005830:	d302      	bcc.n	8005838 <UART_WaitOnFlagUntilTimeout+0x30>
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e03a      	b.n	80058b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	d023      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0x8a>
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b80      	cmp	r3, #128	; 0x80
 800584e:	d020      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b40      	cmp	r3, #64	; 0x40
 8005854:	d01d      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0308 	and.w	r3, r3, #8
 8005860:	2b08      	cmp	r3, #8
 8005862:	d116      	bne.n	8005892 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 f8e0 	bl	8005a40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2208      	movs	r2, #8
 8005884:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e00f      	b.n	80058b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4013      	ands	r3, r2
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	429a      	cmp	r2, r3
 80058a0:	bf0c      	ite	eq
 80058a2:	2301      	moveq	r3, #1
 80058a4:	2300      	movne	r3, #0
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	461a      	mov	r2, r3
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d0b4      	beq.n	800581a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b098      	sub	sp, #96	; 0x60
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	4613      	mov	r3, r2
 80058c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	88fa      	ldrh	r2, [r7, #6]
 80058d4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2222      	movs	r2, #34	; 0x22
 80058e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e8:	4a3e      	ldr	r2, [pc, #248]	; (80059e4 <UART_Start_Receive_DMA+0x128>)
 80058ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f0:	4a3d      	ldr	r2, [pc, #244]	; (80059e8 <UART_Start_Receive_DMA+0x12c>)
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f8:	4a3c      	ldr	r2, [pc, #240]	; (80059ec <UART_Start_Receive_DMA+0x130>)
 80058fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005900:	2200      	movs	r2, #0
 8005902:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005904:	f107 0308 	add.w	r3, r7, #8
 8005908:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3304      	adds	r3, #4
 8005914:	4619      	mov	r1, r3
 8005916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	88fb      	ldrh	r3, [r7, #6]
 800591c:	f7fc fbe4 	bl	80020e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005920:	2300      	movs	r3, #0
 8005922:	613b      	str	r3, [r7, #16]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	613b      	str	r3, [r7, #16]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d019      	beq.n	8005972 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	330c      	adds	r3, #12
 8005944:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800594e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005954:	65bb      	str	r3, [r7, #88]	; 0x58
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	330c      	adds	r3, #12
 800595c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800595e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005960:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800596c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e5      	bne.n	800593e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3314      	adds	r3, #20
 8005978:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597c:	e853 3f00 	ldrex	r3, [r3]
 8005980:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	657b      	str	r3, [r7, #84]	; 0x54
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3314      	adds	r3, #20
 8005990:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005992:	63ba      	str	r2, [r7, #56]	; 0x38
 8005994:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005996:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800599a:	e841 2300 	strex	r3, r2, [r1]
 800599e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1e5      	bne.n	8005972 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3314      	adds	r3, #20
 80059ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	e853 3f00 	ldrex	r3, [r3]
 80059b4:	617b      	str	r3, [r7, #20]
   return(result);
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059bc:	653b      	str	r3, [r7, #80]	; 0x50
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3314      	adds	r3, #20
 80059c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059c6:	627a      	str	r2, [r7, #36]	; 0x24
 80059c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ca:	6a39      	ldr	r1, [r7, #32]
 80059cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1e5      	bne.n	80059a6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3760      	adds	r7, #96	; 0x60
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	0800560d 	.word	0x0800560d
 80059e8:	08005739 	.word	0x08005739
 80059ec:	08005775 	.word	0x08005775

080059f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b089      	sub	sp, #36	; 0x24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	e853 3f00 	ldrex	r3, [r3]
 8005a06:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a0e:	61fb      	str	r3, [r7, #28]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	330c      	adds	r3, #12
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	61ba      	str	r2, [r7, #24]
 8005a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	6979      	ldr	r1, [r7, #20]
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	613b      	str	r3, [r7, #16]
   return(result);
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e5      	bne.n	80059f8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005a34:	bf00      	nop
 8005a36:	3724      	adds	r7, #36	; 0x24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b095      	sub	sp, #84	; 0x54
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	330c      	adds	r3, #12
 8005a4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a52:	e853 3f00 	ldrex	r3, [r3]
 8005a56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	330c      	adds	r3, #12
 8005a66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a68:	643a      	str	r2, [r7, #64]	; 0x40
 8005a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a70:	e841 2300 	strex	r3, r2, [r1]
 8005a74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e5      	bne.n	8005a48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3314      	adds	r3, #20
 8005a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	f023 0301 	bic.w	r3, r3, #1
 8005a92:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3314      	adds	r3, #20
 8005a9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aa4:	e841 2300 	strex	r3, r2, [r1]
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e5      	bne.n	8005a7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d119      	bne.n	8005aec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	330c      	adds	r3, #12
 8005abe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	e853 3f00 	ldrex	r3, [r3]
 8005ac6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f023 0310 	bic.w	r3, r3, #16
 8005ace:	647b      	str	r3, [r7, #68]	; 0x44
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	330c      	adds	r3, #12
 8005ad6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ad8:	61ba      	str	r2, [r7, #24]
 8005ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005adc:	6979      	ldr	r1, [r7, #20]
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	e841 2300 	strex	r3, r2, [r1]
 8005ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e5      	bne.n	8005ab8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005afa:	bf00      	nop
 8005afc:	3754      	adds	r7, #84	; 0x54
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7ff fd5d 	bl	80055e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b26:	bf00      	nop
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b21      	cmp	r3, #33	; 0x21
 8005b40:	d13e      	bne.n	8005bc0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b4a:	d114      	bne.n	8005b76 <UART_Transmit_IT+0x48>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d110      	bne.n	8005b76 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	1c9a      	adds	r2, r3, #2
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	621a      	str	r2, [r3, #32]
 8005b74:	e008      	b.n	8005b88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	1c59      	adds	r1, r3, #1
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6211      	str	r1, [r2, #32]
 8005b80:	781a      	ldrb	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	4619      	mov	r1, r3
 8005b96:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10f      	bne.n	8005bbc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005baa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e000      	b.n	8005bc2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bc0:	2302      	movs	r3, #2
  }
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005be4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7ff fcd8 	bl	80055a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b08c      	sub	sp, #48	; 0x30
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b22      	cmp	r3, #34	; 0x22
 8005c10:	f040 80ae 	bne.w	8005d70 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1c:	d117      	bne.n	8005c4e <UART_Receive_IT+0x50>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d113      	bne.n	8005c4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c46:	1c9a      	adds	r2, r3, #2
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	629a      	str	r2, [r3, #40]	; 0x28
 8005c4c:	e026      	b.n	8005c9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c52:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c54:	2300      	movs	r3, #0
 8005c56:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c60:	d007      	beq.n	8005c72 <UART_Receive_IT+0x74>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10a      	bne.n	8005c80 <UART_Receive_IT+0x82>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	701a      	strb	r2, [r3, #0]
 8005c7e:	e008      	b.n	8005c92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d15d      	bne.n	8005d6c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0220 	bic.w	r2, r2, #32
 8005cbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695a      	ldr	r2, [r3, #20]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0201 	bic.w	r2, r2, #1
 8005cde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d135      	bne.n	8005d62 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f023 0310 	bic.w	r3, r3, #16
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d1c:	623a      	str	r2, [r7, #32]
 8005d1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d20:	69f9      	ldr	r1, [r7, #28]
 8005d22:	6a3a      	ldr	r2, [r7, #32]
 8005d24:	e841 2300 	strex	r3, r2, [r1]
 8005d28:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e5      	bne.n	8005cfc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0310 	and.w	r3, r3, #16
 8005d3a:	2b10      	cmp	r3, #16
 8005d3c:	d10a      	bne.n	8005d54 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff fc4a 	bl	80055f4 <HAL_UARTEx_RxEventCallback>
 8005d60:	e002      	b.n	8005d68 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff fc28 	bl	80055b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e002      	b.n	8005d72 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	e000      	b.n	8005d72 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d70:	2302      	movs	r3, #2
  }
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3730      	adds	r7, #48	; 0x30
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d80:	b0c0      	sub	sp, #256	; 0x100
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d98:	68d9      	ldr	r1, [r3, #12]
 8005d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	ea40 0301 	orr.w	r3, r0, r1
 8005da4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	431a      	orrs	r2, r3
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005dd4:	f021 010c 	bic.w	r1, r1, #12
 8005dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005de2:	430b      	orrs	r3, r1
 8005de4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df6:	6999      	ldr	r1, [r3, #24]
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	ea40 0301 	orr.w	r3, r0, r1
 8005e02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4b8f      	ldr	r3, [pc, #572]	; (8006048 <UART_SetConfig+0x2cc>)
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d005      	beq.n	8005e1c <UART_SetConfig+0xa0>
 8005e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4b8d      	ldr	r3, [pc, #564]	; (800604c <UART_SetConfig+0x2d0>)
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d104      	bne.n	8005e26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e1c:	f7fc ffd4 	bl	8002dc8 <HAL_RCC_GetPCLK2Freq>
 8005e20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e24:	e003      	b.n	8005e2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e26:	f7fc ffbb 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 8005e2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e38:	f040 810c 	bne.w	8006054 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e40:	2200      	movs	r2, #0
 8005e42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e4e:	4622      	mov	r2, r4
 8005e50:	462b      	mov	r3, r5
 8005e52:	1891      	adds	r1, r2, r2
 8005e54:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e56:	415b      	adcs	r3, r3
 8005e58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e5e:	4621      	mov	r1, r4
 8005e60:	eb12 0801 	adds.w	r8, r2, r1
 8005e64:	4629      	mov	r1, r5
 8005e66:	eb43 0901 	adc.w	r9, r3, r1
 8005e6a:	f04f 0200 	mov.w	r2, #0
 8005e6e:	f04f 0300 	mov.w	r3, #0
 8005e72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e7e:	4690      	mov	r8, r2
 8005e80:	4699      	mov	r9, r3
 8005e82:	4623      	mov	r3, r4
 8005e84:	eb18 0303 	adds.w	r3, r8, r3
 8005e88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e8c:	462b      	mov	r3, r5
 8005e8e:	eb49 0303 	adc.w	r3, r9, r3
 8005e92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ea2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ea6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005eaa:	460b      	mov	r3, r1
 8005eac:	18db      	adds	r3, r3, r3
 8005eae:	653b      	str	r3, [r7, #80]	; 0x50
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	eb42 0303 	adc.w	r3, r2, r3
 8005eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8005eb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ebc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ec0:	f7fa f9a6 	bl	8000210 <__aeabi_uldivmod>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4b61      	ldr	r3, [pc, #388]	; (8006050 <UART_SetConfig+0x2d4>)
 8005eca:	fba3 2302 	umull	r2, r3, r3, r2
 8005ece:	095b      	lsrs	r3, r3, #5
 8005ed0:	011c      	lsls	r4, r3, #4
 8005ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005edc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ee0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ee4:	4642      	mov	r2, r8
 8005ee6:	464b      	mov	r3, r9
 8005ee8:	1891      	adds	r1, r2, r2
 8005eea:	64b9      	str	r1, [r7, #72]	; 0x48
 8005eec:	415b      	adcs	r3, r3
 8005eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ef0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ef4:	4641      	mov	r1, r8
 8005ef6:	eb12 0a01 	adds.w	sl, r2, r1
 8005efa:	4649      	mov	r1, r9
 8005efc:	eb43 0b01 	adc.w	fp, r3, r1
 8005f00:	f04f 0200 	mov.w	r2, #0
 8005f04:	f04f 0300 	mov.w	r3, #0
 8005f08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f14:	4692      	mov	sl, r2
 8005f16:	469b      	mov	fp, r3
 8005f18:	4643      	mov	r3, r8
 8005f1a:	eb1a 0303 	adds.w	r3, sl, r3
 8005f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f22:	464b      	mov	r3, r9
 8005f24:	eb4b 0303 	adc.w	r3, fp, r3
 8005f28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f40:	460b      	mov	r3, r1
 8005f42:	18db      	adds	r3, r3, r3
 8005f44:	643b      	str	r3, [r7, #64]	; 0x40
 8005f46:	4613      	mov	r3, r2
 8005f48:	eb42 0303 	adc.w	r3, r2, r3
 8005f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f56:	f7fa f95b 	bl	8000210 <__aeabi_uldivmod>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4611      	mov	r1, r2
 8005f60:	4b3b      	ldr	r3, [pc, #236]	; (8006050 <UART_SetConfig+0x2d4>)
 8005f62:	fba3 2301 	umull	r2, r3, r3, r1
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	2264      	movs	r2, #100	; 0x64
 8005f6a:	fb02 f303 	mul.w	r3, r2, r3
 8005f6e:	1acb      	subs	r3, r1, r3
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f76:	4b36      	ldr	r3, [pc, #216]	; (8006050 <UART_SetConfig+0x2d4>)
 8005f78:	fba3 2302 	umull	r2, r3, r3, r2
 8005f7c:	095b      	lsrs	r3, r3, #5
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f84:	441c      	add	r4, r3
 8005f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f98:	4642      	mov	r2, r8
 8005f9a:	464b      	mov	r3, r9
 8005f9c:	1891      	adds	r1, r2, r2
 8005f9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fa0:	415b      	adcs	r3, r3
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fa8:	4641      	mov	r1, r8
 8005faa:	1851      	adds	r1, r2, r1
 8005fac:	6339      	str	r1, [r7, #48]	; 0x30
 8005fae:	4649      	mov	r1, r9
 8005fb0:	414b      	adcs	r3, r1
 8005fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005fc0:	4659      	mov	r1, fp
 8005fc2:	00cb      	lsls	r3, r1, #3
 8005fc4:	4651      	mov	r1, sl
 8005fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fca:	4651      	mov	r1, sl
 8005fcc:	00ca      	lsls	r2, r1, #3
 8005fce:	4610      	mov	r0, r2
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4642      	mov	r2, r8
 8005fd6:	189b      	adds	r3, r3, r2
 8005fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fdc:	464b      	mov	r3, r9
 8005fde:	460a      	mov	r2, r1
 8005fe0:	eb42 0303 	adc.w	r3, r2, r3
 8005fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ff4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ff8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	18db      	adds	r3, r3, r3
 8006000:	62bb      	str	r3, [r7, #40]	; 0x28
 8006002:	4613      	mov	r3, r2
 8006004:	eb42 0303 	adc.w	r3, r2, r3
 8006008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800600a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800600e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006012:	f7fa f8fd 	bl	8000210 <__aeabi_uldivmod>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <UART_SetConfig+0x2d4>)
 800601c:	fba3 1302 	umull	r1, r3, r3, r2
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	2164      	movs	r1, #100	; 0x64
 8006024:	fb01 f303 	mul.w	r3, r1, r3
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	3332      	adds	r3, #50	; 0x32
 800602e:	4a08      	ldr	r2, [pc, #32]	; (8006050 <UART_SetConfig+0x2d4>)
 8006030:	fba2 2303 	umull	r2, r3, r2, r3
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	f003 0207 	and.w	r2, r3, #7
 800603a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4422      	add	r2, r4
 8006042:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006044:	e106      	b.n	8006254 <UART_SetConfig+0x4d8>
 8006046:	bf00      	nop
 8006048:	40011000 	.word	0x40011000
 800604c:	40011400 	.word	0x40011400
 8006050:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006058:	2200      	movs	r2, #0
 800605a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800605e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006062:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006066:	4642      	mov	r2, r8
 8006068:	464b      	mov	r3, r9
 800606a:	1891      	adds	r1, r2, r2
 800606c:	6239      	str	r1, [r7, #32]
 800606e:	415b      	adcs	r3, r3
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
 8006072:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006076:	4641      	mov	r1, r8
 8006078:	1854      	adds	r4, r2, r1
 800607a:	4649      	mov	r1, r9
 800607c:	eb43 0501 	adc.w	r5, r3, r1
 8006080:	f04f 0200 	mov.w	r2, #0
 8006084:	f04f 0300 	mov.w	r3, #0
 8006088:	00eb      	lsls	r3, r5, #3
 800608a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800608e:	00e2      	lsls	r2, r4, #3
 8006090:	4614      	mov	r4, r2
 8006092:	461d      	mov	r5, r3
 8006094:	4643      	mov	r3, r8
 8006096:	18e3      	adds	r3, r4, r3
 8006098:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800609c:	464b      	mov	r3, r9
 800609e:	eb45 0303 	adc.w	r3, r5, r3
 80060a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80060c2:	4629      	mov	r1, r5
 80060c4:	008b      	lsls	r3, r1, #2
 80060c6:	4621      	mov	r1, r4
 80060c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060cc:	4621      	mov	r1, r4
 80060ce:	008a      	lsls	r2, r1, #2
 80060d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060d4:	f7fa f89c 	bl	8000210 <__aeabi_uldivmod>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	4b60      	ldr	r3, [pc, #384]	; (8006260 <UART_SetConfig+0x4e4>)
 80060de:	fba3 2302 	umull	r2, r3, r3, r2
 80060e2:	095b      	lsrs	r3, r3, #5
 80060e4:	011c      	lsls	r4, r3, #4
 80060e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80060f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80060f8:	4642      	mov	r2, r8
 80060fa:	464b      	mov	r3, r9
 80060fc:	1891      	adds	r1, r2, r2
 80060fe:	61b9      	str	r1, [r7, #24]
 8006100:	415b      	adcs	r3, r3
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006108:	4641      	mov	r1, r8
 800610a:	1851      	adds	r1, r2, r1
 800610c:	6139      	str	r1, [r7, #16]
 800610e:	4649      	mov	r1, r9
 8006110:	414b      	adcs	r3, r1
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	f04f 0200 	mov.w	r2, #0
 8006118:	f04f 0300 	mov.w	r3, #0
 800611c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006120:	4659      	mov	r1, fp
 8006122:	00cb      	lsls	r3, r1, #3
 8006124:	4651      	mov	r1, sl
 8006126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800612a:	4651      	mov	r1, sl
 800612c:	00ca      	lsls	r2, r1, #3
 800612e:	4610      	mov	r0, r2
 8006130:	4619      	mov	r1, r3
 8006132:	4603      	mov	r3, r0
 8006134:	4642      	mov	r2, r8
 8006136:	189b      	adds	r3, r3, r2
 8006138:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800613c:	464b      	mov	r3, r9
 800613e:	460a      	mov	r2, r1
 8006140:	eb42 0303 	adc.w	r3, r2, r3
 8006144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	67bb      	str	r3, [r7, #120]	; 0x78
 8006152:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	f04f 0300 	mov.w	r3, #0
 800615c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006160:	4649      	mov	r1, r9
 8006162:	008b      	lsls	r3, r1, #2
 8006164:	4641      	mov	r1, r8
 8006166:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800616a:	4641      	mov	r1, r8
 800616c:	008a      	lsls	r2, r1, #2
 800616e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006172:	f7fa f84d 	bl	8000210 <__aeabi_uldivmod>
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	4611      	mov	r1, r2
 800617c:	4b38      	ldr	r3, [pc, #224]	; (8006260 <UART_SetConfig+0x4e4>)
 800617e:	fba3 2301 	umull	r2, r3, r3, r1
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	2264      	movs	r2, #100	; 0x64
 8006186:	fb02 f303 	mul.w	r3, r2, r3
 800618a:	1acb      	subs	r3, r1, r3
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	3332      	adds	r3, #50	; 0x32
 8006190:	4a33      	ldr	r2, [pc, #204]	; (8006260 <UART_SetConfig+0x4e4>)
 8006192:	fba2 2303 	umull	r2, r3, r2, r3
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800619c:	441c      	add	r4, r3
 800619e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061a2:	2200      	movs	r2, #0
 80061a4:	673b      	str	r3, [r7, #112]	; 0x70
 80061a6:	677a      	str	r2, [r7, #116]	; 0x74
 80061a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80061ac:	4642      	mov	r2, r8
 80061ae:	464b      	mov	r3, r9
 80061b0:	1891      	adds	r1, r2, r2
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	415b      	adcs	r3, r3
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061bc:	4641      	mov	r1, r8
 80061be:	1851      	adds	r1, r2, r1
 80061c0:	6039      	str	r1, [r7, #0]
 80061c2:	4649      	mov	r1, r9
 80061c4:	414b      	adcs	r3, r1
 80061c6:	607b      	str	r3, [r7, #4]
 80061c8:	f04f 0200 	mov.w	r2, #0
 80061cc:	f04f 0300 	mov.w	r3, #0
 80061d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061d4:	4659      	mov	r1, fp
 80061d6:	00cb      	lsls	r3, r1, #3
 80061d8:	4651      	mov	r1, sl
 80061da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061de:	4651      	mov	r1, sl
 80061e0:	00ca      	lsls	r2, r1, #3
 80061e2:	4610      	mov	r0, r2
 80061e4:	4619      	mov	r1, r3
 80061e6:	4603      	mov	r3, r0
 80061e8:	4642      	mov	r2, r8
 80061ea:	189b      	adds	r3, r3, r2
 80061ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80061ee:	464b      	mov	r3, r9
 80061f0:	460a      	mov	r2, r1
 80061f2:	eb42 0303 	adc.w	r3, r2, r3
 80061f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	663b      	str	r3, [r7, #96]	; 0x60
 8006202:	667a      	str	r2, [r7, #100]	; 0x64
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	f04f 0300 	mov.w	r3, #0
 800620c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006210:	4649      	mov	r1, r9
 8006212:	008b      	lsls	r3, r1, #2
 8006214:	4641      	mov	r1, r8
 8006216:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800621a:	4641      	mov	r1, r8
 800621c:	008a      	lsls	r2, r1, #2
 800621e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006222:	f7f9 fff5 	bl	8000210 <__aeabi_uldivmod>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4b0d      	ldr	r3, [pc, #52]	; (8006260 <UART_SetConfig+0x4e4>)
 800622c:	fba3 1302 	umull	r1, r3, r3, r2
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	2164      	movs	r1, #100	; 0x64
 8006234:	fb01 f303 	mul.w	r3, r1, r3
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	3332      	adds	r3, #50	; 0x32
 800623e:	4a08      	ldr	r2, [pc, #32]	; (8006260 <UART_SetConfig+0x4e4>)
 8006240:	fba2 2303 	umull	r2, r3, r2, r3
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	f003 020f 	and.w	r2, r3, #15
 800624a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4422      	add	r2, r4
 8006252:	609a      	str	r2, [r3, #8]
}
 8006254:	bf00      	nop
 8006256:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800625a:	46bd      	mov	sp, r7
 800625c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006260:	51eb851f 	.word	0x51eb851f

08006264 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	4603      	mov	r3, r0
 800626c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006276:	2b84      	cmp	r3, #132	; 0x84
 8006278:	d005      	beq.n	8006286 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800627a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4413      	add	r3, r2
 8006282:	3303      	adds	r3, #3
 8006284:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006286:	68fb      	ldr	r3, [r7, #12]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800629a:	f3ef 8305 	mrs	r3, IPSR
 800629e:	607b      	str	r3, [r7, #4]
  return(result);
 80062a0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	bf14      	ite	ne
 80062a6:	2301      	movne	r3, #1
 80062a8:	2300      	moveq	r3, #0
 80062aa:	b2db      	uxtb	r3, r3
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80062bc:	f000 fca4 	bl	8006c08 <vTaskStartScheduler>
  
  return osOK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80062c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062c8:	b089      	sub	sp, #36	; 0x24
 80062ca:	af04      	add	r7, sp, #16
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d020      	beq.n	800631a <osThreadCreate+0x54>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d01c      	beq.n	800631a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685c      	ldr	r4, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691e      	ldr	r6, [r3, #16]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff ffb6 	bl	8006264 <makeFreeRtosPriority>
 80062f8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006302:	9202      	str	r2, [sp, #8]
 8006304:	9301      	str	r3, [sp, #4]
 8006306:	9100      	str	r1, [sp, #0]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	4632      	mov	r2, r6
 800630c:	4629      	mov	r1, r5
 800630e:	4620      	mov	r0, r4
 8006310:	f000 f97a 	bl	8006608 <xTaskCreateStatic>
 8006314:	4603      	mov	r3, r0
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	e01c      	b.n	8006354 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685c      	ldr	r4, [r3, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006326:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff ff98 	bl	8006264 <makeFreeRtosPriority>
 8006334:	4602      	mov	r2, r0
 8006336:	f107 030c 	add.w	r3, r7, #12
 800633a:	9301      	str	r3, [sp, #4]
 800633c:	9200      	str	r2, [sp, #0]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	4632      	mov	r2, r6
 8006342:	4629      	mov	r1, r5
 8006344:	4620      	mov	r0, r4
 8006346:	f000 f9bc 	bl	80066c2 <xTaskCreate>
 800634a:	4603      	mov	r3, r0
 800634c:	2b01      	cmp	r3, #1
 800634e:	d001      	beq.n	8006354 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006350:	2300      	movs	r3, #0
 8006352:	e000      	b.n	8006356 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006354:	68fb      	ldr	r3, [r7, #12]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800635e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b084      	sub	sp, #16
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <osDelay+0x16>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	e000      	b.n	8006376 <osDelay+0x18>
 8006374:	2301      	movs	r3, #1
 8006376:	4618      	mov	r0, r3
 8006378:	f000 faf0 	bl	800695c <vTaskDelay>
  
  return osOK;
 800637c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
	...

08006388 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af02      	add	r7, sp, #8
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006392:	2300      	movs	r3, #0
 8006394:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8006396:	2300      	movs	r3, #0
 8006398:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800639a:	f7ff ff7b 	bl	8006294 <inHandlerMode>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01c      	beq.n	80063de <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	f107 0208 	add.w	r2, r7, #8
 80063aa:	f107 030c 	add.w	r3, r7, #12
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	4613      	mov	r3, r2
 80063b2:	2201      	movs	r2, #1
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 f84d 	bl	8007454 <xTaskGenericNotifyFromISR>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d002      	beq.n	80063c6 <osSignalSet+0x3e>
      return 0x80000000;
 80063c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063c4:	e019      	b.n	80063fa <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d015      	beq.n	80063f8 <osSignalSet+0x70>
 80063cc:	4b0d      	ldr	r3, [pc, #52]	; (8006404 <osSignalSet+0x7c>)
 80063ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	e00c      	b.n	80063f8 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	f107 0308 	add.w	r3, r7, #8
 80063e4:	2201      	movs	r2, #1
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 ff76 	bl	80072d8 <xTaskGenericNotify>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d002      	beq.n	80063f8 <osSignalSet+0x70>
    return 0x80000000;
 80063f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063f6:	e000      	b.n	80063fa <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80063f8:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	e000ed04 	.word	0xe000ed04

08006408 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8006408:	b590      	push	{r4, r7, lr}
 800640a:	b089      	sub	sp, #36	; 0x24
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8006414:	2300      	movs	r3, #0
 8006416:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8006418:	2300      	movs	r3, #0
 800641a:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006422:	d103      	bne.n	800642c <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8006424:	f04f 33ff 	mov.w	r3, #4294967295
 8006428:	61fb      	str	r3, [r7, #28]
 800642a:	e009      	b.n	8006440 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d006      	beq.n	8006440 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <osSignalWait+0x38>
      ticks = 1;
 800643c:	2301      	movs	r3, #1
 800643e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8006440:	f7ff ff28 	bl	8006294 <inHandlerMode>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800644a:	2382      	movs	r3, #130	; 0x82
 800644c:	613b      	str	r3, [r7, #16]
 800644e:	e01b      	b.n	8006488 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8006450:	68b9      	ldr	r1, [r7, #8]
 8006452:	f107 0310 	add.w	r3, r7, #16
 8006456:	1d1a      	adds	r2, r3, #4
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	2000      	movs	r0, #0
 800645c:	f000 fedc 	bl	8007218 <xTaskNotifyWait>
 8006460:	4603      	mov	r3, r0
 8006462:	2b01      	cmp	r3, #1
 8006464:	d008      	beq.n	8006478 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d102      	bne.n	8006472 <osSignalWait+0x6a>
 800646c:	2300      	movs	r3, #0
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	e00a      	b.n	8006488 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8006472:	2340      	movs	r3, #64	; 0x40
 8006474:	613b      	str	r3, [r7, #16]
 8006476:	e007      	b.n	8006488 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	2b00      	cmp	r3, #0
 800647c:	da02      	bge.n	8006484 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800647e:	2386      	movs	r3, #134	; 0x86
 8006480:	613b      	str	r3, [r7, #16]
 8006482:	e001      	b.n	8006488 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8006484:	2308      	movs	r3, #8
 8006486:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	461c      	mov	r4, r3
 800648c:	f107 0310 	add.w	r3, r7, #16
 8006490:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006494:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	3724      	adds	r7, #36	; 0x24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd90      	pop	{r4, r7, pc}

080064a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f103 0208 	add.w	r2, r3, #8
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f04f 32ff 	mov.w	r2, #4294967295
 80064b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f103 0208 	add.w	r2, r3, #8
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f103 0208 	add.w	r2, r3, #8
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064ee:	bf00      	nop
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064fa:	b480      	push	{r7}
 80064fc:	b085      	sub	sp, #20
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	601a      	str	r2, [r3, #0]
}
 8006536:	bf00      	nop
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006542:	b480      	push	{r7}
 8006544:	b085      	sub	sp, #20
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006558:	d103      	bne.n	8006562 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	e00c      	b.n	800657c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3308      	adds	r3, #8
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	e002      	b.n	8006570 <vListInsert+0x2e>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	429a      	cmp	r2, r3
 800657a:	d2f6      	bcs.n	800656a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	1c5a      	adds	r2, r3, #1
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	601a      	str	r2, [r3, #0]
}
 80065a8:	bf00      	nop
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	6892      	ldr	r2, [r2, #8]
 80065ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6852      	ldr	r2, [r2, #4]
 80065d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d103      	bne.n	80065e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	1e5a      	subs	r2, r3, #1
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08e      	sub	sp, #56	; 0x38
 800660c:	af04      	add	r7, sp, #16
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
 8006614:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800662e:	bf00      	nop
 8006630:	e7fe      	b.n	8006630 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10a      	bne.n	800664e <xTaskCreateStatic+0x46>
	__asm volatile
 8006638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	61fb      	str	r3, [r7, #28]
}
 800664a:	bf00      	nop
 800664c:	e7fe      	b.n	800664c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800664e:	23a0      	movs	r3, #160	; 0xa0
 8006650:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	2ba0      	cmp	r3, #160	; 0xa0
 8006656:	d00a      	beq.n	800666e <xTaskCreateStatic+0x66>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	61bb      	str	r3, [r7, #24]
}
 800666a:	bf00      	nop
 800666c:	e7fe      	b.n	800666c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800666e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006672:	2b00      	cmp	r3, #0
 8006674:	d01e      	beq.n	80066b4 <xTaskCreateStatic+0xac>
 8006676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01b      	beq.n	80066b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800667c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006684:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	2202      	movs	r2, #2
 800668a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800668e:	2300      	movs	r3, #0
 8006690:	9303      	str	r3, [sp, #12]
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	9302      	str	r3, [sp, #8]
 8006696:	f107 0314 	add.w	r3, r7, #20
 800669a:	9301      	str	r3, [sp, #4]
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	68b9      	ldr	r1, [r7, #8]
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 f850 	bl	800674c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066ae:	f000 f8eb 	bl	8006888 <prvAddNewTaskToReadyList>
 80066b2:	e001      	b.n	80066b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80066b4:	2300      	movs	r3, #0
 80066b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066b8:	697b      	ldr	r3, [r7, #20]
	}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3728      	adds	r7, #40	; 0x28
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b08c      	sub	sp, #48	; 0x30
 80066c6:	af04      	add	r7, sp, #16
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	603b      	str	r3, [r7, #0]
 80066ce:	4613      	mov	r3, r2
 80066d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066d2:	88fb      	ldrh	r3, [r7, #6]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4618      	mov	r0, r3
 80066d8:	f001 fa56 	bl	8007b88 <pvPortMalloc>
 80066dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00e      	beq.n	8006702 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80066e4:	20a0      	movs	r0, #160	; 0xa0
 80066e6:	f001 fa4f 	bl	8007b88 <pvPortMalloc>
 80066ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	631a      	str	r2, [r3, #48]	; 0x30
 80066f8:	e005      	b.n	8006706 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066fa:	6978      	ldr	r0, [r7, #20]
 80066fc:	f001 fb10 	bl	8007d20 <vPortFree>
 8006700:	e001      	b.n	8006706 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006702:	2300      	movs	r3, #0
 8006704:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d017      	beq.n	800673c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006714:	88fa      	ldrh	r2, [r7, #6]
 8006716:	2300      	movs	r3, #0
 8006718:	9303      	str	r3, [sp, #12]
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	9302      	str	r3, [sp, #8]
 800671e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006720:	9301      	str	r3, [sp, #4]
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	68b9      	ldr	r1, [r7, #8]
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 f80e 	bl	800674c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006730:	69f8      	ldr	r0, [r7, #28]
 8006732:	f000 f8a9 	bl	8006888 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006736:	2301      	movs	r3, #1
 8006738:	61bb      	str	r3, [r7, #24]
 800673a:	e002      	b.n	8006742 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800673c:	f04f 33ff 	mov.w	r3, #4294967295
 8006740:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006742:	69bb      	ldr	r3, [r7, #24]
	}
 8006744:	4618      	mov	r0, r3
 8006746:	3720      	adds	r7, #32
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b088      	sub	sp, #32
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006764:	3b01      	subs	r3, #1
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	f023 0307 	bic.w	r3, r3, #7
 8006772:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <prvInitialiseNewTask+0x48>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	617b      	str	r3, [r7, #20]
}
 8006790:	bf00      	nop
 8006792:	e7fe      	b.n	8006792 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d01f      	beq.n	80067da <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800679a:	2300      	movs	r3, #0
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	e012      	b.n	80067c6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	4413      	add	r3, r2
 80067a6:	7819      	ldrb	r1, [r3, #0]
 80067a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	4413      	add	r3, r2
 80067ae:	3334      	adds	r3, #52	; 0x34
 80067b0:	460a      	mov	r2, r1
 80067b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	4413      	add	r3, r2
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d006      	beq.n	80067ce <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	3301      	adds	r3, #1
 80067c4:	61fb      	str	r3, [r7, #28]
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	2b0f      	cmp	r3, #15
 80067ca:	d9e9      	bls.n	80067a0 <prvInitialiseNewTask+0x54>
 80067cc:	e000      	b.n	80067d0 <prvInitialiseNewTask+0x84>
			{
				break;
 80067ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067d8:	e003      	b.n	80067e2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e4:	2b06      	cmp	r3, #6
 80067e6:	d901      	bls.n	80067ec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067e8:	2306      	movs	r3, #6
 80067ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067f6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	2200      	movs	r2, #0
 80067fc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	3304      	adds	r3, #4
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff fe6c 	bl	80064e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	3318      	adds	r3, #24
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff fe67 	bl	80064e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006816:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681a:	f1c3 0207 	rsb	r2, r3, #7
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006826:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	2200      	movs	r2, #0
 800682c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	2200      	movs	r2, #0
 8006834:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	334c      	adds	r3, #76	; 0x4c
 800683c:	224c      	movs	r2, #76	; 0x4c
 800683e:	2100      	movs	r1, #0
 8006840:	4618      	mov	r0, r3
 8006842:	f001 fb8b 	bl	8007f5c <memset>
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	4a0c      	ldr	r2, [pc, #48]	; (800687c <prvInitialiseNewTask+0x130>)
 800684a:	651a      	str	r2, [r3, #80]	; 0x50
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	4a0c      	ldr	r2, [pc, #48]	; (8006880 <prvInitialiseNewTask+0x134>)
 8006850:	655a      	str	r2, [r3, #84]	; 0x54
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	4a0b      	ldr	r2, [pc, #44]	; (8006884 <prvInitialiseNewTask+0x138>)
 8006856:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	68f9      	ldr	r1, [r7, #12]
 800685c:	69b8      	ldr	r0, [r7, #24]
 800685e:	f000 ff43 	bl	80076e8 <pxPortInitialiseStack>
 8006862:	4602      	mov	r2, r0
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006866:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006872:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006874:	bf00      	nop
 8006876:	3720      	adds	r7, #32
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	20004a14 	.word	0x20004a14
 8006880:	20004a7c 	.word	0x20004a7c
 8006884:	20004ae4 	.word	0x20004ae4

08006888 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006890:	f001 f858 	bl	8007944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006894:	4b2a      	ldr	r3, [pc, #168]	; (8006940 <prvAddNewTaskToReadyList+0xb8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3301      	adds	r3, #1
 800689a:	4a29      	ldr	r2, [pc, #164]	; (8006940 <prvAddNewTaskToReadyList+0xb8>)
 800689c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800689e:	4b29      	ldr	r3, [pc, #164]	; (8006944 <prvAddNewTaskToReadyList+0xbc>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d109      	bne.n	80068ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068a6:	4a27      	ldr	r2, [pc, #156]	; (8006944 <prvAddNewTaskToReadyList+0xbc>)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068ac:	4b24      	ldr	r3, [pc, #144]	; (8006940 <prvAddNewTaskToReadyList+0xb8>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d110      	bne.n	80068d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068b4:	f000 fbee 	bl	8007094 <prvInitialiseTaskLists>
 80068b8:	e00d      	b.n	80068d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068ba:	4b23      	ldr	r3, [pc, #140]	; (8006948 <prvAddNewTaskToReadyList+0xc0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d109      	bne.n	80068d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068c2:	4b20      	ldr	r3, [pc, #128]	; (8006944 <prvAddNewTaskToReadyList+0xbc>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d802      	bhi.n	80068d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068d0:	4a1c      	ldr	r2, [pc, #112]	; (8006944 <prvAddNewTaskToReadyList+0xbc>)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068d6:	4b1d      	ldr	r3, [pc, #116]	; (800694c <prvAddNewTaskToReadyList+0xc4>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3301      	adds	r3, #1
 80068dc:	4a1b      	ldr	r2, [pc, #108]	; (800694c <prvAddNewTaskToReadyList+0xc4>)
 80068de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	2201      	movs	r2, #1
 80068e6:	409a      	lsls	r2, r3
 80068e8:	4b19      	ldr	r3, [pc, #100]	; (8006950 <prvAddNewTaskToReadyList+0xc8>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	4a18      	ldr	r2, [pc, #96]	; (8006950 <prvAddNewTaskToReadyList+0xc8>)
 80068f0:	6013      	str	r3, [r2, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f6:	4613      	mov	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4a15      	ldr	r2, [pc, #84]	; (8006954 <prvAddNewTaskToReadyList+0xcc>)
 8006900:	441a      	add	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3304      	adds	r3, #4
 8006906:	4619      	mov	r1, r3
 8006908:	4610      	mov	r0, r2
 800690a:	f7ff fdf6 	bl	80064fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800690e:	f001 f849 	bl	80079a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006912:	4b0d      	ldr	r3, [pc, #52]	; (8006948 <prvAddNewTaskToReadyList+0xc0>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00e      	beq.n	8006938 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800691a:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <prvAddNewTaskToReadyList+0xbc>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006924:	429a      	cmp	r2, r3
 8006926:	d207      	bcs.n	8006938 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006928:	4b0b      	ldr	r3, [pc, #44]	; (8006958 <prvAddNewTaskToReadyList+0xd0>)
 800692a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006938:	bf00      	nop
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	20000dc0 	.word	0x20000dc0
 8006944:	20000cc0 	.word	0x20000cc0
 8006948:	20000dcc 	.word	0x20000dcc
 800694c:	20000ddc 	.word	0x20000ddc
 8006950:	20000dc8 	.word	0x20000dc8
 8006954:	20000cc4 	.word	0x20000cc4
 8006958:	e000ed04 	.word	0xe000ed04

0800695c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006964:	2300      	movs	r3, #0
 8006966:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d017      	beq.n	800699e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800696e:	4b13      	ldr	r3, [pc, #76]	; (80069bc <vTaskDelay+0x60>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <vTaskDelay+0x30>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	60bb      	str	r3, [r7, #8]
}
 8006988:	bf00      	nop
 800698a:	e7fe      	b.n	800698a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800698c:	f000 f9a6 	bl	8006cdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006990:	2100      	movs	r1, #0
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fe42 	bl	800761c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006998:	f000 f9ae 	bl	8006cf8 <xTaskResumeAll>
 800699c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d107      	bne.n	80069b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80069a4:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <vTaskDelay+0x64>)
 80069a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069b4:	bf00      	nop
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	20000de8 	.word	0x20000de8
 80069c0:	e000ed04 	.word	0xe000ed04

080069c4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80069cc:	f000 ffba 	bl	8007944 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d102      	bne.n	80069dc <vTaskSuspend+0x18>
 80069d6:	4b3c      	ldr	r3, [pc, #240]	; (8006ac8 <vTaskSuspend+0x104>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	e000      	b.n	80069de <vTaskSuspend+0x1a>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3304      	adds	r3, #4
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7ff fde5 	bl	80065b4 <uxListRemove>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d115      	bne.n	8006a1c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f4:	4935      	ldr	r1, [pc, #212]	; (8006acc <vTaskSuspend+0x108>)
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	440b      	add	r3, r1
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10a      	bne.n	8006a1c <vTaskSuspend+0x58>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a10:	43da      	mvns	r2, r3
 8006a12:	4b2f      	ldr	r3, [pc, #188]	; (8006ad0 <vTaskSuspend+0x10c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4013      	ands	r3, r2
 8006a18:	4a2d      	ldr	r2, [pc, #180]	; (8006ad0 <vTaskSuspend+0x10c>)
 8006a1a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d004      	beq.n	8006a2e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3318      	adds	r3, #24
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff fdc3 	bl	80065b4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3304      	adds	r3, #4
 8006a32:	4619      	mov	r1, r3
 8006a34:	4827      	ldr	r0, [pc, #156]	; (8006ad4 <vTaskSuspend+0x110>)
 8006a36:	f7ff fd60 	bl	80064fa <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d103      	bne.n	8006a4e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006a4e:	f000 ffa9 	bl	80079a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006a52:	4b21      	ldr	r3, [pc, #132]	; (8006ad8 <vTaskSuspend+0x114>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d005      	beq.n	8006a66 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006a5a:	f000 ff73 	bl	8007944 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006a5e:	f000 fbbb 	bl	80071d8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006a62:	f000 ff9f 	bl	80079a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006a66:	4b18      	ldr	r3, [pc, #96]	; (8006ac8 <vTaskSuspend+0x104>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d127      	bne.n	8006ac0 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8006a70:	4b19      	ldr	r3, [pc, #100]	; (8006ad8 <vTaskSuspend+0x114>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d017      	beq.n	8006aa8 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006a78:	4b18      	ldr	r3, [pc, #96]	; (8006adc <vTaskSuspend+0x118>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <vTaskSuspend+0xd2>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	60bb      	str	r3, [r7, #8]
}
 8006a92:	bf00      	nop
 8006a94:	e7fe      	b.n	8006a94 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8006a96:	4b12      	ldr	r3, [pc, #72]	; (8006ae0 <vTaskSuspend+0x11c>)
 8006a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006aa6:	e00b      	b.n	8006ac0 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006aa8:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <vTaskSuspend+0x110>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	4b0d      	ldr	r3, [pc, #52]	; (8006ae4 <vTaskSuspend+0x120>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d103      	bne.n	8006abc <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8006ab4:	4b04      	ldr	r3, [pc, #16]	; (8006ac8 <vTaskSuspend+0x104>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	601a      	str	r2, [r3, #0]
	}
 8006aba:	e001      	b.n	8006ac0 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8006abc:	f000 fa70 	bl	8006fa0 <vTaskSwitchContext>
	}
 8006ac0:	bf00      	nop
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	20000cc0 	.word	0x20000cc0
 8006acc:	20000cc4 	.word	0x20000cc4
 8006ad0:	20000dc8 	.word	0x20000dc8
 8006ad4:	20000dac 	.word	0x20000dac
 8006ad8:	20000dcc 	.word	0x20000dcc
 8006adc:	20000de8 	.word	0x20000de8
 8006ae0:	e000ed04 	.word	0xe000ed04
 8006ae4:	20000dc0 	.word	0x20000dc0

08006ae8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10a      	bne.n	8006b14 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	60fb      	str	r3, [r7, #12]
}
 8006b10:	bf00      	nop
 8006b12:	e7fe      	b.n	8006b12 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	4a0a      	ldr	r2, [pc, #40]	; (8006b44 <prvTaskIsTaskSuspended+0x5c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d10a      	bne.n	8006b34 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b22:	4a09      	ldr	r2, [pc, #36]	; (8006b48 <prvTaskIsTaskSuspended+0x60>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d005      	beq.n	8006b34 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8006b30:	2301      	movs	r3, #1
 8006b32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b34:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006b36:	4618      	mov	r0, r3
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	20000dac 	.word	0x20000dac
 8006b48:	20000d80 	.word	0x20000d80

08006b4c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10a      	bne.n	8006b74 <vTaskResume+0x28>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	60bb      	str	r3, [r7, #8]
}
 8006b70:	bf00      	nop
 8006b72:	e7fe      	b.n	8006b72 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006b74:	4b20      	ldr	r3, [pc, #128]	; (8006bf8 <vTaskResume+0xac>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d037      	beq.n	8006bee <vTaskResume+0xa2>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d034      	beq.n	8006bee <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8006b84:	f000 fede 	bl	8007944 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f7ff ffad 	bl	8006ae8 <prvTaskIsTaskSuspended>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d02a      	beq.n	8006bea <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3304      	adds	r3, #4
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7ff fd0b 	bl	80065b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	409a      	lsls	r2, r3
 8006ba6:	4b15      	ldr	r3, [pc, #84]	; (8006bfc <vTaskResume+0xb0>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	4a13      	ldr	r2, [pc, #76]	; (8006bfc <vTaskResume+0xb0>)
 8006bae:	6013      	str	r3, [r2, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4a10      	ldr	r2, [pc, #64]	; (8006c00 <vTaskResume+0xb4>)
 8006bbe:	441a      	add	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4610      	mov	r0, r2
 8006bc8:	f7ff fc97 	bl	80064fa <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd0:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <vTaskResume+0xac>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d307      	bcc.n	8006bea <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006bda:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <vTaskResume+0xb8>)
 8006bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006bea:	f000 fedb 	bl	80079a4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bee:	bf00      	nop
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000cc0 	.word	0x20000cc0
 8006bfc:	20000dc8 	.word	0x20000dc8
 8006c00:	20000cc4 	.word	0x20000cc4
 8006c04:	e000ed04 	.word	0xe000ed04

08006c08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08a      	sub	sp, #40	; 0x28
 8006c0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c16:	463a      	mov	r2, r7
 8006c18:	1d39      	adds	r1, r7, #4
 8006c1a:	f107 0308 	add.w	r3, r7, #8
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7f9 fcaa 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	9202      	str	r2, [sp, #8]
 8006c2c:	9301      	str	r3, [sp, #4]
 8006c2e:	2300      	movs	r3, #0
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	2300      	movs	r3, #0
 8006c34:	460a      	mov	r2, r1
 8006c36:	4921      	ldr	r1, [pc, #132]	; (8006cbc <vTaskStartScheduler+0xb4>)
 8006c38:	4821      	ldr	r0, [pc, #132]	; (8006cc0 <vTaskStartScheduler+0xb8>)
 8006c3a:	f7ff fce5 	bl	8006608 <xTaskCreateStatic>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	4a20      	ldr	r2, [pc, #128]	; (8006cc4 <vTaskStartScheduler+0xbc>)
 8006c42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c44:	4b1f      	ldr	r3, [pc, #124]	; (8006cc4 <vTaskStartScheduler+0xbc>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d002      	beq.n	8006c52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	617b      	str	r3, [r7, #20]
 8006c50:	e001      	b.n	8006c56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d11b      	bne.n	8006c94 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	613b      	str	r3, [r7, #16]
}
 8006c6e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c70:	4b15      	ldr	r3, [pc, #84]	; (8006cc8 <vTaskStartScheduler+0xc0>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	334c      	adds	r3, #76	; 0x4c
 8006c76:	4a15      	ldr	r2, [pc, #84]	; (8006ccc <vTaskStartScheduler+0xc4>)
 8006c78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c7a:	4b15      	ldr	r3, [pc, #84]	; (8006cd0 <vTaskStartScheduler+0xc8>)
 8006c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c82:	4b14      	ldr	r3, [pc, #80]	; (8006cd4 <vTaskStartScheduler+0xcc>)
 8006c84:	2201      	movs	r2, #1
 8006c86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c88:	4b13      	ldr	r3, [pc, #76]	; (8006cd8 <vTaskStartScheduler+0xd0>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c8e:	f000 fdb7 	bl	8007800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c92:	e00e      	b.n	8006cb2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9a:	d10a      	bne.n	8006cb2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca0:	f383 8811 	msr	BASEPRI, r3
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	60fb      	str	r3, [r7, #12]
}
 8006cae:	bf00      	nop
 8006cb0:	e7fe      	b.n	8006cb0 <vTaskStartScheduler+0xa8>
}
 8006cb2:	bf00      	nop
 8006cb4:	3718      	adds	r7, #24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	08008254 	.word	0x08008254
 8006cc0:	08007065 	.word	0x08007065
 8006cc4:	20000de4 	.word	0x20000de4
 8006cc8:	20000cc0 	.word	0x20000cc0
 8006ccc:	20000064 	.word	0x20000064
 8006cd0:	20000de0 	.word	0x20000de0
 8006cd4:	20000dcc 	.word	0x20000dcc
 8006cd8:	20000dc4 	.word	0x20000dc4

08006cdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ce0:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <vTaskSuspendAll+0x18>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	4a03      	ldr	r2, [pc, #12]	; (8006cf4 <vTaskSuspendAll+0x18>)
 8006ce8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006cea:	bf00      	nop
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	20000de8 	.word	0x20000de8

08006cf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d02:	2300      	movs	r3, #0
 8006d04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d06:	4b41      	ldr	r3, [pc, #260]	; (8006e0c <xTaskResumeAll+0x114>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10a      	bne.n	8006d24 <xTaskResumeAll+0x2c>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	603b      	str	r3, [r7, #0]
}
 8006d20:	bf00      	nop
 8006d22:	e7fe      	b.n	8006d22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d24:	f000 fe0e 	bl	8007944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d28:	4b38      	ldr	r3, [pc, #224]	; (8006e0c <xTaskResumeAll+0x114>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	4a37      	ldr	r2, [pc, #220]	; (8006e0c <xTaskResumeAll+0x114>)
 8006d30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d32:	4b36      	ldr	r3, [pc, #216]	; (8006e0c <xTaskResumeAll+0x114>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d161      	bne.n	8006dfe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d3a:	4b35      	ldr	r3, [pc, #212]	; (8006e10 <xTaskResumeAll+0x118>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d05d      	beq.n	8006dfe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d42:	e02e      	b.n	8006da2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d44:	4b33      	ldr	r3, [pc, #204]	; (8006e14 <xTaskResumeAll+0x11c>)
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	3318      	adds	r3, #24
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7ff fc2f 	bl	80065b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3304      	adds	r3, #4
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff fc2a 	bl	80065b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d64:	2201      	movs	r2, #1
 8006d66:	409a      	lsls	r2, r3
 8006d68:	4b2b      	ldr	r3, [pc, #172]	; (8006e18 <xTaskResumeAll+0x120>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	4a2a      	ldr	r2, [pc, #168]	; (8006e18 <xTaskResumeAll+0x120>)
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d76:	4613      	mov	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4a27      	ldr	r2, [pc, #156]	; (8006e1c <xTaskResumeAll+0x124>)
 8006d80:	441a      	add	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	3304      	adds	r3, #4
 8006d86:	4619      	mov	r1, r3
 8006d88:	4610      	mov	r0, r2
 8006d8a:	f7ff fbb6 	bl	80064fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d92:	4b23      	ldr	r3, [pc, #140]	; (8006e20 <xTaskResumeAll+0x128>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d302      	bcc.n	8006da2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006d9c:	4b21      	ldr	r3, [pc, #132]	; (8006e24 <xTaskResumeAll+0x12c>)
 8006d9e:	2201      	movs	r2, #1
 8006da0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006da2:	4b1c      	ldr	r3, [pc, #112]	; (8006e14 <xTaskResumeAll+0x11c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1cc      	bne.n	8006d44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006db0:	f000 fa12 	bl	80071d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006db4:	4b1c      	ldr	r3, [pc, #112]	; (8006e28 <xTaskResumeAll+0x130>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d010      	beq.n	8006de2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006dc0:	f000 f836 	bl	8006e30 <xTaskIncrementTick>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006dca:	4b16      	ldr	r3, [pc, #88]	; (8006e24 <xTaskResumeAll+0x12c>)
 8006dcc:	2201      	movs	r2, #1
 8006dce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1f1      	bne.n	8006dc0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006ddc:	4b12      	ldr	r3, [pc, #72]	; (8006e28 <xTaskResumeAll+0x130>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006de2:	4b10      	ldr	r3, [pc, #64]	; (8006e24 <xTaskResumeAll+0x12c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d009      	beq.n	8006dfe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006dea:	2301      	movs	r3, #1
 8006dec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006dee:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <xTaskResumeAll+0x134>)
 8006df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006dfe:	f000 fdd1 	bl	80079a4 <vPortExitCritical>

	return xAlreadyYielded;
 8006e02:	68bb      	ldr	r3, [r7, #8]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20000de8 	.word	0x20000de8
 8006e10:	20000dc0 	.word	0x20000dc0
 8006e14:	20000d80 	.word	0x20000d80
 8006e18:	20000dc8 	.word	0x20000dc8
 8006e1c:	20000cc4 	.word	0x20000cc4
 8006e20:	20000cc0 	.word	0x20000cc0
 8006e24:	20000dd4 	.word	0x20000dd4
 8006e28:	20000dd0 	.word	0x20000dd0
 8006e2c:	e000ed04 	.word	0xe000ed04

08006e30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e36:	2300      	movs	r3, #0
 8006e38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e3a:	4b4e      	ldr	r3, [pc, #312]	; (8006f74 <xTaskIncrementTick+0x144>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f040 808e 	bne.w	8006f60 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e44:	4b4c      	ldr	r3, [pc, #304]	; (8006f78 <xTaskIncrementTick+0x148>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e4c:	4a4a      	ldr	r2, [pc, #296]	; (8006f78 <xTaskIncrementTick+0x148>)
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d120      	bne.n	8006e9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e58:	4b48      	ldr	r3, [pc, #288]	; (8006f7c <xTaskIncrementTick+0x14c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <xTaskIncrementTick+0x48>
	__asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	603b      	str	r3, [r7, #0]
}
 8006e74:	bf00      	nop
 8006e76:	e7fe      	b.n	8006e76 <xTaskIncrementTick+0x46>
 8006e78:	4b40      	ldr	r3, [pc, #256]	; (8006f7c <xTaskIncrementTick+0x14c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	4b40      	ldr	r3, [pc, #256]	; (8006f80 <xTaskIncrementTick+0x150>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a3e      	ldr	r2, [pc, #248]	; (8006f7c <xTaskIncrementTick+0x14c>)
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	4a3e      	ldr	r2, [pc, #248]	; (8006f80 <xTaskIncrementTick+0x150>)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	4b3d      	ldr	r3, [pc, #244]	; (8006f84 <xTaskIncrementTick+0x154>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3301      	adds	r3, #1
 8006e92:	4a3c      	ldr	r2, [pc, #240]	; (8006f84 <xTaskIncrementTick+0x154>)
 8006e94:	6013      	str	r3, [r2, #0]
 8006e96:	f000 f99f 	bl	80071d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e9a:	4b3b      	ldr	r3, [pc, #236]	; (8006f88 <xTaskIncrementTick+0x158>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d348      	bcc.n	8006f36 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ea4:	4b35      	ldr	r3, [pc, #212]	; (8006f7c <xTaskIncrementTick+0x14c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d104      	bne.n	8006eb8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eae:	4b36      	ldr	r3, [pc, #216]	; (8006f88 <xTaskIncrementTick+0x158>)
 8006eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb4:	601a      	str	r2, [r3, #0]
					break;
 8006eb6:	e03e      	b.n	8006f36 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb8:	4b30      	ldr	r3, [pc, #192]	; (8006f7c <xTaskIncrementTick+0x14c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d203      	bcs.n	8006ed8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ed0:	4a2d      	ldr	r2, [pc, #180]	; (8006f88 <xTaskIncrementTick+0x158>)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ed6:	e02e      	b.n	8006f36 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	3304      	adds	r3, #4
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7ff fb69 	bl	80065b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d004      	beq.n	8006ef4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	3318      	adds	r3, #24
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7ff fb60 	bl	80065b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef8:	2201      	movs	r2, #1
 8006efa:	409a      	lsls	r2, r3
 8006efc:	4b23      	ldr	r3, [pc, #140]	; (8006f8c <xTaskIncrementTick+0x15c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	4a22      	ldr	r2, [pc, #136]	; (8006f8c <xTaskIncrementTick+0x15c>)
 8006f04:	6013      	str	r3, [r2, #0]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4a1f      	ldr	r2, [pc, #124]	; (8006f90 <xTaskIncrementTick+0x160>)
 8006f14:	441a      	add	r2, r3
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	3304      	adds	r3, #4
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	f7ff faec 	bl	80064fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f26:	4b1b      	ldr	r3, [pc, #108]	; (8006f94 <xTaskIncrementTick+0x164>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d3b9      	bcc.n	8006ea4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006f30:	2301      	movs	r3, #1
 8006f32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f34:	e7b6      	b.n	8006ea4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f36:	4b17      	ldr	r3, [pc, #92]	; (8006f94 <xTaskIncrementTick+0x164>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f3c:	4914      	ldr	r1, [pc, #80]	; (8006f90 <xTaskIncrementTick+0x160>)
 8006f3e:	4613      	mov	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	440b      	add	r3, r1
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d901      	bls.n	8006f52 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f52:	4b11      	ldr	r3, [pc, #68]	; (8006f98 <xTaskIncrementTick+0x168>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d007      	beq.n	8006f6a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	617b      	str	r3, [r7, #20]
 8006f5e:	e004      	b.n	8006f6a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f60:	4b0e      	ldr	r3, [pc, #56]	; (8006f9c <xTaskIncrementTick+0x16c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3301      	adds	r3, #1
 8006f66:	4a0d      	ldr	r2, [pc, #52]	; (8006f9c <xTaskIncrementTick+0x16c>)
 8006f68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f6a:	697b      	ldr	r3, [r7, #20]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	20000de8 	.word	0x20000de8
 8006f78:	20000dc4 	.word	0x20000dc4
 8006f7c:	20000d78 	.word	0x20000d78
 8006f80:	20000d7c 	.word	0x20000d7c
 8006f84:	20000dd8 	.word	0x20000dd8
 8006f88:	20000de0 	.word	0x20000de0
 8006f8c:	20000dc8 	.word	0x20000dc8
 8006f90:	20000cc4 	.word	0x20000cc4
 8006f94:	20000cc0 	.word	0x20000cc0
 8006f98:	20000dd4 	.word	0x20000dd4
 8006f9c:	20000dd0 	.word	0x20000dd0

08006fa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fa6:	4b29      	ldr	r3, [pc, #164]	; (800704c <vTaskSwitchContext+0xac>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fae:	4b28      	ldr	r3, [pc, #160]	; (8007050 <vTaskSwitchContext+0xb0>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fb4:	e044      	b.n	8007040 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006fb6:	4b26      	ldr	r3, [pc, #152]	; (8007050 <vTaskSwitchContext+0xb0>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fbc:	4b25      	ldr	r3, [pc, #148]	; (8007054 <vTaskSwitchContext+0xb4>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	fab3 f383 	clz	r3, r3
 8006fc8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006fca:	7afb      	ldrb	r3, [r7, #11]
 8006fcc:	f1c3 031f 	rsb	r3, r3, #31
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	4921      	ldr	r1, [pc, #132]	; (8007058 <vTaskSwitchContext+0xb8>)
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	440b      	add	r3, r1
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10a      	bne.n	8006ffc <vTaskSwitchContext+0x5c>
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	607b      	str	r3, [r7, #4]
}
 8006ff8:	bf00      	nop
 8006ffa:	e7fe      	b.n	8006ffa <vTaskSwitchContext+0x5a>
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	4613      	mov	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4a14      	ldr	r2, [pc, #80]	; (8007058 <vTaskSwitchContext+0xb8>)
 8007008:	4413      	add	r3, r2
 800700a:	613b      	str	r3, [r7, #16]
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	605a      	str	r2, [r3, #4]
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	3308      	adds	r3, #8
 800701e:	429a      	cmp	r2, r3
 8007020:	d104      	bne.n	800702c <vTaskSwitchContext+0x8c>
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	605a      	str	r2, [r3, #4]
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	4a0a      	ldr	r2, [pc, #40]	; (800705c <vTaskSwitchContext+0xbc>)
 8007034:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007036:	4b09      	ldr	r3, [pc, #36]	; (800705c <vTaskSwitchContext+0xbc>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	334c      	adds	r3, #76	; 0x4c
 800703c:	4a08      	ldr	r2, [pc, #32]	; (8007060 <vTaskSwitchContext+0xc0>)
 800703e:	6013      	str	r3, [r2, #0]
}
 8007040:	bf00      	nop
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	20000de8 	.word	0x20000de8
 8007050:	20000dd4 	.word	0x20000dd4
 8007054:	20000dc8 	.word	0x20000dc8
 8007058:	20000cc4 	.word	0x20000cc4
 800705c:	20000cc0 	.word	0x20000cc0
 8007060:	20000064 	.word	0x20000064

08007064 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800706c:	f000 f852 	bl	8007114 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007070:	4b06      	ldr	r3, [pc, #24]	; (800708c <prvIdleTask+0x28>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d9f9      	bls.n	800706c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007078:	4b05      	ldr	r3, [pc, #20]	; (8007090 <prvIdleTask+0x2c>)
 800707a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007088:	e7f0      	b.n	800706c <prvIdleTask+0x8>
 800708a:	bf00      	nop
 800708c:	20000cc4 	.word	0x20000cc4
 8007090:	e000ed04 	.word	0xe000ed04

08007094 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800709a:	2300      	movs	r3, #0
 800709c:	607b      	str	r3, [r7, #4]
 800709e:	e00c      	b.n	80070ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	4613      	mov	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4a12      	ldr	r2, [pc, #72]	; (80070f4 <prvInitialiseTaskLists+0x60>)
 80070ac:	4413      	add	r3, r2
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7ff f9f6 	bl	80064a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3301      	adds	r3, #1
 80070b8:	607b      	str	r3, [r7, #4]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b06      	cmp	r3, #6
 80070be:	d9ef      	bls.n	80070a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80070c0:	480d      	ldr	r0, [pc, #52]	; (80070f8 <prvInitialiseTaskLists+0x64>)
 80070c2:	f7ff f9ed 	bl	80064a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80070c6:	480d      	ldr	r0, [pc, #52]	; (80070fc <prvInitialiseTaskLists+0x68>)
 80070c8:	f7ff f9ea 	bl	80064a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80070cc:	480c      	ldr	r0, [pc, #48]	; (8007100 <prvInitialiseTaskLists+0x6c>)
 80070ce:	f7ff f9e7 	bl	80064a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070d2:	480c      	ldr	r0, [pc, #48]	; (8007104 <prvInitialiseTaskLists+0x70>)
 80070d4:	f7ff f9e4 	bl	80064a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070d8:	480b      	ldr	r0, [pc, #44]	; (8007108 <prvInitialiseTaskLists+0x74>)
 80070da:	f7ff f9e1 	bl	80064a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070de:	4b0b      	ldr	r3, [pc, #44]	; (800710c <prvInitialiseTaskLists+0x78>)
 80070e0:	4a05      	ldr	r2, [pc, #20]	; (80070f8 <prvInitialiseTaskLists+0x64>)
 80070e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070e4:	4b0a      	ldr	r3, [pc, #40]	; (8007110 <prvInitialiseTaskLists+0x7c>)
 80070e6:	4a05      	ldr	r2, [pc, #20]	; (80070fc <prvInitialiseTaskLists+0x68>)
 80070e8:	601a      	str	r2, [r3, #0]
}
 80070ea:	bf00      	nop
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20000cc4 	.word	0x20000cc4
 80070f8:	20000d50 	.word	0x20000d50
 80070fc:	20000d64 	.word	0x20000d64
 8007100:	20000d80 	.word	0x20000d80
 8007104:	20000d94 	.word	0x20000d94
 8007108:	20000dac 	.word	0x20000dac
 800710c:	20000d78 	.word	0x20000d78
 8007110:	20000d7c 	.word	0x20000d7c

08007114 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800711a:	e019      	b.n	8007150 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800711c:	f000 fc12 	bl	8007944 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007120:	4b10      	ldr	r3, [pc, #64]	; (8007164 <prvCheckTasksWaitingTermination+0x50>)
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3304      	adds	r3, #4
 800712c:	4618      	mov	r0, r3
 800712e:	f7ff fa41 	bl	80065b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007132:	4b0d      	ldr	r3, [pc, #52]	; (8007168 <prvCheckTasksWaitingTermination+0x54>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3b01      	subs	r3, #1
 8007138:	4a0b      	ldr	r2, [pc, #44]	; (8007168 <prvCheckTasksWaitingTermination+0x54>)
 800713a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800713c:	4b0b      	ldr	r3, [pc, #44]	; (800716c <prvCheckTasksWaitingTermination+0x58>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3b01      	subs	r3, #1
 8007142:	4a0a      	ldr	r2, [pc, #40]	; (800716c <prvCheckTasksWaitingTermination+0x58>)
 8007144:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007146:	f000 fc2d 	bl	80079a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f810 	bl	8007170 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007150:	4b06      	ldr	r3, [pc, #24]	; (800716c <prvCheckTasksWaitingTermination+0x58>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1e1      	bne.n	800711c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007158:	bf00      	nop
 800715a:	bf00      	nop
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20000d94 	.word	0x20000d94
 8007168:	20000dc0 	.word	0x20000dc0
 800716c:	20000da8 	.word	0x20000da8

08007170 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	334c      	adds	r3, #76	; 0x4c
 800717c:	4618      	mov	r0, r3
 800717e:	f000 ff03 	bl	8007f88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007188:	2b00      	cmp	r3, #0
 800718a:	d108      	bne.n	800719e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	4618      	mov	r0, r3
 8007192:	f000 fdc5 	bl	8007d20 <vPortFree>
				vPortFree( pxTCB );
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fdc2 	bl	8007d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800719c:	e018      	b.n	80071d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d103      	bne.n	80071b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fdb9 	bl	8007d20 <vPortFree>
	}
 80071ae:	e00f      	b.n	80071d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d00a      	beq.n	80071d0 <prvDeleteTCB+0x60>
	__asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	60fb      	str	r3, [r7, #12]
}
 80071cc:	bf00      	nop
 80071ce:	e7fe      	b.n	80071ce <prvDeleteTCB+0x5e>
	}
 80071d0:	bf00      	nop
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071de:	4b0c      	ldr	r3, [pc, #48]	; (8007210 <prvResetNextTaskUnblockTime+0x38>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d104      	bne.n	80071f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071e8:	4b0a      	ldr	r3, [pc, #40]	; (8007214 <prvResetNextTaskUnblockTime+0x3c>)
 80071ea:	f04f 32ff 	mov.w	r2, #4294967295
 80071ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80071f0:	e008      	b.n	8007204 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071f2:	4b07      	ldr	r3, [pc, #28]	; (8007210 <prvResetNextTaskUnblockTime+0x38>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	4a04      	ldr	r2, [pc, #16]	; (8007214 <prvResetNextTaskUnblockTime+0x3c>)
 8007202:	6013      	str	r3, [r2, #0]
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	20000d78 	.word	0x20000d78
 8007214:	20000de0 	.word	0x20000de0

08007218 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007226:	f000 fb8d 	bl	8007944 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800722a:	4b29      	ldr	r3, [pc, #164]	; (80072d0 <xTaskNotifyWait+0xb8>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d01c      	beq.n	8007272 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007238:	4b25      	ldr	r3, [pc, #148]	; (80072d0 <xTaskNotifyWait+0xb8>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	43d2      	mvns	r2, r2
 8007244:	400a      	ands	r2, r1
 8007246:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800724a:	4b21      	ldr	r3, [pc, #132]	; (80072d0 <xTaskNotifyWait+0xb8>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00b      	beq.n	8007272 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800725a:	2101      	movs	r1, #1
 800725c:	6838      	ldr	r0, [r7, #0]
 800725e:	f000 f9dd 	bl	800761c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007262:	4b1c      	ldr	r3, [pc, #112]	; (80072d4 <xTaskNotifyWait+0xbc>)
 8007264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007272:	f000 fb97 	bl	80079a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007276:	f000 fb65 	bl	8007944 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d005      	beq.n	800728c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007280:	4b13      	ldr	r3, [pc, #76]	; (80072d0 <xTaskNotifyWait+0xb8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800728c:	4b10      	ldr	r3, [pc, #64]	; (80072d0 <xTaskNotifyWait+0xb8>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b02      	cmp	r3, #2
 8007298:	d002      	beq.n	80072a0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800729a:	2300      	movs	r3, #0
 800729c:	617b      	str	r3, [r7, #20]
 800729e:	e00a      	b.n	80072b6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80072a0:	4b0b      	ldr	r3, [pc, #44]	; (80072d0 <xTaskNotifyWait+0xb8>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	43d2      	mvns	r2, r2
 80072ac:	400a      	ands	r2, r1
 80072ae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 80072b2:	2301      	movs	r3, #1
 80072b4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072b6:	4b06      	ldr	r3, [pc, #24]	; (80072d0 <xTaskNotifyWait+0xb8>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 80072c0:	f000 fb70 	bl	80079a4 <vPortExitCritical>

		return xReturn;
 80072c4:	697b      	ldr	r3, [r7, #20]
	}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	20000cc0 	.word	0x20000cc0
 80072d4:	e000ed04 	.word	0xe000ed04

080072d8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08a      	sub	sp, #40	; 0x28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	603b      	str	r3, [r7, #0]
 80072e4:	4613      	mov	r3, r2
 80072e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80072e8:	2301      	movs	r3, #1
 80072ea:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <xTaskGenericNotify+0x30>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	61bb      	str	r3, [r7, #24]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800730c:	f000 fb1a 	bl	8007944 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d004      	beq.n	8007320 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8007326:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 8007330:	79fb      	ldrb	r3, [r7, #7]
 8007332:	2b04      	cmp	r3, #4
 8007334:	d82d      	bhi.n	8007392 <xTaskGenericNotify+0xba>
 8007336:	a201      	add	r2, pc, #4	; (adr r2, 800733c <xTaskGenericNotify+0x64>)
 8007338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733c:	080073b5 	.word	0x080073b5
 8007340:	08007351 	.word	0x08007351
 8007344:	08007363 	.word	0x08007363
 8007348:	08007373 	.word	0x08007373
 800734c:	0800737d 	.word	0x0800737d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	431a      	orrs	r2, r3
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 8007360:	e02b      	b.n	80073ba <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007368:	1c5a      	adds	r2, r3, #1
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 8007370:	e023      	b.n	80073ba <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800737a:	e01e      	b.n	80073ba <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800737c:	7ffb      	ldrb	r3, [r7, #31]
 800737e:	2b02      	cmp	r3, #2
 8007380:	d004      	beq.n	800738c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800738a:	e016      	b.n	80073ba <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800738c:	2300      	movs	r3, #0
 800738e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8007390:	e013      	b.n	80073ba <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739c:	d00c      	beq.n	80073b8 <xTaskGenericNotify+0xe0>
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	617b      	str	r3, [r7, #20]
}
 80073b0:	bf00      	nop
 80073b2:	e7fe      	b.n	80073b2 <xTaskGenericNotify+0xda>
					break;
 80073b4:	bf00      	nop
 80073b6:	e000      	b.n	80073ba <xTaskGenericNotify+0xe2>

					break;
 80073b8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80073ba:	7ffb      	ldrb	r3, [r7, #31]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d139      	bne.n	8007434 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	3304      	adds	r3, #4
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7ff f8f5 	bl	80065b4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ce:	2201      	movs	r2, #1
 80073d0:	409a      	lsls	r2, r3
 80073d2:	4b1c      	ldr	r3, [pc, #112]	; (8007444 <xTaskGenericNotify+0x16c>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	4a1a      	ldr	r2, [pc, #104]	; (8007444 <xTaskGenericNotify+0x16c>)
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4a17      	ldr	r2, [pc, #92]	; (8007448 <xTaskGenericNotify+0x170>)
 80073ea:	441a      	add	r2, r3
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	3304      	adds	r3, #4
 80073f0:	4619      	mov	r1, r3
 80073f2:	4610      	mov	r0, r2
 80073f4:	f7ff f881 	bl	80064fa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <xTaskGenericNotify+0x13e>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	613b      	str	r3, [r7, #16]
}
 8007412:	bf00      	nop
 8007414:	e7fe      	b.n	8007414 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741a:	4b0c      	ldr	r3, [pc, #48]	; (800744c <xTaskGenericNotify+0x174>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007420:	429a      	cmp	r2, r3
 8007422:	d907      	bls.n	8007434 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007424:	4b0a      	ldr	r3, [pc, #40]	; (8007450 <xTaskGenericNotify+0x178>)
 8007426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800742a:	601a      	str	r2, [r3, #0]
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007434:	f000 fab6 	bl	80079a4 <vPortExitCritical>

		return xReturn;
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800743a:	4618      	mov	r0, r3
 800743c:	3728      	adds	r7, #40	; 0x28
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	20000dc8 	.word	0x20000dc8
 8007448:	20000cc4 	.word	0x20000cc4
 800744c:	20000cc0 	.word	0x20000cc0
 8007450:	e000ed04 	.word	0xe000ed04

08007454 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08e      	sub	sp, #56	; 0x38
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	603b      	str	r3, [r7, #0]
 8007460:	4613      	mov	r3, r2
 8007462:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007464:	2301      	movs	r3, #1
 8007466:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10a      	bne.n	8007484 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007484:	f000 fb40 	bl	8007b08 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800748c:	f3ef 8211 	mrs	r2, BASEPRI
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	623a      	str	r2, [r7, #32]
 80074a2:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80074a4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d004      	beq.n	80074b8 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80074b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ba:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80074be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80074c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c4:	2202      	movs	r2, #2
 80074c6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 80074ca:	79fb      	ldrb	r3, [r7, #7]
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	d82f      	bhi.n	8007530 <xTaskGenericNotifyFromISR+0xdc>
 80074d0:	a201      	add	r2, pc, #4	; (adr r2, 80074d8 <xTaskGenericNotifyFromISR+0x84>)
 80074d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d6:	bf00      	nop
 80074d8:	08007553 	.word	0x08007553
 80074dc:	080074ed 	.word	0x080074ed
 80074e0:	080074ff 	.word	0x080074ff
 80074e4:	0800750f 	.word	0x0800750f
 80074e8:	08007519 	.word	0x08007519
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	431a      	orrs	r2, r3
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 80074fc:	e02c      	b.n	8007558 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800750c:	e024      	b.n	8007558 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 8007516:	e01f      	b.n	8007558 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007518:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800751c:	2b02      	cmp	r3, #2
 800751e:	d004      	beq.n	800752a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007528:	e016      	b.n	8007558 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800752a:	2300      	movs	r3, #0
 800752c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800752e:	e013      	b.n	8007558 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007532:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753a:	d00c      	beq.n	8007556 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	61bb      	str	r3, [r7, #24]
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8007552:	bf00      	nop
 8007554:	e000      	b.n	8007558 <xTaskGenericNotifyFromISR+0x104>
					break;
 8007556:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007558:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800755c:	2b01      	cmp	r3, #1
 800755e:	d145      	bne.n	80075ec <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00a      	beq.n	800757e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	617b      	str	r3, [r7, #20]
}
 800757a:	bf00      	nop
 800757c:	e7fe      	b.n	800757c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800757e:	4b21      	ldr	r3, [pc, #132]	; (8007604 <xTaskGenericNotifyFromISR+0x1b0>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d11c      	bne.n	80075c0 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	3304      	adds	r3, #4
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff f812 	bl	80065b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	2201      	movs	r2, #1
 8007596:	409a      	lsls	r2, r3
 8007598:	4b1b      	ldr	r3, [pc, #108]	; (8007608 <xTaskGenericNotifyFromISR+0x1b4>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4313      	orrs	r3, r2
 800759e:	4a1a      	ldr	r2, [pc, #104]	; (8007608 <xTaskGenericNotifyFromISR+0x1b4>)
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a6:	4613      	mov	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4a17      	ldr	r2, [pc, #92]	; (800760c <xTaskGenericNotifyFromISR+0x1b8>)
 80075b0:	441a      	add	r2, r3
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	3304      	adds	r3, #4
 80075b6:	4619      	mov	r1, r3
 80075b8:	4610      	mov	r0, r2
 80075ba:	f7fe ff9e 	bl	80064fa <vListInsertEnd>
 80075be:	e005      	b.n	80075cc <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80075c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c2:	3318      	adds	r3, #24
 80075c4:	4619      	mov	r1, r3
 80075c6:	4812      	ldr	r0, [pc, #72]	; (8007610 <xTaskGenericNotifyFromISR+0x1bc>)
 80075c8:	f7fe ff97 	bl	80064fa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d0:	4b10      	ldr	r3, [pc, #64]	; (8007614 <xTaskGenericNotifyFromISR+0x1c0>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d908      	bls.n	80075ec <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80075da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80075e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075e2:	2201      	movs	r2, #1
 80075e4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80075e6:	4b0c      	ldr	r3, [pc, #48]	; (8007618 <xTaskGenericNotifyFromISR+0x1c4>)
 80075e8:	2201      	movs	r2, #1
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80075f6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80075f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3738      	adds	r7, #56	; 0x38
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	20000de8 	.word	0x20000de8
 8007608:	20000dc8 	.word	0x20000dc8
 800760c:	20000cc4 	.word	0x20000cc4
 8007610:	20000d80 	.word	0x20000d80
 8007614:	20000cc0 	.word	0x20000cc0
 8007618:	20000dd4 	.word	0x20000dd4

0800761c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007626:	4b29      	ldr	r3, [pc, #164]	; (80076cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800762c:	4b28      	ldr	r3, [pc, #160]	; (80076d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3304      	adds	r3, #4
 8007632:	4618      	mov	r0, r3
 8007634:	f7fe ffbe 	bl	80065b4 <uxListRemove>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10b      	bne.n	8007656 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800763e:	4b24      	ldr	r3, [pc, #144]	; (80076d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	2201      	movs	r2, #1
 8007646:	fa02 f303 	lsl.w	r3, r2, r3
 800764a:	43da      	mvns	r2, r3
 800764c:	4b21      	ldr	r3, [pc, #132]	; (80076d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4013      	ands	r3, r2
 8007652:	4a20      	ldr	r2, [pc, #128]	; (80076d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007654:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765c:	d10a      	bne.n	8007674 <prvAddCurrentTaskToDelayedList+0x58>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007664:	4b1a      	ldr	r3, [pc, #104]	; (80076d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3304      	adds	r3, #4
 800766a:	4619      	mov	r1, r3
 800766c:	481a      	ldr	r0, [pc, #104]	; (80076d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800766e:	f7fe ff44 	bl	80064fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007672:	e026      	b.n	80076c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4413      	add	r3, r2
 800767a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800767c:	4b14      	ldr	r3, [pc, #80]	; (80076d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	429a      	cmp	r2, r3
 800768a:	d209      	bcs.n	80076a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800768c:	4b13      	ldr	r3, [pc, #76]	; (80076dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	4b0f      	ldr	r3, [pc, #60]	; (80076d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3304      	adds	r3, #4
 8007696:	4619      	mov	r1, r3
 8007698:	4610      	mov	r0, r2
 800769a:	f7fe ff52 	bl	8006542 <vListInsert>
}
 800769e:	e010      	b.n	80076c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076a0:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	4b0a      	ldr	r3, [pc, #40]	; (80076d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3304      	adds	r3, #4
 80076aa:	4619      	mov	r1, r3
 80076ac:	4610      	mov	r0, r2
 80076ae:	f7fe ff48 	bl	8006542 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80076b2:	4b0c      	ldr	r3, [pc, #48]	; (80076e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d202      	bcs.n	80076c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80076bc:	4a09      	ldr	r2, [pc, #36]	; (80076e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	6013      	str	r3, [r2, #0]
}
 80076c2:	bf00      	nop
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	20000dc4 	.word	0x20000dc4
 80076d0:	20000cc0 	.word	0x20000cc0
 80076d4:	20000dc8 	.word	0x20000dc8
 80076d8:	20000dac 	.word	0x20000dac
 80076dc:	20000d7c 	.word	0x20000d7c
 80076e0:	20000d78 	.word	0x20000d78
 80076e4:	20000de0 	.word	0x20000de0

080076e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3b04      	subs	r3, #4
 80076f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007700:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3b04      	subs	r3, #4
 8007706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f023 0201 	bic.w	r2, r3, #1
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	3b04      	subs	r3, #4
 8007716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007718:	4a0c      	ldr	r2, [pc, #48]	; (800774c <pxPortInitialiseStack+0x64>)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3b14      	subs	r3, #20
 8007722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3b04      	subs	r3, #4
 800772e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f06f 0202 	mvn.w	r2, #2
 8007736:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3b20      	subs	r3, #32
 800773c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800773e:	68fb      	ldr	r3, [r7, #12]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	08007751 	.word	0x08007751

08007750 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007756:	2300      	movs	r3, #0
 8007758:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800775a:	4b12      	ldr	r3, [pc, #72]	; (80077a4 <prvTaskExitError+0x54>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007762:	d00a      	beq.n	800777a <prvTaskExitError+0x2a>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	60fb      	str	r3, [r7, #12]
}
 8007776:	bf00      	nop
 8007778:	e7fe      	b.n	8007778 <prvTaskExitError+0x28>
	__asm volatile
 800777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	60bb      	str	r3, [r7, #8]
}
 800778c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800778e:	bf00      	nop
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0fc      	beq.n	8007790 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007796:	bf00      	nop
 8007798:	bf00      	nop
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	20000014 	.word	0x20000014
	...

080077b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077b0:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <pxCurrentTCBConst2>)
 80077b2:	6819      	ldr	r1, [r3, #0]
 80077b4:	6808      	ldr	r0, [r1, #0]
 80077b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ba:	f380 8809 	msr	PSP, r0
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f04f 0000 	mov.w	r0, #0
 80077c6:	f380 8811 	msr	BASEPRI, r0
 80077ca:	4770      	bx	lr
 80077cc:	f3af 8000 	nop.w

080077d0 <pxCurrentTCBConst2>:
 80077d0:	20000cc0 	.word	0x20000cc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop

080077d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077d8:	4808      	ldr	r0, [pc, #32]	; (80077fc <prvPortStartFirstTask+0x24>)
 80077da:	6800      	ldr	r0, [r0, #0]
 80077dc:	6800      	ldr	r0, [r0, #0]
 80077de:	f380 8808 	msr	MSP, r0
 80077e2:	f04f 0000 	mov.w	r0, #0
 80077e6:	f380 8814 	msr	CONTROL, r0
 80077ea:	b662      	cpsie	i
 80077ec:	b661      	cpsie	f
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	df00      	svc	0
 80077f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077fa:	bf00      	nop
 80077fc:	e000ed08 	.word	0xe000ed08

08007800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007806:	4b46      	ldr	r3, [pc, #280]	; (8007920 <xPortStartScheduler+0x120>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a46      	ldr	r2, [pc, #280]	; (8007924 <xPortStartScheduler+0x124>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d10a      	bne.n	8007826 <xPortStartScheduler+0x26>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	613b      	str	r3, [r7, #16]
}
 8007822:	bf00      	nop
 8007824:	e7fe      	b.n	8007824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007826:	4b3e      	ldr	r3, [pc, #248]	; (8007920 <xPortStartScheduler+0x120>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a3f      	ldr	r2, [pc, #252]	; (8007928 <xPortStartScheduler+0x128>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d10a      	bne.n	8007846 <xPortStartScheduler+0x46>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	60fb      	str	r3, [r7, #12]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007846:	4b39      	ldr	r3, [pc, #228]	; (800792c <xPortStartScheduler+0x12c>)
 8007848:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	b2db      	uxtb	r3, r3
 8007850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	22ff      	movs	r2, #255	; 0xff
 8007856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007868:	b2da      	uxtb	r2, r3
 800786a:	4b31      	ldr	r3, [pc, #196]	; (8007930 <xPortStartScheduler+0x130>)
 800786c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800786e:	4b31      	ldr	r3, [pc, #196]	; (8007934 <xPortStartScheduler+0x134>)
 8007870:	2207      	movs	r2, #7
 8007872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007874:	e009      	b.n	800788a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007876:	4b2f      	ldr	r3, [pc, #188]	; (8007934 <xPortStartScheduler+0x134>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3b01      	subs	r3, #1
 800787c:	4a2d      	ldr	r2, [pc, #180]	; (8007934 <xPortStartScheduler+0x134>)
 800787e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	b2db      	uxtb	r3, r3
 8007888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800788a:	78fb      	ldrb	r3, [r7, #3]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007892:	2b80      	cmp	r3, #128	; 0x80
 8007894:	d0ef      	beq.n	8007876 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007896:	4b27      	ldr	r3, [pc, #156]	; (8007934 <xPortStartScheduler+0x134>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f1c3 0307 	rsb	r3, r3, #7
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d00a      	beq.n	80078b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	60bb      	str	r3, [r7, #8]
}
 80078b4:	bf00      	nop
 80078b6:	e7fe      	b.n	80078b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078b8:	4b1e      	ldr	r3, [pc, #120]	; (8007934 <xPortStartScheduler+0x134>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	021b      	lsls	r3, r3, #8
 80078be:	4a1d      	ldr	r2, [pc, #116]	; (8007934 <xPortStartScheduler+0x134>)
 80078c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078c2:	4b1c      	ldr	r3, [pc, #112]	; (8007934 <xPortStartScheduler+0x134>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078ca:	4a1a      	ldr	r2, [pc, #104]	; (8007934 <xPortStartScheduler+0x134>)
 80078cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078d6:	4b18      	ldr	r3, [pc, #96]	; (8007938 <xPortStartScheduler+0x138>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a17      	ldr	r2, [pc, #92]	; (8007938 <xPortStartScheduler+0x138>)
 80078dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078e2:	4b15      	ldr	r3, [pc, #84]	; (8007938 <xPortStartScheduler+0x138>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a14      	ldr	r2, [pc, #80]	; (8007938 <xPortStartScheduler+0x138>)
 80078e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078ee:	f000 f8dd 	bl	8007aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078f2:	4b12      	ldr	r3, [pc, #72]	; (800793c <xPortStartScheduler+0x13c>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078f8:	f000 f8fc 	bl	8007af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078fc:	4b10      	ldr	r3, [pc, #64]	; (8007940 <xPortStartScheduler+0x140>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a0f      	ldr	r2, [pc, #60]	; (8007940 <xPortStartScheduler+0x140>)
 8007902:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007906:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007908:	f7ff ff66 	bl	80077d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800790c:	f7ff fb48 	bl	8006fa0 <vTaskSwitchContext>
	prvTaskExitError();
 8007910:	f7ff ff1e 	bl	8007750 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	e000ed00 	.word	0xe000ed00
 8007924:	410fc271 	.word	0x410fc271
 8007928:	410fc270 	.word	0x410fc270
 800792c:	e000e400 	.word	0xe000e400
 8007930:	20000dec 	.word	0x20000dec
 8007934:	20000df0 	.word	0x20000df0
 8007938:	e000ed20 	.word	0xe000ed20
 800793c:	20000014 	.word	0x20000014
 8007940:	e000ef34 	.word	0xe000ef34

08007944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	607b      	str	r3, [r7, #4]
}
 800795c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800795e:	4b0f      	ldr	r3, [pc, #60]	; (800799c <vPortEnterCritical+0x58>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3301      	adds	r3, #1
 8007964:	4a0d      	ldr	r2, [pc, #52]	; (800799c <vPortEnterCritical+0x58>)
 8007966:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007968:	4b0c      	ldr	r3, [pc, #48]	; (800799c <vPortEnterCritical+0x58>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d10f      	bne.n	8007990 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007970:	4b0b      	ldr	r3, [pc, #44]	; (80079a0 <vPortEnterCritical+0x5c>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <vPortEnterCritical+0x4c>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	603b      	str	r3, [r7, #0]
}
 800798c:	bf00      	nop
 800798e:	e7fe      	b.n	800798e <vPortEnterCritical+0x4a>
	}
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	20000014 	.word	0x20000014
 80079a0:	e000ed04 	.word	0xe000ed04

080079a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079aa:	4b12      	ldr	r3, [pc, #72]	; (80079f4 <vPortExitCritical+0x50>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10a      	bne.n	80079c8 <vPortExitCritical+0x24>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	607b      	str	r3, [r7, #4]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079c8:	4b0a      	ldr	r3, [pc, #40]	; (80079f4 <vPortExitCritical+0x50>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	4a09      	ldr	r2, [pc, #36]	; (80079f4 <vPortExitCritical+0x50>)
 80079d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079d2:	4b08      	ldr	r3, [pc, #32]	; (80079f4 <vPortExitCritical+0x50>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d105      	bne.n	80079e6 <vPortExitCritical+0x42>
 80079da:	2300      	movs	r3, #0
 80079dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	f383 8811 	msr	BASEPRI, r3
}
 80079e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079e6:	bf00      	nop
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	20000014 	.word	0x20000014
	...

08007a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a00:	f3ef 8009 	mrs	r0, PSP
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	4b15      	ldr	r3, [pc, #84]	; (8007a60 <pxCurrentTCBConst>)
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	f01e 0f10 	tst.w	lr, #16
 8007a10:	bf08      	it	eq
 8007a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1a:	6010      	str	r0, [r2, #0]
 8007a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a24:	f380 8811 	msr	BASEPRI, r0
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f7ff fab6 	bl	8006fa0 <vTaskSwitchContext>
 8007a34:	f04f 0000 	mov.w	r0, #0
 8007a38:	f380 8811 	msr	BASEPRI, r0
 8007a3c:	bc09      	pop	{r0, r3}
 8007a3e:	6819      	ldr	r1, [r3, #0]
 8007a40:	6808      	ldr	r0, [r1, #0]
 8007a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a46:	f01e 0f10 	tst.w	lr, #16
 8007a4a:	bf08      	it	eq
 8007a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a50:	f380 8809 	msr	PSP, r0
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	f3af 8000 	nop.w

08007a60 <pxCurrentTCBConst>:
 8007a60:	20000cc0 	.word	0x20000cc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop

08007a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	607b      	str	r3, [r7, #4]
}
 8007a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a82:	f7ff f9d5 	bl	8006e30 <xTaskIncrementTick>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a8c:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <SysTick_Handler+0x40>)
 8007a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	2300      	movs	r3, #0
 8007a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f383 8811 	msr	BASEPRI, r3
}
 8007a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007aa0:	bf00      	nop
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	e000ed04 	.word	0xe000ed04

08007aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ab0:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <vPortSetupTimerInterrupt+0x34>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ab6:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <vPortSetupTimerInterrupt+0x38>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007abc:	4b0a      	ldr	r3, [pc, #40]	; (8007ae8 <vPortSetupTimerInterrupt+0x3c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a0a      	ldr	r2, [pc, #40]	; (8007aec <vPortSetupTimerInterrupt+0x40>)
 8007ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac6:	099b      	lsrs	r3, r3, #6
 8007ac8:	4a09      	ldr	r2, [pc, #36]	; (8007af0 <vPortSetupTimerInterrupt+0x44>)
 8007aca:	3b01      	subs	r3, #1
 8007acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ace:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <vPortSetupTimerInterrupt+0x34>)
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	601a      	str	r2, [r3, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	e000e010 	.word	0xe000e010
 8007ae4:	e000e018 	.word	0xe000e018
 8007ae8:	20000000 	.word	0x20000000
 8007aec:	10624dd3 	.word	0x10624dd3
 8007af0:	e000e014 	.word	0xe000e014

08007af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b04 <vPortEnableVFP+0x10>
 8007af8:	6801      	ldr	r1, [r0, #0]
 8007afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007afe:	6001      	str	r1, [r0, #0]
 8007b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b02:	bf00      	nop
 8007b04:	e000ed88 	.word	0xe000ed88

08007b08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b0e:	f3ef 8305 	mrs	r3, IPSR
 8007b12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2b0f      	cmp	r3, #15
 8007b18:	d914      	bls.n	8007b44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b1a:	4a17      	ldr	r2, [pc, #92]	; (8007b78 <vPortValidateInterruptPriority+0x70>)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4413      	add	r3, r2
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b24:	4b15      	ldr	r3, [pc, #84]	; (8007b7c <vPortValidateInterruptPriority+0x74>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	7afa      	ldrb	r2, [r7, #11]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d20a      	bcs.n	8007b44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	607b      	str	r3, [r7, #4]
}
 8007b40:	bf00      	nop
 8007b42:	e7fe      	b.n	8007b42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b44:	4b0e      	ldr	r3, [pc, #56]	; (8007b80 <vPortValidateInterruptPriority+0x78>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b4c:	4b0d      	ldr	r3, [pc, #52]	; (8007b84 <vPortValidateInterruptPriority+0x7c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d90a      	bls.n	8007b6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	603b      	str	r3, [r7, #0]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <vPortValidateInterruptPriority+0x60>
	}
 8007b6a:	bf00      	nop
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	e000e3f0 	.word	0xe000e3f0
 8007b7c:	20000dec 	.word	0x20000dec
 8007b80:	e000ed0c 	.word	0xe000ed0c
 8007b84:	20000df0 	.word	0x20000df0

08007b88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08a      	sub	sp, #40	; 0x28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b90:	2300      	movs	r3, #0
 8007b92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b94:	f7ff f8a2 	bl	8006cdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b98:	4b5b      	ldr	r3, [pc, #364]	; (8007d08 <pvPortMalloc+0x180>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ba0:	f000 f920 	bl	8007de4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ba4:	4b59      	ldr	r3, [pc, #356]	; (8007d0c <pvPortMalloc+0x184>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4013      	ands	r3, r2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f040 8093 	bne.w	8007cd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01d      	beq.n	8007bf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007bb8:	2208      	movs	r2, #8
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d014      	beq.n	8007bf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f023 0307 	bic.w	r3, r3, #7
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f003 0307 	and.w	r3, r3, #7
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <pvPortMalloc+0x6c>
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	617b      	str	r3, [r7, #20]
}
 8007bf0:	bf00      	nop
 8007bf2:	e7fe      	b.n	8007bf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d06e      	beq.n	8007cd8 <pvPortMalloc+0x150>
 8007bfa:	4b45      	ldr	r3, [pc, #276]	; (8007d10 <pvPortMalloc+0x188>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d869      	bhi.n	8007cd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c04:	4b43      	ldr	r3, [pc, #268]	; (8007d14 <pvPortMalloc+0x18c>)
 8007c06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c08:	4b42      	ldr	r3, [pc, #264]	; (8007d14 <pvPortMalloc+0x18c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c0e:	e004      	b.n	8007c1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d903      	bls.n	8007c2c <pvPortMalloc+0xa4>
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1f1      	bne.n	8007c10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c2c:	4b36      	ldr	r3, [pc, #216]	; (8007d08 <pvPortMalloc+0x180>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d050      	beq.n	8007cd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2208      	movs	r2, #8
 8007c3c:	4413      	add	r3, r2
 8007c3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	1ad2      	subs	r2, r2, r3
 8007c50:	2308      	movs	r3, #8
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d91f      	bls.n	8007c98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f003 0307 	and.w	r3, r3, #7
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <pvPortMalloc+0xf8>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	613b      	str	r3, [r7, #16]
}
 8007c7c:	bf00      	nop
 8007c7e:	e7fe      	b.n	8007c7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	1ad2      	subs	r2, r2, r3
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c92:	69b8      	ldr	r0, [r7, #24]
 8007c94:	f000 f908 	bl	8007ea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c98:	4b1d      	ldr	r3, [pc, #116]	; (8007d10 <pvPortMalloc+0x188>)
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	4a1b      	ldr	r2, [pc, #108]	; (8007d10 <pvPortMalloc+0x188>)
 8007ca4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ca6:	4b1a      	ldr	r3, [pc, #104]	; (8007d10 <pvPortMalloc+0x188>)
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	4b1b      	ldr	r3, [pc, #108]	; (8007d18 <pvPortMalloc+0x190>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d203      	bcs.n	8007cba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cb2:	4b17      	ldr	r3, [pc, #92]	; (8007d10 <pvPortMalloc+0x188>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a18      	ldr	r2, [pc, #96]	; (8007d18 <pvPortMalloc+0x190>)
 8007cb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	4b13      	ldr	r3, [pc, #76]	; (8007d0c <pvPortMalloc+0x184>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	2200      	movs	r2, #0
 8007ccc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cce:	4b13      	ldr	r3, [pc, #76]	; (8007d1c <pvPortMalloc+0x194>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	4a11      	ldr	r2, [pc, #68]	; (8007d1c <pvPortMalloc+0x194>)
 8007cd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cd8:	f7ff f80e 	bl	8006cf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	f003 0307 	and.w	r3, r3, #7
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <pvPortMalloc+0x174>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	60fb      	str	r3, [r7, #12]
}
 8007cf8:	bf00      	nop
 8007cfa:	e7fe      	b.n	8007cfa <pvPortMalloc+0x172>
	return pvReturn;
 8007cfc:	69fb      	ldr	r3, [r7, #28]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3728      	adds	r7, #40	; 0x28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	200049fc 	.word	0x200049fc
 8007d0c:	20004a10 	.word	0x20004a10
 8007d10:	20004a00 	.word	0x20004a00
 8007d14:	200049f4 	.word	0x200049f4
 8007d18:	20004a04 	.word	0x20004a04
 8007d1c:	20004a08 	.word	0x20004a08

08007d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d04d      	beq.n	8007dce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d32:	2308      	movs	r3, #8
 8007d34:	425b      	negs	r3, r3
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	4413      	add	r3, r2
 8007d3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	4b24      	ldr	r3, [pc, #144]	; (8007dd8 <vPortFree+0xb8>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4013      	ands	r3, r2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10a      	bne.n	8007d64 <vPortFree+0x44>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	60fb      	str	r3, [r7, #12]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00a      	beq.n	8007d82 <vPortFree+0x62>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	60bb      	str	r3, [r7, #8]
}
 8007d7e:	bf00      	nop
 8007d80:	e7fe      	b.n	8007d80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	4b14      	ldr	r3, [pc, #80]	; (8007dd8 <vPortFree+0xb8>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d01e      	beq.n	8007dce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d11a      	bne.n	8007dce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	4b0e      	ldr	r3, [pc, #56]	; (8007dd8 <vPortFree+0xb8>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	43db      	mvns	r3, r3
 8007da2:	401a      	ands	r2, r3
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007da8:	f7fe ff98 	bl	8006cdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <vPortFree+0xbc>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4413      	add	r3, r2
 8007db6:	4a09      	ldr	r2, [pc, #36]	; (8007ddc <vPortFree+0xbc>)
 8007db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dba:	6938      	ldr	r0, [r7, #16]
 8007dbc:	f000 f874 	bl	8007ea8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007dc0:	4b07      	ldr	r3, [pc, #28]	; (8007de0 <vPortFree+0xc0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	4a06      	ldr	r2, [pc, #24]	; (8007de0 <vPortFree+0xc0>)
 8007dc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dca:	f7fe ff95 	bl	8006cf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dce:	bf00      	nop
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20004a10 	.word	0x20004a10
 8007ddc:	20004a00 	.word	0x20004a00
 8007de0:	20004a0c 	.word	0x20004a0c

08007de4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007dee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007df0:	4b27      	ldr	r3, [pc, #156]	; (8007e90 <prvHeapInit+0xac>)
 8007df2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00c      	beq.n	8007e18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3307      	adds	r3, #7
 8007e02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f023 0307 	bic.w	r3, r3, #7
 8007e0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	4a1f      	ldr	r2, [pc, #124]	; (8007e90 <prvHeapInit+0xac>)
 8007e14:	4413      	add	r3, r2
 8007e16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e1c:	4a1d      	ldr	r2, [pc, #116]	; (8007e94 <prvHeapInit+0xb0>)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e22:	4b1c      	ldr	r3, [pc, #112]	; (8007e94 <prvHeapInit+0xb0>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e30:	2208      	movs	r2, #8
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	1a9b      	subs	r3, r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f023 0307 	bic.w	r3, r3, #7
 8007e3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4a15      	ldr	r2, [pc, #84]	; (8007e98 <prvHeapInit+0xb4>)
 8007e44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e46:	4b14      	ldr	r3, [pc, #80]	; (8007e98 <prvHeapInit+0xb4>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e4e:	4b12      	ldr	r3, [pc, #72]	; (8007e98 <prvHeapInit+0xb4>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2200      	movs	r2, #0
 8007e54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	1ad2      	subs	r2, r2, r3
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e64:	4b0c      	ldr	r3, [pc, #48]	; (8007e98 <prvHeapInit+0xb4>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	4a0a      	ldr	r2, [pc, #40]	; (8007e9c <prvHeapInit+0xb8>)
 8007e72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	4a09      	ldr	r2, [pc, #36]	; (8007ea0 <prvHeapInit+0xbc>)
 8007e7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e7c:	4b09      	ldr	r3, [pc, #36]	; (8007ea4 <prvHeapInit+0xc0>)
 8007e7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e82:	601a      	str	r2, [r3, #0]
}
 8007e84:	bf00      	nop
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	20000df4 	.word	0x20000df4
 8007e94:	200049f4 	.word	0x200049f4
 8007e98:	200049fc 	.word	0x200049fc
 8007e9c:	20004a04 	.word	0x20004a04
 8007ea0:	20004a00 	.word	0x20004a00
 8007ea4:	20004a10 	.word	0x20004a10

08007ea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007eb0:	4b28      	ldr	r3, [pc, #160]	; (8007f54 <prvInsertBlockIntoFreeList+0xac>)
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	e002      	b.n	8007ebc <prvInsertBlockIntoFreeList+0x14>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	60fb      	str	r3, [r7, #12]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d8f7      	bhi.n	8007eb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d108      	bne.n	8007eea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	441a      	add	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	441a      	add	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d118      	bne.n	8007f30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	4b15      	ldr	r3, [pc, #84]	; (8007f58 <prvInsertBlockIntoFreeList+0xb0>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d00d      	beq.n	8007f26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	441a      	add	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	e008      	b.n	8007f38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f26:	4b0c      	ldr	r3, [pc, #48]	; (8007f58 <prvInsertBlockIntoFreeList+0xb0>)
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	e003      	b.n	8007f38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d002      	beq.n	8007f46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f46:	bf00      	nop
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	200049f4 	.word	0x200049f4
 8007f58:	200049fc 	.word	0x200049fc

08007f5c <memset>:
 8007f5c:	4402      	add	r2, r0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d100      	bne.n	8007f66 <memset+0xa>
 8007f64:	4770      	bx	lr
 8007f66:	f803 1b01 	strb.w	r1, [r3], #1
 8007f6a:	e7f9      	b.n	8007f60 <memset+0x4>

08007f6c <strchr>:
 8007f6c:	b2c9      	uxtb	r1, r1
 8007f6e:	4603      	mov	r3, r0
 8007f70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f74:	b11a      	cbz	r2, 8007f7e <strchr+0x12>
 8007f76:	428a      	cmp	r2, r1
 8007f78:	d1f9      	bne.n	8007f6e <strchr+0x2>
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	4770      	bx	lr
 8007f7e:	2900      	cmp	r1, #0
 8007f80:	bf18      	it	ne
 8007f82:	2300      	movne	r3, #0
 8007f84:	e7f9      	b.n	8007f7a <strchr+0xe>
	...

08007f88 <_reclaim_reent>:
 8007f88:	4b29      	ldr	r3, [pc, #164]	; (8008030 <_reclaim_reent+0xa8>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4283      	cmp	r3, r0
 8007f8e:	b570      	push	{r4, r5, r6, lr}
 8007f90:	4604      	mov	r4, r0
 8007f92:	d04b      	beq.n	800802c <_reclaim_reent+0xa4>
 8007f94:	69c3      	ldr	r3, [r0, #28]
 8007f96:	b143      	cbz	r3, 8007faa <_reclaim_reent+0x22>
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d144      	bne.n	8008028 <_reclaim_reent+0xa0>
 8007f9e:	69e3      	ldr	r3, [r4, #28]
 8007fa0:	6819      	ldr	r1, [r3, #0]
 8007fa2:	b111      	cbz	r1, 8007faa <_reclaim_reent+0x22>
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f000 f86b 	bl	8008080 <_free_r>
 8007faa:	6961      	ldr	r1, [r4, #20]
 8007fac:	b111      	cbz	r1, 8007fb4 <_reclaim_reent+0x2c>
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f000 f866 	bl	8008080 <_free_r>
 8007fb4:	69e1      	ldr	r1, [r4, #28]
 8007fb6:	b111      	cbz	r1, 8007fbe <_reclaim_reent+0x36>
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f000 f861 	bl	8008080 <_free_r>
 8007fbe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007fc0:	b111      	cbz	r1, 8007fc8 <_reclaim_reent+0x40>
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f000 f85c 	bl	8008080 <_free_r>
 8007fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fca:	b111      	cbz	r1, 8007fd2 <_reclaim_reent+0x4a>
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f000 f857 	bl	8008080 <_free_r>
 8007fd2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007fd4:	b111      	cbz	r1, 8007fdc <_reclaim_reent+0x54>
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f000 f852 	bl	8008080 <_free_r>
 8007fdc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007fde:	b111      	cbz	r1, 8007fe6 <_reclaim_reent+0x5e>
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f000 f84d 	bl	8008080 <_free_r>
 8007fe6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007fe8:	b111      	cbz	r1, 8007ff0 <_reclaim_reent+0x68>
 8007fea:	4620      	mov	r0, r4
 8007fec:	f000 f848 	bl	8008080 <_free_r>
 8007ff0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007ff2:	b111      	cbz	r1, 8007ffa <_reclaim_reent+0x72>
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f000 f843 	bl	8008080 <_free_r>
 8007ffa:	6a23      	ldr	r3, [r4, #32]
 8007ffc:	b1b3      	cbz	r3, 800802c <_reclaim_reent+0xa4>
 8007ffe:	4620      	mov	r0, r4
 8008000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008004:	4718      	bx	r3
 8008006:	5949      	ldr	r1, [r1, r5]
 8008008:	b941      	cbnz	r1, 800801c <_reclaim_reent+0x94>
 800800a:	3504      	adds	r5, #4
 800800c:	69e3      	ldr	r3, [r4, #28]
 800800e:	2d80      	cmp	r5, #128	; 0x80
 8008010:	68d9      	ldr	r1, [r3, #12]
 8008012:	d1f8      	bne.n	8008006 <_reclaim_reent+0x7e>
 8008014:	4620      	mov	r0, r4
 8008016:	f000 f833 	bl	8008080 <_free_r>
 800801a:	e7c0      	b.n	8007f9e <_reclaim_reent+0x16>
 800801c:	680e      	ldr	r6, [r1, #0]
 800801e:	4620      	mov	r0, r4
 8008020:	f000 f82e 	bl	8008080 <_free_r>
 8008024:	4631      	mov	r1, r6
 8008026:	e7ef      	b.n	8008008 <_reclaim_reent+0x80>
 8008028:	2500      	movs	r5, #0
 800802a:	e7ef      	b.n	800800c <_reclaim_reent+0x84>
 800802c:	bd70      	pop	{r4, r5, r6, pc}
 800802e:	bf00      	nop
 8008030:	20000064 	.word	0x20000064

08008034 <__libc_init_array>:
 8008034:	b570      	push	{r4, r5, r6, lr}
 8008036:	4d0d      	ldr	r5, [pc, #52]	; (800806c <__libc_init_array+0x38>)
 8008038:	4c0d      	ldr	r4, [pc, #52]	; (8008070 <__libc_init_array+0x3c>)
 800803a:	1b64      	subs	r4, r4, r5
 800803c:	10a4      	asrs	r4, r4, #2
 800803e:	2600      	movs	r6, #0
 8008040:	42a6      	cmp	r6, r4
 8008042:	d109      	bne.n	8008058 <__libc_init_array+0x24>
 8008044:	4d0b      	ldr	r5, [pc, #44]	; (8008074 <__libc_init_array+0x40>)
 8008046:	4c0c      	ldr	r4, [pc, #48]	; (8008078 <__libc_init_array+0x44>)
 8008048:	f000 f872 	bl	8008130 <_init>
 800804c:	1b64      	subs	r4, r4, r5
 800804e:	10a4      	asrs	r4, r4, #2
 8008050:	2600      	movs	r6, #0
 8008052:	42a6      	cmp	r6, r4
 8008054:	d105      	bne.n	8008062 <__libc_init_array+0x2e>
 8008056:	bd70      	pop	{r4, r5, r6, pc}
 8008058:	f855 3b04 	ldr.w	r3, [r5], #4
 800805c:	4798      	blx	r3
 800805e:	3601      	adds	r6, #1
 8008060:	e7ee      	b.n	8008040 <__libc_init_array+0xc>
 8008062:	f855 3b04 	ldr.w	r3, [r5], #4
 8008066:	4798      	blx	r3
 8008068:	3601      	adds	r6, #1
 800806a:	e7f2      	b.n	8008052 <__libc_init_array+0x1e>
 800806c:	08008284 	.word	0x08008284
 8008070:	08008284 	.word	0x08008284
 8008074:	08008284 	.word	0x08008284
 8008078:	08008288 	.word	0x08008288

0800807c <__retarget_lock_acquire_recursive>:
 800807c:	4770      	bx	lr

0800807e <__retarget_lock_release_recursive>:
 800807e:	4770      	bx	lr

08008080 <_free_r>:
 8008080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008082:	2900      	cmp	r1, #0
 8008084:	d044      	beq.n	8008110 <_free_r+0x90>
 8008086:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800808a:	9001      	str	r0, [sp, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	f1a1 0404 	sub.w	r4, r1, #4
 8008092:	bfb8      	it	lt
 8008094:	18e4      	addlt	r4, r4, r3
 8008096:	f000 f83f 	bl	8008118 <__malloc_lock>
 800809a:	4a1e      	ldr	r2, [pc, #120]	; (8008114 <_free_r+0x94>)
 800809c:	9801      	ldr	r0, [sp, #4]
 800809e:	6813      	ldr	r3, [r2, #0]
 80080a0:	b933      	cbnz	r3, 80080b0 <_free_r+0x30>
 80080a2:	6063      	str	r3, [r4, #4]
 80080a4:	6014      	str	r4, [r2, #0]
 80080a6:	b003      	add	sp, #12
 80080a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080ac:	f000 b83a 	b.w	8008124 <__malloc_unlock>
 80080b0:	42a3      	cmp	r3, r4
 80080b2:	d908      	bls.n	80080c6 <_free_r+0x46>
 80080b4:	6825      	ldr	r5, [r4, #0]
 80080b6:	1961      	adds	r1, r4, r5
 80080b8:	428b      	cmp	r3, r1
 80080ba:	bf01      	itttt	eq
 80080bc:	6819      	ldreq	r1, [r3, #0]
 80080be:	685b      	ldreq	r3, [r3, #4]
 80080c0:	1949      	addeq	r1, r1, r5
 80080c2:	6021      	streq	r1, [r4, #0]
 80080c4:	e7ed      	b.n	80080a2 <_free_r+0x22>
 80080c6:	461a      	mov	r2, r3
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	b10b      	cbz	r3, 80080d0 <_free_r+0x50>
 80080cc:	42a3      	cmp	r3, r4
 80080ce:	d9fa      	bls.n	80080c6 <_free_r+0x46>
 80080d0:	6811      	ldr	r1, [r2, #0]
 80080d2:	1855      	adds	r5, r2, r1
 80080d4:	42a5      	cmp	r5, r4
 80080d6:	d10b      	bne.n	80080f0 <_free_r+0x70>
 80080d8:	6824      	ldr	r4, [r4, #0]
 80080da:	4421      	add	r1, r4
 80080dc:	1854      	adds	r4, r2, r1
 80080de:	42a3      	cmp	r3, r4
 80080e0:	6011      	str	r1, [r2, #0]
 80080e2:	d1e0      	bne.n	80080a6 <_free_r+0x26>
 80080e4:	681c      	ldr	r4, [r3, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	6053      	str	r3, [r2, #4]
 80080ea:	440c      	add	r4, r1
 80080ec:	6014      	str	r4, [r2, #0]
 80080ee:	e7da      	b.n	80080a6 <_free_r+0x26>
 80080f0:	d902      	bls.n	80080f8 <_free_r+0x78>
 80080f2:	230c      	movs	r3, #12
 80080f4:	6003      	str	r3, [r0, #0]
 80080f6:	e7d6      	b.n	80080a6 <_free_r+0x26>
 80080f8:	6825      	ldr	r5, [r4, #0]
 80080fa:	1961      	adds	r1, r4, r5
 80080fc:	428b      	cmp	r3, r1
 80080fe:	bf04      	itt	eq
 8008100:	6819      	ldreq	r1, [r3, #0]
 8008102:	685b      	ldreq	r3, [r3, #4]
 8008104:	6063      	str	r3, [r4, #4]
 8008106:	bf04      	itt	eq
 8008108:	1949      	addeq	r1, r1, r5
 800810a:	6021      	streq	r1, [r4, #0]
 800810c:	6054      	str	r4, [r2, #4]
 800810e:	e7ca      	b.n	80080a6 <_free_r+0x26>
 8008110:	b003      	add	sp, #12
 8008112:	bd30      	pop	{r4, r5, pc}
 8008114:	20004b50 	.word	0x20004b50

08008118 <__malloc_lock>:
 8008118:	4801      	ldr	r0, [pc, #4]	; (8008120 <__malloc_lock+0x8>)
 800811a:	f7ff bfaf 	b.w	800807c <__retarget_lock_acquire_recursive>
 800811e:	bf00      	nop
 8008120:	20004b4c 	.word	0x20004b4c

08008124 <__malloc_unlock>:
 8008124:	4801      	ldr	r0, [pc, #4]	; (800812c <__malloc_unlock+0x8>)
 8008126:	f7ff bfaa 	b.w	800807e <__retarget_lock_release_recursive>
 800812a:	bf00      	nop
 800812c:	20004b4c 	.word	0x20004b4c

08008130 <_init>:
 8008130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008132:	bf00      	nop
 8008134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008136:	bc08      	pop	{r3}
 8008138:	469e      	mov	lr, r3
 800813a:	4770      	bx	lr

0800813c <_fini>:
 800813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813e:	bf00      	nop
 8008140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008142:	bc08      	pop	{r3}
 8008144:	469e      	mov	lr, r3
 8008146:	4770      	bx	lr
